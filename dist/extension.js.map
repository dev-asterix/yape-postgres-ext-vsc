{
  "version": 3,
  "sources": ["../node_modules/postgres-array/index.js", "../node_modules/pg-types/lib/arrayParser.js", "../node_modules/postgres-date/index.js", "../node_modules/xtend/mutable.js", "../node_modules/postgres-interval/index.js", "../node_modules/postgres-bytea/index.js", "../node_modules/pg-types/lib/textParsers.js", "../node_modules/pg-int8/index.js", "../node_modules/pg-types/lib/binaryParsers.js", "../node_modules/pg-types/lib/builtins.js", "../node_modules/pg-types/index.js", "../node_modules/pg/lib/defaults.js", "../node_modules/pg/lib/utils.js", "../node_modules/pg/lib/crypto/utils-legacy.js", "../node_modules/pg/lib/crypto/utils-webcrypto.js", "../node_modules/pg/lib/crypto/utils.js", "../node_modules/pg/lib/crypto/cert-signatures.js", "../node_modules/pg/lib/crypto/sasl.js", "../node_modules/pg/lib/type-overrides.js", "../node_modules/pg-connection-string/index.js", "../node_modules/pg/lib/connection-parameters.js", "../node_modules/pg/lib/result.js", "../node_modules/pg/lib/query.js", "../node_modules/pg-protocol/src/messages.ts", "../node_modules/pg-protocol/src/buffer-writer.ts", "../node_modules/pg-protocol/src/serializer.ts", "../node_modules/pg-protocol/src/buffer-reader.ts", "../node_modules/pg-protocol/src/parser.ts", "../node_modules/pg-protocol/src/index.ts", "../node_modules/pg-cloudflare/src/empty.ts", "../node_modules/pg/lib/stream.js", "../node_modules/pg/lib/connection.js", "../node_modules/split2/index.js", "../node_modules/pgpass/lib/helper.js", "../node_modules/pgpass/lib/index.js", "../node_modules/pg/lib/client.js", "../node_modules/pg-pool/index.js", "../node_modules/pg/lib/native/query.js", "../node_modules/pg/lib/native/client.js", "../node_modules/pg/lib/native/index.js", "../node_modules/pg/lib/index.js", "../src/extension.ts", "../src/connectionForm.ts", "../src/databaseTreeProvider.ts", "../src/tableProperties.ts", "../src/notebookProvider.ts", "../src/notebookKernel.ts", "../src/postgresNotebook.ts"],
  "sourcesContent": ["'use strict'\n\nexports.parse = function (source, transform) {\n  return new ArrayParser(source, transform).parse()\n}\n\nclass ArrayParser {\n  constructor (source, transform) {\n    this.source = source\n    this.transform = transform || identity\n    this.position = 0\n    this.entries = []\n    this.recorded = []\n    this.dimension = 0\n  }\n\n  isEof () {\n    return this.position >= this.source.length\n  }\n\n  nextCharacter () {\n    var character = this.source[this.position++]\n    if (character === '\\\\') {\n      return {\n        value: this.source[this.position++],\n        escaped: true\n      }\n    }\n    return {\n      value: character,\n      escaped: false\n    }\n  }\n\n  record (character) {\n    this.recorded.push(character)\n  }\n\n  newEntry (includeEmpty) {\n    var entry\n    if (this.recorded.length > 0 || includeEmpty) {\n      entry = this.recorded.join('')\n      if (entry === 'NULL' && !includeEmpty) {\n        entry = null\n      }\n      if (entry !== null) entry = this.transform(entry)\n      this.entries.push(entry)\n      this.recorded = []\n    }\n  }\n\n  consumeDimensions () {\n    if (this.source[0] === '[') {\n      while (!this.isEof()) {\n        var char = this.nextCharacter()\n        if (char.value === '=') break\n      }\n    }\n  }\n\n  parse (nested) {\n    var character, parser, quote\n    this.consumeDimensions()\n    while (!this.isEof()) {\n      character = this.nextCharacter()\n      if (character.value === '{' && !quote) {\n        this.dimension++\n        if (this.dimension > 1) {\n          parser = new ArrayParser(this.source.substr(this.position - 1), this.transform)\n          this.entries.push(parser.parse(true))\n          this.position += parser.position - 2\n        }\n      } else if (character.value === '}' && !quote) {\n        this.dimension--\n        if (!this.dimension) {\n          this.newEntry()\n          if (nested) return this.entries\n        }\n      } else if (character.value === '\"' && !character.escaped) {\n        if (quote) this.newEntry(true)\n        quote = !quote\n      } else if (character.value === ',' && !quote) {\n        this.newEntry()\n      } else {\n        this.record(character.value)\n      }\n    }\n    if (this.dimension !== 0) {\n      throw new Error('array dimension not balanced')\n    }\n    return this.entries\n  }\n}\n\nfunction identity (value) {\n  return value\n}\n", "var array = require('postgres-array');\n\nmodule.exports = {\n  create: function (source, transform) {\n    return {\n      parse: function() {\n        return array.parse(source, transform);\n      }\n    };\n  }\n};\n", "'use strict'\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/\nvar INFINITY = /^-?infinity$/\n\nmodule.exports = function parseDate (isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'))\n  }\n  var matches = DATE_TIME.exec(isoDate)\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null\n  }\n\n  var isBC = !!matches[8]\n  var year = parseInt(matches[1], 10)\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  var hour = parseInt(matches[4], 10)\n  var minute = parseInt(matches[5], 10)\n  var second = parseInt(matches[6], 10)\n\n  var ms = matches[7]\n  ms = ms ? 1000 * parseFloat(ms) : 0\n\n  var date\n  var offset = timeZoneOffset(isoDate)\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms))\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year)\n    }\n\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset)\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms)\n\n    if (is0To99(year)) {\n      date.setFullYear(year)\n    }\n  }\n\n  return date\n}\n\nfunction getDate (isoDate) {\n  var matches = DATE.exec(isoDate)\n  if (!matches) {\n    return\n  }\n\n  var year = parseInt(matches[1], 10)\n  var isBC = !!matches[4]\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day)\n\n  if (is0To99(year)) {\n    date.setFullYear(year)\n  }\n\n  return date\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset (isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0\n  }\n\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])\n  if (!zone) return\n  var type = zone[1]\n\n  if (type === 'Z') {\n    return 0\n  }\n  var sign = type === '-' ? -1 : 1\n  var offset = parseInt(zone[2], 10) * 3600 +\n    parseInt(zone[3] || 0, 10) * 60 +\n    parseInt(zone[4] || 0, 10)\n\n  return offset * sign * 1000\n}\n\nfunction bcYearToNegativeYear (year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1)\n}\n\nfunction is0To99 (num) {\n  return num >= 0 && num < 100\n}\n", "module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend(target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n", "'use strict'\n\nvar extend = require('xtend/mutable')\n\nmodule.exports = PostgresInterval\n\nfunction PostgresInterval (raw) {\n  if (!(this instanceof PostgresInterval)) {\n    return new PostgresInterval(raw)\n  }\n  extend(this, parse(raw))\n}\nvar properties = ['seconds', 'minutes', 'hours', 'days', 'months', 'years']\nPostgresInterval.prototype.toPostgres = function () {\n  var filtered = properties.filter(this.hasOwnProperty, this)\n\n  // In addition to `properties`, we need to account for fractions of seconds.\n  if (this.milliseconds && filtered.indexOf('seconds') < 0) {\n    filtered.push('seconds')\n  }\n\n  if (filtered.length === 0) return '0'\n  return filtered\n    .map(function (property) {\n      var value = this[property] || 0\n\n      // Account for fractional part of seconds,\n      // remove trailing zeroes.\n      if (property === 'seconds' && this.milliseconds) {\n        value = (value + this.milliseconds / 1000).toFixed(6).replace(/\\.?0+$/, '')\n      }\n\n      return value + ' ' + property\n    }, this)\n    .join(' ')\n}\n\nvar propertiesISOEquivalent = {\n  years: 'Y',\n  months: 'M',\n  days: 'D',\n  hours: 'H',\n  minutes: 'M',\n  seconds: 'S'\n}\nvar dateProperties = ['years', 'months', 'days']\nvar timeProperties = ['hours', 'minutes', 'seconds']\n// according to ISO 8601\nPostgresInterval.prototype.toISOString = PostgresInterval.prototype.toISO = function () {\n  var datePart = dateProperties\n    .map(buildProperty, this)\n    .join('')\n\n  var timePart = timeProperties\n    .map(buildProperty, this)\n    .join('')\n\n  return 'P' + datePart + 'T' + timePart\n\n  function buildProperty (property) {\n    var value = this[property] || 0\n\n    // Account for fractional part of seconds,\n    // remove trailing zeroes.\n    if (property === 'seconds' && this.milliseconds) {\n      value = (value + this.milliseconds / 1000).toFixed(6).replace(/0+$/, '')\n    }\n\n    return value + propertiesISOEquivalent[property]\n  }\n}\n\nvar NUMBER = '([+-]?\\\\d+)'\nvar YEAR = NUMBER + '\\\\s+years?'\nvar MONTH = NUMBER + '\\\\s+mons?'\nvar DAY = NUMBER + '\\\\s+days?'\nvar TIME = '([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?'\nvar INTERVAL = new RegExp([YEAR, MONTH, DAY, TIME].map(function (regexString) {\n  return '(' + regexString + ')?'\n})\n  .join('\\\\s*'))\n\n// Positions of values in regex match\nvar positions = {\n  years: 2,\n  months: 4,\n  days: 6,\n  hours: 9,\n  minutes: 10,\n  seconds: 11,\n  milliseconds: 12\n}\n// We can use negative time\nvar negatives = ['hours', 'minutes', 'seconds', 'milliseconds']\n\nfunction parseMilliseconds (fraction) {\n  // add omitted zeroes\n  var microseconds = fraction + '000000'.slice(fraction.length)\n  return parseInt(microseconds, 10) / 1000\n}\n\nfunction parse (interval) {\n  if (!interval) return {}\n  var matches = INTERVAL.exec(interval)\n  var isNegative = matches[8] === '-'\n  return Object.keys(positions)\n    .reduce(function (parsed, property) {\n      var position = positions[property]\n      var value = matches[position]\n      // no empty string\n      if (!value) return parsed\n      // milliseconds are actually microseconds (up to 6 digits)\n      // with omitted trailing zeroes.\n      value = property === 'milliseconds'\n        ? parseMilliseconds(value)\n        : parseInt(value, 10)\n      // no zeros\n      if (!value) return parsed\n      if (isNegative && ~negatives.indexOf(property)) {\n        value *= -1\n      }\n      parsed[property] = value\n      return parsed\n    }, {})\n}\n", "'use strict'\n\nmodule.exports = function parseBytea (input) {\n  if (/^\\\\x/.test(input)) {\n    // new 'hex' style response (pg >9.0)\n    return new Buffer(input.substr(2), 'hex')\n  }\n  var output = ''\n  var i = 0\n  while (i < input.length) {\n    if (input[i] !== '\\\\') {\n      output += input[i]\n      ++i\n    } else {\n      if (/[0-7]{3}/.test(input.substr(i + 1, 3))) {\n        output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8))\n        i += 4\n      } else {\n        var backslashes = 1\n        while (i + backslashes < input.length && input[i + backslashes] === '\\\\') {\n          backslashes++\n        }\n        for (var k = 0; k < Math.floor(backslashes / 2); ++k) {\n          output += '\\\\'\n        }\n        i += Math.floor(backslashes / 2) * 2\n      }\n    }\n  }\n  return new Buffer(output, 'binary')\n}\n", "var array = require('postgres-array')\nvar arrayParser = require('./arrayParser');\nvar parseDate = require('postgres-date');\nvar parseInterval = require('postgres-interval');\nvar parseByteA = require('postgres-bytea');\n\nfunction allowNull (fn) {\n  return function nullAllowed (value) {\n    if (value === null) return value\n    return fn(value)\n  }\n}\n\nfunction parseBool (value) {\n  if (value === null) return value\n  return value === 'TRUE' ||\n    value === 't' ||\n    value === 'true' ||\n    value === 'y' ||\n    value === 'yes' ||\n    value === 'on' ||\n    value === '1';\n}\n\nfunction parseBoolArray (value) {\n  if (!value) return null\n  return array.parse(value, parseBool)\n}\n\nfunction parseBaseTenInt (string) {\n  return parseInt(string, 10)\n}\n\nfunction parseIntegerArray (value) {\n  if (!value) return null\n  return array.parse(value, allowNull(parseBaseTenInt))\n}\n\nfunction parseBigIntegerArray (value) {\n  if (!value) return null\n  return array.parse(value, allowNull(function (entry) {\n    return parseBigInteger(entry).trim()\n  }))\n}\n\nvar parsePointArray = function(value) {\n  if(!value) { return null; }\n  var p = arrayParser.create(value, function(entry) {\n    if(entry !== null) {\n      entry = parsePoint(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseFloatArray = function(value) {\n  if(!value) { return null; }\n  var p = arrayParser.create(value, function(entry) {\n    if(entry !== null) {\n      entry = parseFloat(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseStringArray = function(value) {\n  if(!value) { return null; }\n\n  var p = arrayParser.create(value);\n  return p.parse();\n};\n\nvar parseDateArray = function(value) {\n  if (!value) { return null; }\n\n  var p = arrayParser.create(value, function(entry) {\n    if (entry !== null) {\n      entry = parseDate(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseIntervalArray = function(value) {\n  if (!value) { return null; }\n\n  var p = arrayParser.create(value, function(entry) {\n    if (entry !== null) {\n      entry = parseInterval(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseByteAArray = function(value) {\n  if (!value) { return null; }\n\n  return array.parse(value, allowNull(parseByteA));\n};\n\nvar parseInteger = function(value) {\n  return parseInt(value, 10);\n};\n\nvar parseBigInteger = function(value) {\n  var valStr = String(value);\n  if (/^\\d+$/.test(valStr)) { return valStr; }\n  return value;\n};\n\nvar parseJsonArray = function(value) {\n  if (!value) { return null; }\n\n  return array.parse(value, allowNull(JSON.parse));\n};\n\nvar parsePoint = function(value) {\n  if (value[0] !== '(') { return null; }\n\n  value = value.substring( 1, value.length - 1 ).split(',');\n\n  return {\n    x: parseFloat(value[0])\n  , y: parseFloat(value[1])\n  };\n};\n\nvar parseCircle = function(value) {\n  if (value[0] !== '<' && value[1] !== '(') { return null; }\n\n  var point = '(';\n  var radius = '';\n  var pointParsed = false;\n  for (var i = 2; i < value.length - 1; i++){\n    if (!pointParsed) {\n      point += value[i];\n    }\n\n    if (value[i] === ')') {\n      pointParsed = true;\n      continue;\n    } else if (!pointParsed) {\n      continue;\n    }\n\n    if (value[i] === ','){\n      continue;\n    }\n\n    radius += value[i];\n  }\n  var result = parsePoint(point);\n  result.radius = parseFloat(radius);\n\n  return result;\n};\n\nvar init = function(register) {\n  register(20, parseBigInteger); // int8\n  register(21, parseInteger); // int2\n  register(23, parseInteger); // int4\n  register(26, parseInteger); // oid\n  register(700, parseFloat); // float4/real\n  register(701, parseFloat); // float8/double\n  register(16, parseBool);\n  register(1082, parseDate); // date\n  register(1114, parseDate); // timestamp without timezone\n  register(1184, parseDate); // timestamp\n  register(600, parsePoint); // point\n  register(651, parseStringArray); // cidr[]\n  register(718, parseCircle); // circle\n  register(1000, parseBoolArray);\n  register(1001, parseByteAArray);\n  register(1005, parseIntegerArray); // _int2\n  register(1007, parseIntegerArray); // _int4\n  register(1028, parseIntegerArray); // oid[]\n  register(1016, parseBigIntegerArray); // _int8\n  register(1017, parsePointArray); // point[]\n  register(1021, parseFloatArray); // _float4\n  register(1022, parseFloatArray); // _float8\n  register(1231, parseFloatArray); // _numeric\n  register(1014, parseStringArray); //char\n  register(1015, parseStringArray); //varchar\n  register(1008, parseStringArray);\n  register(1009, parseStringArray);\n  register(1040, parseStringArray); // macaddr[]\n  register(1041, parseStringArray); // inet[]\n  register(1115, parseDateArray); // timestamp without time zone[]\n  register(1182, parseDateArray); // _date\n  register(1185, parseDateArray); // timestamp with time zone[]\n  register(1186, parseInterval);\n  register(1187, parseIntervalArray);\n  register(17, parseByteA);\n  register(114, JSON.parse.bind(JSON)); // json\n  register(3802, JSON.parse.bind(JSON)); // jsonb\n  register(199, parseJsonArray); // json[]\n  register(3807, parseJsonArray); // jsonb[]\n  register(3907, parseStringArray); // numrange[]\n  register(2951, parseStringArray); // uuid[]\n  register(791, parseStringArray); // money[]\n  register(1183, parseStringArray); // time[]\n  register(1270, parseStringArray); // timetz[]\n};\n\nmodule.exports = {\n  init: init\n};\n", "'use strict';\n\n// selected so (BASE - 1) * 0x100000000 + 0xffffffff is a safe integer\nvar BASE = 1000000;\n\nfunction readInt8(buffer) {\n\tvar high = buffer.readInt32BE(0);\n\tvar low = buffer.readUInt32BE(4);\n\tvar sign = '';\n\n\tif (high < 0) {\n\t\thigh = ~high + (low === 0);\n\t\tlow = (~low + 1) >>> 0;\n\t\tsign = '-';\n\t}\n\n\tvar result = '';\n\tvar carry;\n\tvar t;\n\tvar digits;\n\tvar pad;\n\tvar l;\n\tvar i;\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\thigh = high / BASE >>> 0;\n\n\t\tt = 0x100000000 * carry + low;\n\t\tlow = t / BASE >>> 0;\n\t\tdigits = '' + (t - BASE * low);\n\n\t\tif (low === 0 && high === 0) {\n\t\t\treturn sign + digits + result;\n\t\t}\n\n\t\tpad = '';\n\t\tl = 6 - digits.length;\n\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tpad += '0';\n\t\t}\n\n\t\tresult = pad + digits + result;\n\t}\n\n\t{\n\t\tcarry = high % BASE;\n\t\tt = 0x100000000 * carry + low;\n\t\tdigits = '' + t % BASE;\n\n\t\treturn sign + digits + result;\n\t}\n}\n\nmodule.exports = readInt8;\n", "var parseInt64 = require('pg-int8');\n\nvar parseBits = function(data, bits, offset, invert, callback) {\n  offset = offset || 0;\n  invert = invert || false;\n  callback = callback || function(lastValue, newValue, bits) { return (lastValue * Math.pow(2, bits)) + newValue; };\n  var offsetBytes = offset >> 3;\n\n  var inv = function(value) {\n    if (invert) {\n      return ~value & 0xff;\n    }\n\n    return value;\n  };\n\n  // read first (maybe partial) byte\n  var mask = 0xff;\n  var firstBits = 8 - (offset % 8);\n  if (bits < firstBits) {\n    mask = (0xff << (8 - bits)) & 0xff;\n    firstBits = bits;\n  }\n\n  if (offset) {\n    mask = mask >> (offset % 8);\n  }\n\n  var result = 0;\n  if ((offset % 8) + bits >= 8) {\n    result = callback(0, inv(data[offsetBytes]) & mask, firstBits);\n  }\n\n  // read bytes\n  var bytes = (bits + offset) >> 3;\n  for (var i = offsetBytes + 1; i < bytes; i++) {\n    result = callback(result, inv(data[i]), 8);\n  }\n\n  // bits to read, that are not a complete byte\n  var lastBits = (bits + offset) % 8;\n  if (lastBits > 0) {\n    result = callback(result, inv(data[bytes]) >> (8 - lastBits), lastBits);\n  }\n\n  return result;\n};\n\nvar parseFloatFromBits = function(data, precisionBits, exponentBits) {\n  var bias = Math.pow(2, exponentBits - 1) - 1;\n  var sign = parseBits(data, 1);\n  var exponent = parseBits(data, exponentBits, 1);\n\n  if (exponent === 0) {\n    return 0;\n  }\n\n  // parse mantissa\n  var precisionBitsCounter = 1;\n  var parsePrecisionBits = function(lastValue, newValue, bits) {\n    if (lastValue === 0) {\n      lastValue = 1;\n    }\n\n    for (var i = 1; i <= bits; i++) {\n      precisionBitsCounter /= 2;\n      if ((newValue & (0x1 << (bits - i))) > 0) {\n        lastValue += precisionBitsCounter;\n      }\n    }\n\n    return lastValue;\n  };\n\n  var mantissa = parseBits(data, precisionBits, exponentBits + 1, false, parsePrecisionBits);\n\n  // special cases\n  if (exponent == (Math.pow(2, exponentBits + 1) - 1)) {\n    if (mantissa === 0) {\n      return (sign === 0) ? Infinity : -Infinity;\n    }\n\n    return NaN;\n  }\n\n  // normale number\n  return ((sign === 0) ? 1 : -1) * Math.pow(2, exponent - bias) * mantissa;\n};\n\nvar parseInt16 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 15, 1, true) + 1);\n  }\n\n  return parseBits(value, 15, 1);\n};\n\nvar parseInt32 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 31, 1, true) + 1);\n  }\n\n  return parseBits(value, 31, 1);\n};\n\nvar parseFloat32 = function(value) {\n  return parseFloatFromBits(value, 23, 8);\n};\n\nvar parseFloat64 = function(value) {\n  return parseFloatFromBits(value, 52, 11);\n};\n\nvar parseNumeric = function(value) {\n  var sign = parseBits(value, 16, 32);\n  if (sign == 0xc000) {\n    return NaN;\n  }\n\n  var weight = Math.pow(10000, parseBits(value, 16, 16));\n  var result = 0;\n\n  var digits = [];\n  var ndigits = parseBits(value, 16);\n  for (var i = 0; i < ndigits; i++) {\n    result += parseBits(value, 16, 64 + (16 * i)) * weight;\n    weight /= 10000;\n  }\n\n  var scale = Math.pow(10, parseBits(value, 16, 48));\n  return ((sign === 0) ? 1 : -1) * Math.round(result * scale) / scale;\n};\n\nvar parseDate = function(isUTC, value) {\n  var sign = parseBits(value, 1);\n  var rawValue = parseBits(value, 63, 1);\n\n  // discard usecs and shift from 2000 to 1970\n  var result = new Date((((sign === 0) ? 1 : -1) * rawValue / 1000) + 946684800000);\n\n  if (!isUTC) {\n    result.setTime(result.getTime() + result.getTimezoneOffset() * 60000);\n  }\n\n  // add microseconds to the date\n  result.usec = rawValue % 1000;\n  result.getMicroSeconds = function() {\n    return this.usec;\n  };\n  result.setMicroSeconds = function(value) {\n    this.usec = value;\n  };\n  result.getUTCMicroSeconds = function() {\n    return this.usec;\n  };\n\n  return result;\n};\n\nvar parseArray = function(value) {\n  var dim = parseBits(value, 32);\n\n  var flags = parseBits(value, 32, 32);\n  var elementType = parseBits(value, 32, 64);\n\n  var offset = 96;\n  var dims = [];\n  for (var i = 0; i < dim; i++) {\n    // parse dimension\n    dims[i] = parseBits(value, 32, offset);\n    offset += 32;\n\n    // ignore lower bounds\n    offset += 32;\n  }\n\n  var parseElement = function(elementType) {\n    // parse content length\n    var length = parseBits(value, 32, offset);\n    offset += 32;\n\n    // parse null values\n    if (length == 0xffffffff) {\n      return null;\n    }\n\n    var result;\n    if ((elementType == 0x17) || (elementType == 0x14)) {\n      // int/bigint\n      result = parseBits(value, length * 8, offset);\n      offset += length * 8;\n      return result;\n    }\n    else if (elementType == 0x19) {\n      // string\n      result = value.toString(this.encoding, offset >> 3, (offset += (length << 3)) >> 3);\n      return result;\n    }\n    else {\n      console.log(\"ERROR: ElementType not implemented: \" + elementType);\n    }\n  };\n\n  var parse = function(dimension, elementType) {\n    var array = [];\n    var i;\n\n    if (dimension.length > 1) {\n      var count = dimension.shift();\n      for (i = 0; i < count; i++) {\n        array[i] = parse(dimension, elementType);\n      }\n      dimension.unshift(count);\n    }\n    else {\n      for (i = 0; i < dimension[0]; i++) {\n        array[i] = parseElement(elementType);\n      }\n    }\n\n    return array;\n  };\n\n  return parse(dims, elementType);\n};\n\nvar parseText = function(value) {\n  return value.toString('utf8');\n};\n\nvar parseBool = function(value) {\n  if(value === null) return null;\n  return (parseBits(value, 8) > 0);\n};\n\nvar init = function(register) {\n  register(20, parseInt64);\n  register(21, parseInt16);\n  register(23, parseInt32);\n  register(26, parseInt32);\n  register(1700, parseNumeric);\n  register(700, parseFloat32);\n  register(701, parseFloat64);\n  register(16, parseBool);\n  register(1114, parseDate.bind(null, false));\n  register(1184, parseDate.bind(null, true));\n  register(1000, parseArray);\n  register(1007, parseArray);\n  register(1016, parseArray);\n  register(1008, parseArray);\n  register(1009, parseArray);\n  register(25, parseText);\n};\n\nmodule.exports = {\n  init: init\n};\n", "/**\n * Following query was used to generate this file:\n\n SELECT json_object_agg(UPPER(PT.typname), PT.oid::int4 ORDER BY pt.oid)\n FROM pg_type PT\n WHERE typnamespace = (SELECT pgn.oid FROM pg_namespace pgn WHERE nspname = 'pg_catalog') -- Take only builting Postgres types with stable OID (extension types are not guaranted to be stable)\n AND typtype = 'b' -- Only basic types\n AND typelem = 0 -- Ignore aliases\n AND typisdefined -- Ignore undefined types\n */\n\nmodule.exports = {\n    BOOL: 16,\n    BYTEA: 17,\n    CHAR: 18,\n    INT8: 20,\n    INT2: 21,\n    INT4: 23,\n    REGPROC: 24,\n    TEXT: 25,\n    OID: 26,\n    TID: 27,\n    XID: 28,\n    CID: 29,\n    JSON: 114,\n    XML: 142,\n    PG_NODE_TREE: 194,\n    SMGR: 210,\n    PATH: 602,\n    POLYGON: 604,\n    CIDR: 650,\n    FLOAT4: 700,\n    FLOAT8: 701,\n    ABSTIME: 702,\n    RELTIME: 703,\n    TINTERVAL: 704,\n    CIRCLE: 718,\n    MACADDR8: 774,\n    MONEY: 790,\n    MACADDR: 829,\n    INET: 869,\n    ACLITEM: 1033,\n    BPCHAR: 1042,\n    VARCHAR: 1043,\n    DATE: 1082,\n    TIME: 1083,\n    TIMESTAMP: 1114,\n    TIMESTAMPTZ: 1184,\n    INTERVAL: 1186,\n    TIMETZ: 1266,\n    BIT: 1560,\n    VARBIT: 1562,\n    NUMERIC: 1700,\n    REFCURSOR: 1790,\n    REGPROCEDURE: 2202,\n    REGOPER: 2203,\n    REGOPERATOR: 2204,\n    REGCLASS: 2205,\n    REGTYPE: 2206,\n    UUID: 2950,\n    TXID_SNAPSHOT: 2970,\n    PG_LSN: 3220,\n    PG_NDISTINCT: 3361,\n    PG_DEPENDENCIES: 3402,\n    TSVECTOR: 3614,\n    TSQUERY: 3615,\n    GTSVECTOR: 3642,\n    REGCONFIG: 3734,\n    REGDICTIONARY: 3769,\n    JSONB: 3802,\n    REGNAMESPACE: 4089,\n    REGROLE: 4096\n};\n", "var textParsers = require('./lib/textParsers');\nvar binaryParsers = require('./lib/binaryParsers');\nvar arrayParser = require('./lib/arrayParser');\nvar builtinTypes = require('./lib/builtins');\n\nexports.getTypeParser = getTypeParser;\nexports.setTypeParser = setTypeParser;\nexports.arrayParser = arrayParser;\nexports.builtins = builtinTypes;\n\nvar typeParsers = {\n  text: {},\n  binary: {}\n};\n\n//the empty parse function\nfunction noParse (val) {\n  return String(val);\n};\n\n//returns a function used to convert a specific type (specified by\n//oid) into a result javascript type\n//note: the oid can be obtained via the following sql query:\n//SELECT oid FROM pg_type WHERE typname = 'TYPE_NAME_HERE';\nfunction getTypeParser (oid, format) {\n  format = format || 'text';\n  if (!typeParsers[format]) {\n    return noParse;\n  }\n  return typeParsers[format][oid] || noParse;\n};\n\nfunction setTypeParser (oid, format, parseFn) {\n  if(typeof format == 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n  typeParsers[format][oid] = parseFn;\n};\n\ntextParsers.init(function(oid, converter) {\n  typeParsers.text[oid] = converter;\n});\n\nbinaryParsers.init(function(oid, converter) {\n  typeParsers.binary[oid] = converter;\n});\n", "'use strict'\n\nmodule.exports = {\n  // database host. defaults to localhost\n  host: 'localhost',\n\n  // database user's name\n  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  // name of database to connect\n  database: undefined,\n\n  // database user's password\n  password: null,\n\n  // a Postgres connection string to be used instead of setting individual connection items\n  // NOTE:  Setting this value will cause it to override any other value (such as database or user) defined\n  // in the defaults object.\n  connectionString: undefined,\n\n  // database port\n  port: 5432,\n\n  // number of rows to return at a time from a prepared statement's\n  // portal. 0 will return all rows at once\n  rows: 0,\n\n  // binary result mode\n  binary: false,\n\n  // Connection pool options - see https://github.com/brianc/node-pg-pool\n\n  // number of connections to use in connection pool\n  // 0 will disable connection pooling\n  max: 10,\n\n  // max milliseconds a client can go unused before it is removed\n  // from the pool and destroyed\n  idleTimeoutMillis: 30000,\n\n  client_encoding: '',\n\n  ssl: false,\n\n  application_name: undefined,\n\n  fallback_application_name: undefined,\n\n  options: undefined,\n\n  parseInputDatesAsUTC: false,\n\n  // max milliseconds any query using this connection will execute for before timing out in error.\n  // false=unlimited\n  statement_timeout: false,\n\n  // Abort any statement that waits longer than the specified duration in milliseconds while attempting to acquire a lock.\n  // false=unlimited\n  lock_timeout: false,\n\n  // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds\n  // false=unlimited\n  idle_in_transaction_session_timeout: false,\n\n  // max milliseconds to wait for query to complete (client side)\n  query_timeout: false,\n\n  connect_timeout: 0,\n\n  keepalives: 1,\n\n  keepalives_idle: 0,\n}\n\nvar pgTypes = require('pg-types')\n// save default parsers\nvar parseBigInteger = pgTypes.getTypeParser(20, 'text')\nvar parseBigIntegerArray = pgTypes.getTypeParser(1016, 'text')\n\n// parse int8 so you can get your count values as actual numbers\nmodule.exports.__defineSetter__('parseInt8', function (val) {\n  pgTypes.setTypeParser(20, 'text', val ? pgTypes.getTypeParser(23, 'text') : parseBigInteger)\n  pgTypes.setTypeParser(1016, 'text', val ? pgTypes.getTypeParser(1007, 'text') : parseBigIntegerArray)\n})\n", "'use strict'\n\nconst defaults = require('./defaults')\n\nfunction escapeElement(elementRepresentation) {\n  var escaped = elementRepresentation.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')\n\n  return '\"' + escaped + '\"'\n}\n\n// convert a JS array to a postgres array literal\n// uses comma separator so won't work for types like box that use\n// a different array separator.\nfunction arrayString(val) {\n  var result = '{'\n  for (var i = 0; i < val.length; i++) {\n    if (i > 0) {\n      result = result + ','\n    }\n    if (val[i] === null || typeof val[i] === 'undefined') {\n      result = result + 'NULL'\n    } else if (Array.isArray(val[i])) {\n      result = result + arrayString(val[i])\n    } else if (ArrayBuffer.isView(val[i])) {\n      var item = val[i]\n      if (!(item instanceof Buffer)) {\n        var buf = Buffer.from(item.buffer, item.byteOffset, item.byteLength)\n        if (buf.length === item.byteLength) {\n          item = buf\n        } else {\n          item = buf.slice(item.byteOffset, item.byteOffset + item.byteLength)\n        }\n      }\n      result += '\\\\\\\\x' + item.toString('hex')\n    } else {\n      result += escapeElement(prepareValue(val[i]))\n    }\n  }\n  result = result + '}'\n  return result\n}\n\n// converts values from javascript types\n// to their 'raw' counterparts for use as a postgres parameter\n// note: you can override this function to provide your own conversion mechanism\n// for complex types, etc...\nvar prepareValue = function (val, seen) {\n  // null and undefined are both null for postgres\n  if (val == null) {\n    return null\n  }\n  if (typeof val === 'object') {\n    if (val instanceof Buffer) {\n      return val\n    }\n    if (ArrayBuffer.isView(val)) {\n      var buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength)\n      if (buf.length === val.byteLength) {\n        return buf\n      }\n      return buf.slice(val.byteOffset, val.byteOffset + val.byteLength) // Node.js v4 does not support those Buffer.from params\n    }\n    if (val instanceof Date) {\n      if (defaults.parseInputDatesAsUTC) {\n        return dateToStringUTC(val)\n      } else {\n        return dateToString(val)\n      }\n    }\n    if (Array.isArray(val)) {\n      return arrayString(val)\n    }\n\n    return prepareObject(val, seen)\n  }\n  return val.toString()\n}\n\nfunction prepareObject(val, seen) {\n  if (val && typeof val.toPostgres === 'function') {\n    seen = seen || []\n    if (seen.indexOf(val) !== -1) {\n      throw new Error('circular reference detected while preparing \"' + val + '\" for query')\n    }\n    seen.push(val)\n\n    return prepareValue(val.toPostgres(prepareValue), seen)\n  }\n  return JSON.stringify(val)\n}\n\nfunction dateToString(date) {\n  var offset = -date.getTimezoneOffset()\n\n  var year = date.getFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret =\n    String(year).padStart(4, '0') +\n    '-' +\n    String(date.getMonth() + 1).padStart(2, '0') +\n    '-' +\n    String(date.getDate()).padStart(2, '0') +\n    'T' +\n    String(date.getHours()).padStart(2, '0') +\n    ':' +\n    String(date.getMinutes()).padStart(2, '0') +\n    ':' +\n    String(date.getSeconds()).padStart(2, '0') +\n    '.' +\n    String(date.getMilliseconds()).padStart(3, '0')\n\n  if (offset < 0) {\n    ret += '-'\n    offset *= -1\n  } else {\n    ret += '+'\n  }\n\n  ret += String(Math.floor(offset / 60)).padStart(2, '0') + ':' + String(offset % 60).padStart(2, '0')\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction dateToStringUTC(date) {\n  var year = date.getUTCFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret =\n    String(year).padStart(4, '0') +\n    '-' +\n    String(date.getUTCMonth() + 1).padStart(2, '0') +\n    '-' +\n    String(date.getUTCDate()).padStart(2, '0') +\n    'T' +\n    String(date.getUTCHours()).padStart(2, '0') +\n    ':' +\n    String(date.getUTCMinutes()).padStart(2, '0') +\n    ':' +\n    String(date.getUTCSeconds()).padStart(2, '0') +\n    '.' +\n    String(date.getUTCMilliseconds()).padStart(3, '0')\n\n  ret += '+00:00'\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction normalizeQueryConfig(config, values, callback) {\n  // can take in strings or config objects\n  config = typeof config === 'string' ? { text: config } : config\n  if (values) {\n    if (typeof values === 'function') {\n      config.callback = values\n    } else {\n      config.values = values\n    }\n  }\n  if (callback) {\n    config.callback = callback\n  }\n  return config\n}\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nconst escapeIdentifier = function (str) {\n  return '\"' + str.replace(/\"/g, '\"\"') + '\"'\n}\n\nconst escapeLiteral = function (str) {\n  var hasBackslash = false\n  var escaped = \"'\"\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i]\n    if (c === \"'\") {\n      escaped += c + c\n    } else if (c === '\\\\') {\n      escaped += c + c\n      hasBackslash = true\n    } else {\n      escaped += c\n    }\n  }\n\n  escaped += \"'\"\n\n  if (hasBackslash === true) {\n    escaped = ' E' + escaped\n  }\n\n  return escaped\n}\n\nmodule.exports = {\n  prepareValue: function prepareValueWrapper(value) {\n    // this ensures that extra arguments do not get passed into prepareValue\n    // by accident, eg: from calling values.map(utils.prepareValue)\n    return prepareValue(value)\n  },\n  normalizeQueryConfig,\n  escapeIdentifier,\n  escapeLiteral,\n}\n", "'use strict'\n// This file contains crypto utility functions for versions of Node.js < 15.0.0,\n// which does not support the WebCrypto.subtle API.\n\nconst nodeCrypto = require('crypto')\n\nfunction md5(string) {\n  return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex')\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nfunction postgresMd5PasswordHash(user, password, salt) {\n  var inner = md5(password + user)\n  var outer = md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\nfunction sha256(text) {\n  return nodeCrypto.createHash('sha256').update(text).digest()\n}\n\nfunction hashByName(hashName, text) {\n  hashName = hashName.replace(/(\\D)-/, '$1') // e.g. SHA-256 -> SHA256\n  return nodeCrypto.createHash(hashName).update(text).digest()\n}\n\nfunction hmacSha256(key, msg) {\n  return nodeCrypto.createHmac('sha256', key).update(msg).digest()\n}\n\nasync function deriveKey(password, salt, iterations) {\n  return nodeCrypto.pbkdf2Sync(password, salt, iterations, 32, 'sha256')\n}\n\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes: nodeCrypto.randomBytes,\n  deriveKey,\n  sha256,\n  hashByName,\n  hmacSha256,\n  md5,\n}\n", "const nodeCrypto = require('crypto')\n\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes,\n  deriveKey,\n  sha256,\n  hashByName,\n  hmacSha256,\n  md5,\n}\n\n/**\n * The Web Crypto API - grabbed from the Node.js library or the global\n * @type Crypto\n */\nconst webCrypto = nodeCrypto.webcrypto || globalThis.crypto\n/**\n * The SubtleCrypto API for low level crypto operations.\n * @type SubtleCrypto\n */\nconst subtleCrypto = webCrypto.subtle\nconst textEncoder = new TextEncoder()\n\n/**\n *\n * @param {*} length\n * @returns\n */\nfunction randomBytes(length) {\n  return webCrypto.getRandomValues(Buffer.alloc(length))\n}\n\nasync function md5(string) {\n  try {\n    return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex')\n  } catch (e) {\n    // `createHash()` failed so we are probably not in Node.js, use the WebCrypto API instead.\n    // Note that the MD5 algorithm on WebCrypto is not available in Node.js.\n    // This is why we cannot just use WebCrypto in all environments.\n    const data = typeof string === 'string' ? textEncoder.encode(string) : string\n    const hash = await subtleCrypto.digest('MD5', data)\n    return Array.from(new Uint8Array(hash))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')\n  }\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nasync function postgresMd5PasswordHash(user, password, salt) {\n  var inner = await md5(password + user)\n  var outer = await md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\n/**\n * Create a SHA-256 digest of the given data\n * @param {Buffer} data\n */\nasync function sha256(text) {\n  return await subtleCrypto.digest('SHA-256', text)\n}\n\nasync function hashByName(hashName, text) {\n  return await subtleCrypto.digest(hashName, text)\n}\n\n/**\n * Sign the message with the given key\n * @param {ArrayBuffer} keyBuffer\n * @param {string} msg\n */\nasync function hmacSha256(keyBuffer, msg) {\n  const key = await subtleCrypto.importKey('raw', keyBuffer, { name: 'HMAC', hash: 'SHA-256' }, false, ['sign'])\n  return await subtleCrypto.sign('HMAC', key, textEncoder.encode(msg))\n}\n\n/**\n * Derive a key from the password and salt\n * @param {string} password\n * @param {Uint8Array} salt\n * @param {number} iterations\n */\nasync function deriveKey(password, salt, iterations) {\n  const key = await subtleCrypto.importKey('raw', textEncoder.encode(password), 'PBKDF2', false, ['deriveBits'])\n  const params = { name: 'PBKDF2', hash: 'SHA-256', salt: salt, iterations: iterations }\n  return await subtleCrypto.deriveBits(params, key, 32 * 8, ['deriveBits'])\n}\n", "'use strict'\n\nconst useLegacyCrypto = parseInt(process.versions && process.versions.node && process.versions.node.split('.')[0]) < 15\nif (useLegacyCrypto) {\n  // We are on an old version of Node.js that requires legacy crypto utilities.\n  module.exports = require('./utils-legacy')\n} else {\n  module.exports = require('./utils-webcrypto')\n}\n", "function x509Error(msg, cert) {\n  throw new Error('SASL channel binding: ' + msg + ' when parsing public certificate ' + cert.toString('base64'))\n}\n\nfunction readASN1Length(data, index) {\n  let length = data[index++]\n  if (length < 0x80) return { length, index }\n\n  const lengthBytes = length & 0x7f\n  if (lengthBytes > 4) x509Error('bad length', data)\n\n  length = 0\n  for (let i = 0; i < lengthBytes; i++) {\n    length = (length << 8) | data[index++]\n  }\n\n  return { length, index }\n}\n\nfunction readASN1OID(data, index) {\n  if (data[index++] !== 0x6) x509Error('non-OID data', data) // 6 = OID\n\n  const { length: OIDLength, index: indexAfterOIDLength } = readASN1Length(data, index)\n  index = indexAfterOIDLength\n  lastIndex = index + OIDLength\n\n  const byte1 = data[index++]\n  let oid = ((byte1 / 40) >> 0) + '.' + (byte1 % 40)\n\n  while (index < lastIndex) {\n    // loop over numbers in OID\n    let value = 0\n    while (index < lastIndex) {\n      // loop over bytes in number\n      const nextByte = data[index++]\n      value = (value << 7) | (nextByte & 0x7f)\n      if (nextByte < 0x80) break\n    }\n    oid += '.' + value\n  }\n\n  return { oid, index }\n}\n\nfunction expectASN1Seq(data, index) {\n  if (data[index++] !== 0x30) x509Error('non-sequence data', data) // 30 = Sequence\n  return readASN1Length(data, index)\n}\n\nfunction signatureAlgorithmHashFromCertificate(data, index) {\n  // read this thread: https://www.postgresql.org/message-id/17760-b6c61e752ec07060%40postgresql.org\n  if (index === undefined) index = 0\n  index = expectASN1Seq(data, index).index\n  const { length: certInfoLength, index: indexAfterCertInfoLength } = expectASN1Seq(data, index)\n  index = indexAfterCertInfoLength + certInfoLength // skip over certificate info\n  index = expectASN1Seq(data, index).index // skip over signature length field\n  const { oid, index: indexAfterOID } = readASN1OID(data, index)\n  switch (oid) {\n    // RSA\n    case '1.2.840.113549.1.1.4':\n      return 'MD5'\n    case '1.2.840.113549.1.1.5':\n      return 'SHA-1'\n    case '1.2.840.113549.1.1.11':\n      return 'SHA-256'\n    case '1.2.840.113549.1.1.12':\n      return 'SHA-384'\n    case '1.2.840.113549.1.1.13':\n      return 'SHA-512'\n    case '1.2.840.113549.1.1.14':\n      return 'SHA-224'\n    case '1.2.840.113549.1.1.15':\n      return 'SHA512-224'\n    case '1.2.840.113549.1.1.16':\n      return 'SHA512-256'\n    // ECDSA\n    case '1.2.840.10045.4.1':\n      return 'SHA-1'\n    case '1.2.840.10045.4.3.1':\n      return 'SHA-224'\n    case '1.2.840.10045.4.3.2':\n      return 'SHA-256'\n    case '1.2.840.10045.4.3.3':\n      return 'SHA-384'\n    case '1.2.840.10045.4.3.4':\n      return 'SHA-512'\n    // RSASSA-PSS: hash is indicated separately\n    case '1.2.840.113549.1.1.10':\n      index = indexAfterOID\n      index = expectASN1Seq(data, index).index\n      if (data[index++] !== 0xa0) x509Error('non-tag data', data) // a0 = constructed tag 0\n      index = readASN1Length(data, index).index // skip over tag length field\n      index = expectASN1Seq(data, index).index // skip over sequence length field\n      const { oid: hashOID } = readASN1OID(data, index)\n      switch (hashOID) {\n        // standalone hash OIDs\n        case '1.2.840.113549.2.5':\n          return 'MD5'\n        case '1.3.14.3.2.26':\n          return 'SHA-1'\n        case '2.16.840.1.101.3.4.2.1':\n          return 'SHA-256'\n        case '2.16.840.1.101.3.4.2.2':\n          return 'SHA-384'\n        case '2.16.840.1.101.3.4.2.3':\n          return 'SHA-512'\n      }\n      x509Error('unknown hash OID ' + hashOID, data)\n    // Ed25519 -- see https: return//github.com/openssl/openssl/issues/15477\n    case '1.3.101.110':\n    case '1.3.101.112': // ph\n      return 'SHA-512'\n    // Ed448 -- still not in pg 17.2 (if supported, digest would be SHAKE256 x 64 bytes)\n    case '1.3.101.111':\n    case '1.3.101.113': // ph\n      x509Error('Ed448 certificate channel binding is not currently supported by Postgres')\n  }\n  x509Error('unknown OID ' + oid, data)\n}\n\nmodule.exports = { signatureAlgorithmHashFromCertificate }\n", "'use strict'\nconst crypto = require('./utils')\nconst { signatureAlgorithmHashFromCertificate } = require('./cert-signatures')\n\nfunction startSession(mechanisms, stream) {\n  const candidates = ['SCRAM-SHA-256']\n  if (stream) candidates.unshift('SCRAM-SHA-256-PLUS') // higher-priority, so placed first\n\n  const mechanism = candidates.find((candidate) => mechanisms.includes(candidate))\n\n  if (!mechanism) {\n    throw new Error('SASL: Only mechanism(s) ' + candidates.join(' and ') + ' are supported')\n  }\n\n  if (mechanism === 'SCRAM-SHA-256-PLUS' && typeof stream.getPeerCertificate !== 'function') {\n    // this should never happen if we are really talking to a Postgres server\n    throw new Error('SASL: Mechanism SCRAM-SHA-256-PLUS requires a certificate')\n  }\n\n  const clientNonce = crypto.randomBytes(18).toString('base64')\n  const gs2Header = mechanism === 'SCRAM-SHA-256-PLUS' ? 'p=tls-server-end-point' : stream ? 'y' : 'n'\n\n  return {\n    mechanism,\n    clientNonce,\n    response: gs2Header + ',,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse',\n  }\n}\n\nasync function continueSession(session, password, serverData, stream) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse')\n  }\n  if (typeof password !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string')\n  }\n  if (password === '') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a non-empty string')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a string')\n  }\n\n  const sv = parseServerFirstMessage(serverData)\n\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce')\n  } else if (sv.nonce.length === session.clientNonce.length) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce is too short')\n  }\n\n  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce\n  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration\n\n  // without channel binding:\n  let channelBinding = stream ? 'eSws' : 'biws' // 'y,,' or 'n,,', base64-encoded\n\n  // override if channel binding is in use:\n  if (session.mechanism === 'SCRAM-SHA-256-PLUS') {\n    const peerCert = stream.getPeerCertificate().raw\n    let hashName = signatureAlgorithmHashFromCertificate(peerCert)\n    if (hashName === 'MD5' || hashName === 'SHA-1') hashName = 'SHA-256'\n    const certHash = await crypto.hashByName(hashName, peerCert)\n    const bindingData = Buffer.concat([Buffer.from('p=tls-server-end-point,,'), Buffer.from(certHash)])\n    channelBinding = bindingData.toString('base64')\n  }\n\n  var clientFinalMessageWithoutProof = 'c=' + channelBinding + ',r=' + sv.nonce\n  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof\n\n  var saltBytes = Buffer.from(sv.salt, 'base64')\n  var saltedPassword = await crypto.deriveKey(password, saltBytes, sv.iteration)\n  var clientKey = await crypto.hmacSha256(saltedPassword, 'Client Key')\n  var storedKey = await crypto.sha256(clientKey)\n  var clientSignature = await crypto.hmacSha256(storedKey, authMessage)\n  var clientProof = xorBuffers(Buffer.from(clientKey), Buffer.from(clientSignature)).toString('base64')\n  var serverKey = await crypto.hmacSha256(saltedPassword, 'Server Key')\n  var serverSignatureBytes = await crypto.hmacSha256(serverKey, authMessage)\n\n  session.message = 'SASLResponse'\n  session.serverSignature = Buffer.from(serverSignatureBytes).toString('base64')\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof\n}\n\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse')\n  }\n  if (typeof serverData !== 'string') {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: serverData must be a string')\n  }\n\n  const { serverSignature } = parseServerFinalMessage(serverData)\n\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match')\n  }\n}\n\n/**\n * printable       = %x21-2B / %x2D-7E\n *                   ;; Printable ASCII except \",\".\n *                   ;; Note that any \"printable\" is also\n *                   ;; a valid \"value\".\n */\nfunction isPrintableChars(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: text must be a string')\n  }\n  return text\n    .split('')\n    .map((_, i) => text.charCodeAt(i))\n    .every((c) => (c >= 0x21 && c <= 0x2b) || (c >= 0x2d && c <= 0x7e))\n}\n\n/**\n * base64-char     = ALPHA / DIGIT / \"/\" / \"+\"\n *\n * base64-4        = 4base64-char\n *\n * base64-3        = 3base64-char \"=\"\n *\n * base64-2        = 2base64-char \"==\"\n *\n * base64          = *base64-4 [base64-3 / base64-2]\n */\nfunction isBase64(text) {\n  return /^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.test(text)\n}\n\nfunction parseAttributePairs(text) {\n  if (typeof text !== 'string') {\n    throw new TypeError('SASL: attribute pairs text must be a string')\n  }\n\n  return new Map(\n    text.split(',').map((attrValue) => {\n      if (!/^.=/.test(attrValue)) {\n        throw new Error('SASL: Invalid attribute pair entry')\n      }\n      const name = attrValue[0]\n      const value = attrValue.substring(2)\n      return [name, value]\n    })\n  )\n}\n\nfunction parseServerFirstMessage(data) {\n  const attrPairs = parseAttributePairs(data)\n\n  const nonce = attrPairs.get('r')\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing')\n  } else if (!isPrintableChars(nonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce must only contain printable characters')\n  }\n  const salt = attrPairs.get('s')\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing')\n  } else if (!isBase64(salt)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64')\n  }\n  const iterationText = attrPairs.get('i')\n  if (!iterationText) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing')\n  } else if (!/^[1-9][0-9]*$/.test(iterationText)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration count')\n  }\n  const iteration = parseInt(iterationText, 10)\n\n  return {\n    nonce,\n    salt,\n    iteration,\n  }\n}\n\nfunction parseServerFinalMessage(serverData) {\n  const attrPairs = parseAttributePairs(serverData)\n  const serverSignature = attrPairs.get('v')\n  if (!serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing')\n  } else if (!isBase64(serverSignature)) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64')\n  }\n  return {\n    serverSignature,\n  }\n}\n\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) {\n    throw new TypeError('first argument must be a Buffer')\n  }\n  if (!Buffer.isBuffer(b)) {\n    throw new TypeError('second argument must be a Buffer')\n  }\n  if (a.length !== b.length) {\n    throw new Error('Buffer lengths must match')\n  }\n  if (a.length === 0) {\n    throw new Error('Buffers cannot be empty')\n  }\n  return Buffer.from(a.map((_, i) => a[i] ^ b[i]))\n}\n\nmodule.exports = {\n  startSession,\n  continueSession,\n  finalizeSession,\n}\n", "'use strict'\n\nvar types = require('pg-types')\n\nfunction TypeOverrides(userTypes) {\n  this._types = userTypes || types\n  this.text = {}\n  this.binary = {}\n}\n\nTypeOverrides.prototype.getOverrides = function (format) {\n  switch (format) {\n    case 'text':\n      return this.text\n    case 'binary':\n      return this.binary\n    default:\n      return {}\n  }\n}\n\nTypeOverrides.prototype.setTypeParser = function (oid, format, parseFn) {\n  if (typeof format === 'function') {\n    parseFn = format\n    format = 'text'\n  }\n  this.getOverrides(format)[oid] = parseFn\n}\n\nTypeOverrides.prototype.getTypeParser = function (oid, format) {\n  format = format || 'text'\n  return this.getOverrides(format)[oid] || this._types.getTypeParser(oid, format)\n}\n\nmodule.exports = TypeOverrides\n", "'use strict'\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    const config = str.split(' ')\n    return { host: config[0], database: config[1] }\n  }\n\n  // Check for empty host in URL\n\n  const config = {}\n  let result\n  let dummyHost = false\n  if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n    // Ensure spaces are encoded as %20\n    str = encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1')\n  }\n\n  try {\n    result = new URL(str, 'postgres://base')\n  } catch (e) {\n    // The URL is invalid so try again with a dummy host\n    result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgres://base')\n    dummyHost = true\n  }\n\n  // We'd like to use Object.fromEntries() here but Node.js 10 does not support it\n  for (const entry of result.searchParams.entries()) {\n    config[entry[0]] = entry[1]\n  }\n\n  config.user = config.user || decodeURIComponent(result.username)\n  config.password = config.password || decodeURIComponent(result.password)\n\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname)\n    config.database = result.searchParams.get('db')\n    config.client_encoding = result.searchParams.get('encoding')\n    return config\n  }\n  const hostname = dummyHost ? '' : result.hostname\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = decodeURIComponent(hostname)\n  } else if (hostname && /^%2f/i.test(hostname)) {\n    // Only prepend the hostname to the pathname if it is not a URL encoded Unix socket host.\n    result.pathname = hostname + result.pathname\n  }\n  if (!config.port) {\n    // Only set the port if there is no equivalent query param.\n    config.port = result.port\n  }\n\n  const pathname = result.pathname.slice(1) || null\n  config.database = pathname ? decodeURI(pathname) : null\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {}\n  }\n\n  // Only try to load fs if we expect to read from the disk\n  const fs = config.sslcert || config.sslkey || config.sslrootcert ? require('fs') : null\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString()\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString()\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString()\n  }\n\n  switch (config.sslmode) {\n    case 'disable': {\n      config.ssl = false\n      break\n    }\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full': {\n      break\n    }\n    case 'no-verify': {\n      config.ssl.rejectUnauthorized = false\n      break\n    }\n  }\n\n  return config\n}\n\nmodule.exports = parse\n\nparse.parse = parse\n", "'use strict'\n\nvar dns = require('dns')\n\nvar defaults = require('./defaults')\n\nvar parse = require('pg-connection-string').parse // parses a connection string\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()]\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[envVar]\n  }\n\n  return config[key] || envVar || defaults[key]\n}\n\nvar readSSLConfigFromEnvironment = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true\n    case 'no-verify':\n      return { rejectUnauthorized: false }\n  }\n  return defaults.ssl\n}\n\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\"\n}\n\nvar add = function (params, config, paramName) {\n  var value = config[paramName]\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value))\n  }\n}\n\nclass ConnectionParameters {\n  constructor(config) {\n    // if a string is passed, it is a raw connection string so we parse it into a config\n    config = typeof config === 'string' ? parse(config) : config || {}\n\n    // if the config has a connectionString defined, parse IT into the config we use\n    // this will override other default values with what is stored in connectionString\n    if (config.connectionString) {\n      config = Object.assign({}, config, parse(config.connectionString))\n    }\n\n    this.user = val('user', config)\n    this.database = val('database', config)\n\n    if (this.database === undefined) {\n      this.database = this.user\n    }\n\n    this.port = parseInt(val('port', config), 10)\n    this.host = val('host', config)\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: val('password', config),\n    })\n\n    this.binary = val('binary', config)\n    this.options = val('options', config)\n\n    this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl\n\n    if (typeof this.ssl === 'string') {\n      if (this.ssl === 'true') {\n        this.ssl = true\n      }\n    }\n    // support passing in ssl=no-verify via connection string\n    if (this.ssl === 'no-verify') {\n      this.ssl = { rejectUnauthorized: false }\n    }\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.client_encoding = val('client_encoding', config)\n    this.replication = val('replication', config)\n    // a domain socket begins with '/'\n    this.isDomainSocket = !(this.host || '').indexOf('/')\n\n    this.application_name = val('application_name', config, 'PGAPPNAME')\n    this.fallback_application_name = val('fallback_application_name', config, false)\n    this.statement_timeout = val('statement_timeout', config, false)\n    this.lock_timeout = val('lock_timeout', config, false)\n    this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false)\n    this.query_timeout = val('query_timeout', config, false)\n\n    if (config.connectionTimeoutMillis === undefined) {\n      this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0\n    } else {\n      this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000)\n    }\n\n    if (config.keepAlive === false) {\n      this.keepalives = 0\n    } else if (config.keepAlive === true) {\n      this.keepalives = 1\n    }\n\n    if (typeof config.keepAliveInitialDelayMillis === 'number') {\n      this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000)\n    }\n  }\n\n  getLibpqConnectionString(cb) {\n    var params = []\n    add(params, this, 'user')\n    add(params, this, 'password')\n    add(params, this, 'port')\n    add(params, this, 'application_name')\n    add(params, this, 'fallback_application_name')\n    add(params, this, 'connect_timeout')\n    add(params, this, 'options')\n\n    var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? { sslmode: this.ssl } : {}\n    add(params, ssl, 'sslmode')\n    add(params, ssl, 'sslca')\n    add(params, ssl, 'sslkey')\n    add(params, ssl, 'sslcert')\n    add(params, ssl, 'sslrootcert')\n\n    if (this.database) {\n      params.push('dbname=' + quoteParamValue(this.database))\n    }\n    if (this.replication) {\n      params.push('replication=' + quoteParamValue(this.replication))\n    }\n    if (this.host) {\n      params.push('host=' + quoteParamValue(this.host))\n    }\n    if (this.isDomainSocket) {\n      return cb(null, params.join(' '))\n    }\n    if (this.client_encoding) {\n      params.push('client_encoding=' + quoteParamValue(this.client_encoding))\n    }\n    dns.lookup(this.host, function (err, address) {\n      if (err) return cb(err, null)\n      params.push('hostaddr=' + quoteParamValue(address))\n      return cb(null, params.join(' '))\n    })\n  }\n}\n\nmodule.exports = ConnectionParameters\n", "'use strict'\n\nvar types = require('pg-types')\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nclass Result {\n  constructor(rowMode, types) {\n    this.command = null\n    this.rowCount = null\n    this.oid = null\n    this.rows = []\n    this.fields = []\n    this._parsers = undefined\n    this._types = types\n    this.RowCtor = null\n    this.rowAsArray = rowMode === 'array'\n    if (this.rowAsArray) {\n      this.parseRow = this._parseRowAsArray\n    }\n    this._prebuiltEmptyResultObject = null\n  }\n\n  // adds a command complete message\n  addCommandComplete(msg) {\n    var match\n    if (msg.text) {\n      // pure javascript\n      match = matchRegexp.exec(msg.text)\n    } else {\n      // native bindings\n      match = matchRegexp.exec(msg.command)\n    }\n    if (match) {\n      this.command = match[1]\n      if (match[3]) {\n        // COMMAND OID ROWS\n        this.oid = parseInt(match[2], 10)\n        this.rowCount = parseInt(match[3], 10)\n      } else if (match[2]) {\n        // COMMAND ROWS\n        this.rowCount = parseInt(match[2], 10)\n      }\n    }\n  }\n\n  _parseRowAsArray(rowData) {\n    var row = new Array(rowData.length)\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      if (rawValue !== null) {\n        row[i] = this._parsers[i](rawValue)\n      } else {\n        row[i] = null\n      }\n    }\n    return row\n  }\n\n  parseRow(rowData) {\n    var row = { ...this._prebuiltEmptyResultObject }\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      var field = this.fields[i].name\n      if (rawValue !== null) {\n        row[field] = this._parsers[i](rawValue)\n      } else {\n        row[field] = null\n      }\n    }\n    return row\n  }\n\n  addRow(row) {\n    this.rows.push(row)\n  }\n\n  addFields(fieldDescriptions) {\n    // clears field definitions\n    // multiple query statements in 1 action can result in multiple sets\n    // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n    // you need to reset the fields\n    this.fields = fieldDescriptions\n    if (this.fields.length) {\n      this._parsers = new Array(fieldDescriptions.length)\n    }\n\n    var row = {}\n\n    for (var i = 0; i < fieldDescriptions.length; i++) {\n      var desc = fieldDescriptions[i]\n      row[desc.name] = null\n\n      if (this._types) {\n        this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      } else {\n        this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      }\n    }\n\n    this._prebuiltEmptyResultObject = { ...row }\n  }\n}\n\nmodule.exports = Result\n", "'use strict'\n\nconst { EventEmitter } = require('events')\n\nconst Result = require('./result')\nconst utils = require('./utils')\n\nclass Query extends EventEmitter {\n  constructor(config, values, callback) {\n    super()\n\n    config = utils.normalizeQueryConfig(config, values, callback)\n\n    this.text = config.text\n    this.values = config.values\n    this.rows = config.rows\n    this.types = config.types\n    this.name = config.name\n    this.queryMode = config.queryMode\n    this.binary = config.binary\n    // use unique portal name each time\n    this.portal = config.portal || ''\n    this.callback = config.callback\n    this._rowMode = config.rowMode\n    if (process.domain && config.callback) {\n      this.callback = process.domain.bind(config.callback)\n    }\n    this._result = new Result(this._rowMode, this.types)\n\n    // potential for multiple results\n    this._results = this._result\n    this._canceledDueToError = false\n  }\n\n  requiresPreparation() {\n    if (this.queryMode === 'extended') {\n      return true\n    }\n\n    // named queries must always be prepared\n    if (this.name) {\n      return true\n    }\n    // always prepare if there are max number of rows expected per\n    // portal execution\n    if (this.rows) {\n      return true\n    }\n    // don't prepare empty text queries\n    if (!this.text) {\n      return false\n    }\n    // prepare if there are values\n    if (!this.values) {\n      return false\n    }\n    return this.values.length > 0\n  }\n\n  _checkForMultirow() {\n    // if we already have a result with a command property\n    // then we've already executed one query in a multi-statement simple query\n    // turn our results into an array of results\n    if (this._result.command) {\n      if (!Array.isArray(this._results)) {\n        this._results = [this._result]\n      }\n      this._result = new Result(this._rowMode, this._result._types)\n      this._results.push(this._result)\n    }\n  }\n\n  // associates row metadata from the supplied\n  // message with this query object\n  // metadata used when parsing row results\n  handleRowDescription(msg) {\n    this._checkForMultirow()\n    this._result.addFields(msg.fields)\n    this._accumulateRows = this.callback || !this.listeners('row').length\n  }\n\n  handleDataRow(msg) {\n    let row\n\n    if (this._canceledDueToError) {\n      return\n    }\n\n    try {\n      row = this._result.parseRow(msg.fields)\n    } catch (err) {\n      this._canceledDueToError = err\n      return\n    }\n\n    this.emit('row', row, this._result)\n    if (this._accumulateRows) {\n      this._result.addRow(row)\n    }\n  }\n\n  handleCommandComplete(msg, connection) {\n    this._checkForMultirow()\n    this._result.addCommandComplete(msg)\n    // need to sync after each command complete of a prepared statement\n    // if we were using a row count which results in multiple calls to _getRows\n    if (this.rows) {\n      connection.sync()\n    }\n  }\n\n  // if a named prepared statement is created with empty query text\n  // the backend will send an emptyQuery message but *not* a command complete message\n  // since we pipeline sync immediately after execute we don't need to do anything here\n  // unless we have rows specified, in which case we did not pipeline the intial sync call\n  handleEmptyQuery(connection) {\n    if (this.rows) {\n      connection.sync()\n    }\n  }\n\n  handleError(err, connection) {\n    // need to sync after error during a prepared statement\n    if (this._canceledDueToError) {\n      err = this._canceledDueToError\n      this._canceledDueToError = false\n    }\n    // if callback supplied do not emit error event as uncaught error\n    // events will bubble up to node process\n    if (this.callback) {\n      return this.callback(err)\n    }\n    this.emit('error', err)\n  }\n\n  handleReadyForQuery(con) {\n    if (this._canceledDueToError) {\n      return this.handleError(this._canceledDueToError, con)\n    }\n    if (this.callback) {\n      try {\n        this.callback(null, this._results)\n      } catch (err) {\n        process.nextTick(() => {\n          throw err\n        })\n      }\n    }\n    this.emit('end', this._results)\n  }\n\n  submit(connection) {\n    if (typeof this.text !== 'string' && typeof this.name !== 'string') {\n      return new Error('A query must have either text or a name. Supplying neither is unsupported.')\n    }\n    const previous = connection.parsedStatements[this.name]\n    if (this.text && previous && this.text !== previous) {\n      return new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`)\n    }\n    if (this.values && !Array.isArray(this.values)) {\n      return new Error('Query values must be an array')\n    }\n    if (this.requiresPreparation()) {\n      // If we're using the extended query protocol we fire off several separate commands\n      // to the backend. On some versions of node & some operating system versions\n      // the network stack writes each message separately instead of buffering them together\n      // causing the client & network to send more slowly. Corking & uncorking the stream\n      // allows node to buffer up the messages internally before sending them all off at once.\n      // note: we're checking for existence of cork/uncork because some versions of streams\n      // might not have this (cloudflare?)\n      connection.stream.cork && connection.stream.cork()\n      try {\n        this.prepare(connection)\n      } finally {\n        // while unlikely for this.prepare to throw, if it does & we don't uncork this stream\n        // this client becomes unresponsive, so put in finally block \"just in case\"\n        connection.stream.uncork && connection.stream.uncork()\n      }\n    } else {\n      connection.query(this.text)\n    }\n    return null\n  }\n\n  hasBeenParsed(connection) {\n    return this.name && connection.parsedStatements[this.name]\n  }\n\n  handlePortalSuspended(connection) {\n    this._getRows(connection, this.rows)\n  }\n\n  _getRows(connection, rows) {\n    connection.execute({\n      portal: this.portal,\n      rows: rows,\n    })\n    // if we're not reading pages of rows send the sync command\n    // to indicate the pipeline is finished\n    if (!rows) {\n      connection.sync()\n    } else {\n      // otherwise flush the call out to read more rows\n      connection.flush()\n    }\n  }\n\n  // http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY\n  prepare(connection) {\n    // TODO refactor this poor encapsulation\n    if (!this.hasBeenParsed(connection)) {\n      connection.parse({\n        text: this.text,\n        name: this.name,\n        types: this.types,\n      })\n    }\n\n    // because we're mapping user supplied values to\n    // postgres wire protocol compatible values it could\n    // throw an exception, so try/catch this section\n    try {\n      connection.bind({\n        portal: this.portal,\n        statement: this.name,\n        values: this.values,\n        binary: this.binary,\n        valueMapper: utils.prepareValue,\n      })\n    } catch (err) {\n      this.handleError(err, connection)\n      return\n    }\n\n    connection.describe({\n      type: 'P',\n      name: this.portal || '',\n    })\n\n    this._getRows(connection, this.rows)\n  }\n\n  handleCopyInResponse(connection) {\n    connection.sendCopyFail('No source stream defined')\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  handleCopyData(msg, connection) {\n    // noop\n  }\n}\n\nmodule.exports = Query\n", "export type Mode = 'text' | 'binary'\n\nexport type MessageName =\n  | 'parseComplete'\n  | 'bindComplete'\n  | 'closeComplete'\n  | 'noData'\n  | 'portalSuspended'\n  | 'replicationStart'\n  | 'emptyQuery'\n  | 'copyDone'\n  | 'copyData'\n  | 'rowDescription'\n  | 'parameterDescription'\n  | 'parameterStatus'\n  | 'backendKeyData'\n  | 'notification'\n  | 'readyForQuery'\n  | 'commandComplete'\n  | 'dataRow'\n  | 'copyInResponse'\n  | 'copyOutResponse'\n  | 'authenticationOk'\n  | 'authenticationMD5Password'\n  | 'authenticationCleartextPassword'\n  | 'authenticationSASL'\n  | 'authenticationSASLContinue'\n  | 'authenticationSASLFinal'\n  | 'error'\n  | 'notice'\n\nexport interface BackendMessage {\n  name: MessageName\n  length: number\n}\n\nexport const parseComplete: BackendMessage = {\n  name: 'parseComplete',\n  length: 5,\n}\n\nexport const bindComplete: BackendMessage = {\n  name: 'bindComplete',\n  length: 5,\n}\n\nexport const closeComplete: BackendMessage = {\n  name: 'closeComplete',\n  length: 5,\n}\n\nexport const noData: BackendMessage = {\n  name: 'noData',\n  length: 5,\n}\n\nexport const portalSuspended: BackendMessage = {\n  name: 'portalSuspended',\n  length: 5,\n}\n\nexport const replicationStart: BackendMessage = {\n  name: 'replicationStart',\n  length: 4,\n}\n\nexport const emptyQuery: BackendMessage = {\n  name: 'emptyQuery',\n  length: 4,\n}\n\nexport const copyDone: BackendMessage = {\n  name: 'copyDone',\n  length: 4,\n}\n\ninterface NoticeOrError {\n  message: string | undefined\n  severity: string | undefined\n  code: string | undefined\n  detail: string | undefined\n  hint: string | undefined\n  position: string | undefined\n  internalPosition: string | undefined\n  internalQuery: string | undefined\n  where: string | undefined\n  schema: string | undefined\n  table: string | undefined\n  column: string | undefined\n  dataType: string | undefined\n  constraint: string | undefined\n  file: string | undefined\n  line: string | undefined\n  routine: string | undefined\n}\n\nexport class DatabaseError extends Error implements NoticeOrError {\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n  constructor(\n    message: string,\n    public readonly length: number,\n    public readonly name: MessageName\n  ) {\n    super(message)\n  }\n}\n\nexport class CopyDataMessage {\n  public readonly name = 'copyData'\n  constructor(\n    public readonly length: number,\n    public readonly chunk: Buffer\n  ) {}\n}\n\nexport class CopyResponse {\n  public readonly columnTypes: number[]\n  constructor(\n    public readonly length: number,\n    public readonly name: MessageName,\n    public readonly binary: boolean,\n    columnCount: number\n  ) {\n    this.columnTypes = new Array(columnCount)\n  }\n}\n\nexport class Field {\n  constructor(\n    public readonly name: string,\n    public readonly tableID: number,\n    public readonly columnID: number,\n    public readonly dataTypeID: number,\n    public readonly dataTypeSize: number,\n    public readonly dataTypeModifier: number,\n    public readonly format: Mode\n  ) {}\n}\n\nexport class RowDescriptionMessage {\n  public readonly name: MessageName = 'rowDescription'\n  public readonly fields: Field[]\n  constructor(\n    public readonly length: number,\n    public readonly fieldCount: number\n  ) {\n    this.fields = new Array(this.fieldCount)\n  }\n}\n\nexport class ParameterDescriptionMessage {\n  public readonly name: MessageName = 'parameterDescription'\n  public readonly dataTypeIDs: number[]\n  constructor(\n    public readonly length: number,\n    public readonly parameterCount: number\n  ) {\n    this.dataTypeIDs = new Array(this.parameterCount)\n  }\n}\n\nexport class ParameterStatusMessage {\n  public readonly name: MessageName = 'parameterStatus'\n  constructor(\n    public readonly length: number,\n    public readonly parameterName: string,\n    public readonly parameterValue: string\n  ) {}\n}\n\nexport class AuthenticationMD5Password implements BackendMessage {\n  public readonly name: MessageName = 'authenticationMD5Password'\n  constructor(\n    public readonly length: number,\n    public readonly salt: Buffer\n  ) {}\n}\n\nexport class BackendKeyDataMessage {\n  public readonly name: MessageName = 'backendKeyData'\n  constructor(\n    public readonly length: number,\n    public readonly processID: number,\n    public readonly secretKey: number\n  ) {}\n}\n\nexport class NotificationResponseMessage {\n  public readonly name: MessageName = 'notification'\n  constructor(\n    public readonly length: number,\n    public readonly processId: number,\n    public readonly channel: string,\n    public readonly payload: string\n  ) {}\n}\n\nexport class ReadyForQueryMessage {\n  public readonly name: MessageName = 'readyForQuery'\n  constructor(\n    public readonly length: number,\n    public readonly status: string\n  ) {}\n}\n\nexport class CommandCompleteMessage {\n  public readonly name: MessageName = 'commandComplete'\n  constructor(\n    public readonly length: number,\n    public readonly text: string\n  ) {}\n}\n\nexport class DataRowMessage {\n  public readonly fieldCount: number\n  public readonly name: MessageName = 'dataRow'\n  constructor(\n    public length: number,\n    public fields: any[]\n  ) {\n    this.fieldCount = fields.length\n  }\n}\n\nexport class NoticeMessage implements BackendMessage, NoticeOrError {\n  constructor(\n    public readonly length: number,\n    public readonly message: string | undefined\n  ) {}\n  public readonly name = 'notice'\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n}\n", "//binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nexport class Writer {\n  private buffer: Buffer\n  private offset: number = 5\n  private headerPosition: number = 0\n  constructor(private size = 256) {\n    this.buffer = Buffer.allocUnsafe(size)\n  }\n\n  private ensure(size: number): void {\n    var remaining = this.buffer.length - this.offset\n    if (remaining < size) {\n      var oldBuffer = this.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size\n      this.buffer = Buffer.allocUnsafe(newSize)\n      oldBuffer.copy(this.buffer)\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.ensure(4)\n    this.buffer[this.offset++] = (num >>> 24) & 0xff\n    this.buffer[this.offset++] = (num >>> 16) & 0xff\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.ensure(2)\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (!string) {\n      this.ensure(1)\n    } else {\n      var len = Buffer.byteLength(string)\n      this.ensure(len + 1) // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8')\n      this.offset += len\n    }\n\n    this.buffer[this.offset++] = 0 // null terminator\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    var len = Buffer.byteLength(string)\n    this.ensure(len)\n    this.buffer.write(string, this.offset)\n    this.offset += len\n    return this\n  }\n\n  public add(otherBuffer: Buffer): Writer {\n    this.ensure(otherBuffer.length)\n    otherBuffer.copy(this.buffer, this.offset)\n    this.offset += otherBuffer.length\n    return this\n  }\n\n  private join(code?: number): Buffer {\n    if (code) {\n      this.buffer[this.headerPosition] = code\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1)\n      this.buffer.writeInt32BE(length, this.headerPosition + 1)\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset)\n  }\n\n  public flush(code?: number): Buffer {\n    var result = this.join(code)\n    this.offset = 5\n    this.headerPosition = 0\n    this.buffer = Buffer.allocUnsafe(this.size)\n    return result\n  }\n}\n", "import { Writer } from './buffer-writer'\n\nconst enum code {\n  startup = 0x70,\n  query = 0x51,\n  parse = 0x50,\n  bind = 0x42,\n  execute = 0x45,\n  flush = 0x48,\n  sync = 0x53,\n  end = 0x58,\n  close = 0x43,\n  describe = 0x44,\n  copyFromChunk = 0x64,\n  copyDone = 0x63,\n  copyFail = 0x66,\n}\n\nconst writer = new Writer()\n\nconst startup = (opts: Record<string, string>): Buffer => {\n  // protocol version\n  writer.addInt16(3).addInt16(0)\n  for (const key of Object.keys(opts)) {\n    writer.addCString(key).addCString(opts[key])\n  }\n\n  writer.addCString('client_encoding').addCString('UTF8')\n\n  var bodyBuffer = writer.addCString('').flush()\n  // this message is sent without a code\n\n  var length = bodyBuffer.length + 4\n\n  return new Writer().addInt32(length).add(bodyBuffer).flush()\n}\n\nconst requestSsl = (): Buffer => {\n  const response = Buffer.allocUnsafe(8)\n  response.writeInt32BE(8, 0)\n  response.writeInt32BE(80877103, 4)\n  return response\n}\n\nconst password = (password: string): Buffer => {\n  return writer.addCString(password).flush(code.startup)\n}\n\nconst sendSASLInitialResponseMessage = function (mechanism: string, initialResponse: string): Buffer {\n  // 0x70 = 'p'\n  writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse)\n\n  return writer.flush(code.startup)\n}\n\nconst sendSCRAMClientFinalMessage = function (additionalData: string): Buffer {\n  return writer.addString(additionalData).flush(code.startup)\n}\n\nconst query = (text: string): Buffer => {\n  return writer.addCString(text).flush(code.query)\n}\n\ntype ParseOpts = {\n  name?: string\n  types?: number[]\n  text: string\n}\n\nconst emptyArray: any[] = []\n\nconst parse = (query: ParseOpts): Buffer => {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  // normalize missing query names to allow for null\n  const name = query.name || ''\n  if (name.length > 63) {\n    /* eslint-disable no-console */\n    console.error('Warning! Postgres only supports 63 characters for query names.')\n    console.error('You supplied %s (%s)', name, name.length)\n    console.error('This can cause conflicts and silent errors executing queries')\n    /* eslint-enable no-console */\n  }\n\n  const types = query.types || emptyArray\n\n  var len = types.length\n\n  var buffer = writer\n    .addCString(name) // name of query\n    .addCString(query.text) // actual query text\n    .addInt16(len)\n\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(types[i])\n  }\n\n  return writer.flush(code.parse)\n}\n\ntype ValueMapper = (param: any, index: number) => any\n\ntype BindOpts = {\n  portal?: string\n  binary?: boolean\n  statement?: string\n  values?: any[]\n  // optional map from JS value to postgres value per parameter\n  valueMapper?: ValueMapper\n}\n\nconst paramWriter = new Writer()\n\n// make this a const enum so typescript will inline the value\nconst enum ParamType {\n  STRING = 0,\n  BINARY = 1,\n}\n\nconst writeValues = function (values: any[], valueMapper?: ValueMapper): void {\n  for (let i = 0; i < values.length; i++) {\n    const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i]\n    if (mappedVal == null) {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      // write -1 to the param writer to indicate null\n      paramWriter.addInt32(-1)\n    } else if (mappedVal instanceof Buffer) {\n      // add the param type (binary) to the writer\n      writer.addInt16(ParamType.BINARY)\n      // add the buffer to the param writer\n      paramWriter.addInt32(mappedVal.length)\n      paramWriter.add(mappedVal)\n    } else {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      paramWriter.addInt32(Buffer.byteLength(mappedVal))\n      paramWriter.addString(mappedVal)\n    }\n  }\n}\n\nconst bind = (config: BindOpts = {}): Buffer => {\n  // normalize config\n  const portal = config.portal || ''\n  const statement = config.statement || ''\n  const binary = config.binary || false\n  const values = config.values || emptyArray\n  const len = values.length\n\n  writer.addCString(portal).addCString(statement)\n  writer.addInt16(len)\n\n  writeValues(values, config.valueMapper)\n\n  writer.addInt16(len)\n  writer.add(paramWriter.flush())\n\n  // format code\n  writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING)\n  return writer.flush(code.bind)\n}\n\ntype ExecOpts = {\n  portal?: string\n  rows?: number\n}\n\nconst emptyExecute = Buffer.from([code.execute, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00])\n\nconst execute = (config?: ExecOpts): Buffer => {\n  // this is the happy path for most queries\n  if (!config || (!config.portal && !config.rows)) {\n    return emptyExecute\n  }\n\n  const portal = config.portal || ''\n  const rows = config.rows || 0\n\n  const portalLength = Buffer.byteLength(portal)\n  const len = 4 + portalLength + 1 + 4\n  // one extra bit for code\n  const buff = Buffer.allocUnsafe(1 + len)\n  buff[0] = code.execute\n  buff.writeInt32BE(len, 1)\n  buff.write(portal, 5, 'utf-8')\n  buff[portalLength + 5] = 0 // null terminate portal cString\n  buff.writeUInt32BE(rows, buff.length - 4)\n  return buff\n}\n\nconst cancel = (processID: number, secretKey: number): Buffer => {\n  const buffer = Buffer.allocUnsafe(16)\n  buffer.writeInt32BE(16, 0)\n  buffer.writeInt16BE(1234, 4)\n  buffer.writeInt16BE(5678, 6)\n  buffer.writeInt32BE(processID, 8)\n  buffer.writeInt32BE(secretKey, 12)\n  return buffer\n}\n\ntype PortalOpts = {\n  type: 'S' | 'P'\n  name?: string\n}\n\nconst cstringMessage = (code: code, string: string): Buffer => {\n  const stringLen = Buffer.byteLength(string)\n  const len = 4 + stringLen + 1\n  // one extra bit for code\n  const buffer = Buffer.allocUnsafe(1 + len)\n  buffer[0] = code\n  buffer.writeInt32BE(len, 1)\n  buffer.write(string, 5, 'utf-8')\n  buffer[len] = 0 // null terminate cString\n  return buffer\n}\n\nconst emptyDescribePortal = writer.addCString('P').flush(code.describe)\nconst emptyDescribeStatement = writer.addCString('S').flush(code.describe)\n\nconst describe = (msg: PortalOpts): Buffer => {\n  return msg.name\n    ? cstringMessage(code.describe, `${msg.type}${msg.name || ''}`)\n    : msg.type === 'P'\n    ? emptyDescribePortal\n    : emptyDescribeStatement\n}\n\nconst close = (msg: PortalOpts): Buffer => {\n  const text = `${msg.type}${msg.name || ''}`\n  return cstringMessage(code.close, text)\n}\n\nconst copyData = (chunk: Buffer): Buffer => {\n  return writer.add(chunk).flush(code.copyFromChunk)\n}\n\nconst copyFail = (message: string): Buffer => {\n  return cstringMessage(code.copyFail, message)\n}\n\nconst codeOnlyBuffer = (code: code): Buffer => Buffer.from([code, 0x00, 0x00, 0x00, 0x04])\n\nconst flushBuffer = codeOnlyBuffer(code.flush)\nconst syncBuffer = codeOnlyBuffer(code.sync)\nconst endBuffer = codeOnlyBuffer(code.end)\nconst copyDoneBuffer = codeOnlyBuffer(code.copyDone)\n\nconst serialize = {\n  startup,\n  password,\n  requestSsl,\n  sendSASLInitialResponseMessage,\n  sendSCRAMClientFinalMessage,\n  query,\n  parse,\n  bind,\n  execute,\n  describe,\n  close,\n  flush: () => flushBuffer,\n  sync: () => syncBuffer,\n  end: () => endBuffer,\n  copyData,\n  copyDone: () => copyDoneBuffer,\n  copyFail,\n  cancel,\n}\n\nexport { serialize }\n", "const emptyBuffer = Buffer.allocUnsafe(0)\n\nexport class BufferReader {\n  private buffer: Buffer = emptyBuffer\n\n  // TODO(bmc): support non-utf8 encoding?\n  private encoding: string = 'utf-8'\n\n  constructor(private offset: number = 0) {}\n\n  public setBuffer(offset: number, buffer: Buffer): void {\n    this.offset = offset\n    this.buffer = buffer\n  }\n\n  public int16(): number {\n    const result = this.buffer.readInt16BE(this.offset)\n    this.offset += 2\n    return result\n  }\n\n  public byte(): number {\n    const result = this.buffer[this.offset]\n    this.offset++\n    return result\n  }\n\n  public int32(): number {\n    const result = this.buffer.readInt32BE(this.offset)\n    this.offset += 4\n    return result\n  }\n\n  public uint32(): number {\n    const result = this.buffer.readUInt32BE(this.offset)\n    this.offset += 4\n    return result\n  }\n\n  public string(length: number): string {\n    const result = this.buffer.toString(this.encoding, this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n\n  public cstring(): string {\n    const start = this.offset\n    let end = start\n    while (this.buffer[end++] !== 0) {}\n    this.offset = end\n    return this.buffer.toString(this.encoding, start, end - 1)\n  }\n\n  public bytes(length: number): Buffer {\n    const result = this.buffer.slice(this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n}\n", "import { TransformOptions } from 'stream'\nimport {\n  Mode,\n  bindComplete,\n  parseComplete,\n  closeComplete,\n  noData,\n  portalSuspended,\n  copyDone,\n  replicationStart,\n  emptyQuery,\n  ReadyForQueryMessage,\n  CommandCompleteMessage,\n  CopyDataMessage,\n  CopyResponse,\n  NotificationResponseMessage,\n  RowDescriptionMessage,\n  ParameterDescriptionMessage,\n  Field,\n  DataRowMessage,\n  ParameterStatusMessage,\n  BackendKeyDataMessage,\n  DatabaseError,\n  BackendMessage,\n  MessageName,\n  AuthenticationMD5Password,\n  NoticeMessage,\n} from './messages'\nimport { BufferReader } from './buffer-reader'\n\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4\n\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH\n\nexport type Packet = {\n  code: number\n  packet: Buffer\n}\n\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\ntype StreamOptions = TransformOptions & {\n  mode: Mode\n}\n\nconst enum MessageCodes {\n  DataRow = 0x44, // D\n  ParseComplete = 0x31, // 1\n  BindComplete = 0x32, // 2\n  CloseComplete = 0x33, // 3\n  CommandComplete = 0x43, // C\n  ReadyForQuery = 0x5a, // Z\n  NoData = 0x6e, // n\n  NotificationResponse = 0x41, // A\n  AuthenticationResponse = 0x52, // R\n  ParameterStatus = 0x53, // S\n  BackendKeyData = 0x4b, // K\n  ErrorMessage = 0x45, // E\n  NoticeMessage = 0x4e, // N\n  RowDescriptionMessage = 0x54, // T\n  ParameterDescriptionMessage = 0x74, // t\n  PortalSuspended = 0x73, // s\n  ReplicationStart = 0x57, // W\n  EmptyQuery = 0x49, // I\n  CopyIn = 0x47, // G\n  CopyOut = 0x48, // H\n  CopyDone = 0x63, // c\n  CopyData = 0x64, // d\n}\n\nexport type MessageCallback = (msg: BackendMessage) => void\n\nexport class Parser {\n  private buffer: Buffer = emptyBuffer\n  private bufferLength: number = 0\n  private bufferOffset: number = 0\n  private reader = new BufferReader()\n  private mode: Mode\n\n  constructor(opts?: StreamOptions) {\n    if (opts?.mode === 'binary') {\n      throw new Error('Binary mode not supported yet')\n    }\n    this.mode = opts?.mode || 'text'\n  }\n\n  public parse(buffer: Buffer, callback: MessageCallback) {\n    this.mergeBuffer(buffer)\n    const bufferFullLength = this.bufferOffset + this.bufferLength\n    let offset = this.bufferOffset\n    while (offset + HEADER_LENGTH <= bufferFullLength) {\n      // code is 1 byte long - it identifies the message type\n      const code = this.buffer[offset]\n      // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n      const length = this.buffer.readUInt32BE(offset + CODE_LENGTH)\n      const fullMessageLength = CODE_LENGTH + length\n      if (fullMessageLength + offset <= bufferFullLength) {\n        const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer)\n        callback(message)\n        offset += fullMessageLength\n      } else {\n        break\n      }\n    }\n    if (offset === bufferFullLength) {\n      // No more use for the buffer\n      this.buffer = emptyBuffer\n      this.bufferLength = 0\n      this.bufferOffset = 0\n    } else {\n      // Adjust the cursors of remainingBuffer\n      this.bufferLength = bufferFullLength - offset\n      this.bufferOffset = offset\n    }\n  }\n\n  private mergeBuffer(buffer: Buffer): void {\n    if (this.bufferLength > 0) {\n      const newLength = this.bufferLength + buffer.byteLength\n      const newFullLength = newLength + this.bufferOffset\n      if (newFullLength > this.buffer.byteLength) {\n        // We can't concat the new buffer with the remaining one\n        let newBuffer: Buffer\n        if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n          // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n          newBuffer = this.buffer\n        } else {\n          // Allocate a new larger buffer\n          let newBufferLength = this.buffer.byteLength * 2\n          while (newLength >= newBufferLength) {\n            newBufferLength *= 2\n          }\n          newBuffer = Buffer.allocUnsafe(newBufferLength)\n        }\n        // Move the remaining buffer to the new one\n        this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength)\n        this.buffer = newBuffer\n        this.bufferOffset = 0\n      }\n      // Concat the new buffer with the remaining one\n      buffer.copy(this.buffer, this.bufferOffset + this.bufferLength)\n      this.bufferLength = newLength\n    } else {\n      this.buffer = buffer\n      this.bufferOffset = 0\n      this.bufferLength = buffer.byteLength\n    }\n  }\n\n  private handlePacket(offset: number, code: number, length: number, bytes: Buffer): BackendMessage {\n    switch (code) {\n      case MessageCodes.BindComplete:\n        return bindComplete\n      case MessageCodes.ParseComplete:\n        return parseComplete\n      case MessageCodes.CloseComplete:\n        return closeComplete\n      case MessageCodes.NoData:\n        return noData\n      case MessageCodes.PortalSuspended:\n        return portalSuspended\n      case MessageCodes.CopyDone:\n        return copyDone\n      case MessageCodes.ReplicationStart:\n        return replicationStart\n      case MessageCodes.EmptyQuery:\n        return emptyQuery\n      case MessageCodes.DataRow:\n        return this.parseDataRowMessage(offset, length, bytes)\n      case MessageCodes.CommandComplete:\n        return this.parseCommandCompleteMessage(offset, length, bytes)\n      case MessageCodes.ReadyForQuery:\n        return this.parseReadyForQueryMessage(offset, length, bytes)\n      case MessageCodes.NotificationResponse:\n        return this.parseNotificationMessage(offset, length, bytes)\n      case MessageCodes.AuthenticationResponse:\n        return this.parseAuthenticationResponse(offset, length, bytes)\n      case MessageCodes.ParameterStatus:\n        return this.parseParameterStatusMessage(offset, length, bytes)\n      case MessageCodes.BackendKeyData:\n        return this.parseBackendKeyData(offset, length, bytes)\n      case MessageCodes.ErrorMessage:\n        return this.parseErrorMessage(offset, length, bytes, 'error')\n      case MessageCodes.NoticeMessage:\n        return this.parseErrorMessage(offset, length, bytes, 'notice')\n      case MessageCodes.RowDescriptionMessage:\n        return this.parseRowDescriptionMessage(offset, length, bytes)\n      case MessageCodes.ParameterDescriptionMessage:\n        return this.parseParameterDescriptionMessage(offset, length, bytes)\n      case MessageCodes.CopyIn:\n        return this.parseCopyInMessage(offset, length, bytes)\n      case MessageCodes.CopyOut:\n        return this.parseCopyOutMessage(offset, length, bytes)\n      case MessageCodes.CopyData:\n        return this.parseCopyData(offset, length, bytes)\n      default:\n        return new DatabaseError('received invalid response: ' + code.toString(16), length, 'error')\n    }\n  }\n\n  private parseReadyForQueryMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const status = this.reader.string(1)\n    return new ReadyForQueryMessage(length, status)\n  }\n\n  private parseCommandCompleteMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const text = this.reader.cstring()\n    return new CommandCompleteMessage(length, text)\n  }\n\n  private parseCopyData(offset: number, length: number, bytes: Buffer) {\n    const chunk = bytes.slice(offset, offset + (length - 4))\n    return new CopyDataMessage(length, chunk)\n  }\n\n  private parseCopyInMessage(offset: number, length: number, bytes: Buffer) {\n    return this.parseCopyMessage(offset, length, bytes, 'copyInResponse')\n  }\n\n  private parseCopyOutMessage(offset: number, length: number, bytes: Buffer) {\n    return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse')\n  }\n\n  private parseCopyMessage(offset: number, length: number, bytes: Buffer, messageName: MessageName) {\n    this.reader.setBuffer(offset, bytes)\n    const isBinary = this.reader.byte() !== 0\n    const columnCount = this.reader.int16()\n    const message = new CopyResponse(length, messageName, isBinary, columnCount)\n    for (let i = 0; i < columnCount; i++) {\n      message.columnTypes[i] = this.reader.int16()\n    }\n    return message\n  }\n\n  private parseNotificationMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const processId = this.reader.int32()\n    const channel = this.reader.cstring()\n    const payload = this.reader.cstring()\n    return new NotificationResponseMessage(length, processId, channel, payload)\n  }\n\n  private parseRowDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const fieldCount = this.reader.int16()\n    const message = new RowDescriptionMessage(length, fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      message.fields[i] = this.parseField()\n    }\n    return message\n  }\n\n  private parseField(): Field {\n    const name = this.reader.cstring()\n    const tableID = this.reader.uint32()\n    const columnID = this.reader.int16()\n    const dataTypeID = this.reader.uint32()\n    const dataTypeSize = this.reader.int16()\n    const dataTypeModifier = this.reader.int32()\n    const mode = this.reader.int16() === 0 ? 'text' : 'binary'\n    return new Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode)\n  }\n\n  private parseParameterDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const parameterCount = this.reader.int16()\n    const message = new ParameterDescriptionMessage(length, parameterCount)\n    for (let i = 0; i < parameterCount; i++) {\n      message.dataTypeIDs[i] = this.reader.int32()\n    }\n    return message\n  }\n\n  private parseDataRowMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const fieldCount = this.reader.int16()\n    const fields: any[] = new Array(fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      const len = this.reader.int32()\n      // a -1 for length means the value of the field is null\n      fields[i] = len === -1 ? null : this.reader.string(len)\n    }\n    return new DataRowMessage(length, fields)\n  }\n\n  private parseParameterStatusMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const name = this.reader.cstring()\n    const value = this.reader.cstring()\n    return new ParameterStatusMessage(length, name, value)\n  }\n\n  private parseBackendKeyData(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const processID = this.reader.int32()\n    const secretKey = this.reader.int32()\n    return new BackendKeyDataMessage(length, processID, secretKey)\n  }\n\n  public parseAuthenticationResponse(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const code = this.reader.int32()\n    // TODO(bmc): maybe better types here\n    const message: BackendMessage & any = {\n      name: 'authenticationOk',\n      length,\n    }\n\n    switch (code) {\n      case 0: // AuthenticationOk\n        break\n      case 3: // AuthenticationCleartextPassword\n        if (message.length === 8) {\n          message.name = 'authenticationCleartextPassword'\n        }\n        break\n      case 5: // AuthenticationMD5Password\n        if (message.length === 12) {\n          message.name = 'authenticationMD5Password'\n          const salt = this.reader.bytes(4)\n          return new AuthenticationMD5Password(length, salt)\n        }\n        break\n      case 10: // AuthenticationSASL\n        message.name = 'authenticationSASL'\n        message.mechanisms = []\n        let mechanism: string\n        do {\n          mechanism = this.reader.cstring()\n\n          if (mechanism) {\n            message.mechanisms.push(mechanism)\n          }\n        } while (mechanism)\n        break\n      case 11: // AuthenticationSASLContinue\n        message.name = 'authenticationSASLContinue'\n        message.data = this.reader.string(length - 8)\n        break\n      case 12: // AuthenticationSASLFinal\n        message.name = 'authenticationSASLFinal'\n        message.data = this.reader.string(length - 8)\n        break\n      default:\n        throw new Error('Unknown authenticationOk message type ' + code)\n    }\n    return message\n  }\n\n  private parseErrorMessage(offset: number, length: number, bytes: Buffer, name: MessageName) {\n    this.reader.setBuffer(offset, bytes)\n    const fields: Record<string, string> = {}\n    let fieldType = this.reader.string(1)\n    while (fieldType !== '\\0') {\n      fields[fieldType] = this.reader.cstring()\n      fieldType = this.reader.string(1)\n    }\n\n    const messageValue = fields.M\n\n    const message =\n      name === 'notice' ? new NoticeMessage(length, messageValue) : new DatabaseError(messageValue, length, name)\n\n    message.severity = fields.S\n    message.code = fields.C\n    message.detail = fields.D\n    message.hint = fields.H\n    message.position = fields.P\n    message.internalPosition = fields.p\n    message.internalQuery = fields.q\n    message.where = fields.W\n    message.schema = fields.s\n    message.table = fields.t\n    message.column = fields.c\n    message.dataType = fields.d\n    message.constraint = fields.n\n    message.file = fields.F\n    message.line = fields.L\n    message.routine = fields.R\n    return message\n  }\n}\n", "import { DatabaseError } from './messages'\nimport { serialize } from './serializer'\nimport { Parser, MessageCallback } from './parser'\n\nexport function parse(stream: NodeJS.ReadableStream, callback: MessageCallback): Promise<void> {\n  const parser = new Parser()\n  stream.on('data', (buffer: Buffer) => parser.parse(buffer, callback))\n  return new Promise((resolve) => stream.on('end', () => resolve()))\n}\n\nexport { serialize, DatabaseError }\n", "// This is an empty module that is served up when outside of a workerd environment\n// See the `exports` field in package.json\nexport default {}\n", "const { getStream, getSecureStream } = getStreamFuncs()\n\nmodule.exports = {\n  /**\n   * Get a socket stream compatible with the current runtime environment.\n   * @returns {Duplex}\n   */\n  getStream,\n  /**\n   * Get a TLS secured socket, compatible with the current environment,\n   * using the socket and other settings given in `options`.\n   * @returns {Duplex}\n   */\n  getSecureStream,\n}\n\n/**\n * The stream functions that work in Node.js\n */\nfunction getNodejsStreamFuncs() {\n  function getStream(ssl) {\n    const net = require('net')\n    return new net.Socket()\n  }\n\n  function getSecureStream(options) {\n    var tls = require('tls')\n    return tls.connect(options)\n  }\n  return {\n    getStream,\n    getSecureStream,\n  }\n}\n\n/**\n * The stream functions that work in Cloudflare Workers\n */\nfunction getCloudflareStreamFuncs() {\n  function getStream(ssl) {\n    const { CloudflareSocket } = require('pg-cloudflare')\n    return new CloudflareSocket(ssl)\n  }\n\n  function getSecureStream(options) {\n    options.socket.startTls(options)\n    return options.socket\n  }\n  return {\n    getStream,\n    getSecureStream,\n  }\n}\n\n/**\n * Are we running in a Cloudflare Worker?\n *\n * @returns true if the code is currently running inside a Cloudflare Worker.\n */\nfunction isCloudflareRuntime() {\n  // Since 2022-03-21 the `global_navigator` compatibility flag is on for Cloudflare Workers\n  // which means that `navigator.userAgent` will be defined.\n  if (typeof navigator === 'object' && navigator !== null && typeof navigator.userAgent === 'string') {\n    return navigator.userAgent === 'Cloudflare-Workers'\n  }\n  // In case `navigator` or `navigator.userAgent` is not defined then try a more sneaky approach\n  if (typeof Response === 'function') {\n    const resp = new Response(null, { cf: { thing: true } })\n    if (typeof resp.cf === 'object' && resp.cf !== null && resp.cf.thing) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction getStreamFuncs() {\n  if (isCloudflareRuntime()) {\n    return getCloudflareStreamFuncs()\n  }\n  return getNodejsStreamFuncs()\n}\n", "'use strict'\n\nvar EventEmitter = require('events').EventEmitter\n\nconst { parse, serialize } = require('pg-protocol')\nconst { getStream, getSecureStream } = require('./stream')\n\nconst flushBuffer = serialize.flush()\nconst syncBuffer = serialize.sync()\nconst endBuffer = serialize.end()\n\n// TODO(bmc) support binary mode at some point\nclass Connection extends EventEmitter {\n  constructor(config) {\n    super()\n    config = config || {}\n\n    this.stream = config.stream || getStream(config.ssl)\n    if (typeof this.stream === 'function') {\n      this.stream = this.stream(config)\n    }\n\n    this._keepAlive = config.keepAlive\n    this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis\n    this.lastBuffer = false\n    this.parsedStatements = {}\n    this.ssl = config.ssl || false\n    this._ending = false\n    this._emitMessage = false\n    var self = this\n    this.on('newListener', function (eventName) {\n      if (eventName === 'message') {\n        self._emitMessage = true\n      }\n    })\n  }\n\n  connect(port, host) {\n    var self = this\n\n    this._connecting = true\n    this.stream.setNoDelay(true)\n    this.stream.connect(port, host)\n\n    this.stream.once('connect', function () {\n      if (self._keepAlive) {\n        self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis)\n      }\n      self.emit('connect')\n    })\n\n    const reportStreamError = function (error) {\n      // errors about disconnections should be ignored during disconnect\n      if (self._ending && (error.code === 'ECONNRESET' || error.code === 'EPIPE')) {\n        return\n      }\n      self.emit('error', error)\n    }\n    this.stream.on('error', reportStreamError)\n\n    this.stream.on('close', function () {\n      self.emit('end')\n    })\n\n    if (!this.ssl) {\n      return this.attachListeners(this.stream)\n    }\n\n    this.stream.once('data', function (buffer) {\n      var responseCode = buffer.toString('utf8')\n      switch (responseCode) {\n        case 'S': // Server supports SSL connections, continue with a secure connection\n          break\n        case 'N': // Server does not support SSL connections\n          self.stream.end()\n          return self.emit('error', new Error('The server does not support SSL connections'))\n        default:\n          // Any other response byte, including 'E' (ErrorResponse) indicating a server error\n          self.stream.end()\n          return self.emit('error', new Error('There was an error establishing an SSL connection'))\n      }\n      const options = {\n        socket: self.stream,\n      }\n\n      if (self.ssl !== true) {\n        Object.assign(options, self.ssl)\n\n        if ('key' in self.ssl) {\n          options.key = self.ssl.key\n        }\n      }\n\n      var net = require('net')\n      if (net.isIP && net.isIP(host) === 0) {\n        options.servername = host\n      }\n      try {\n        self.stream = getSecureStream(options)\n      } catch (err) {\n        return self.emit('error', err)\n      }\n      self.attachListeners(self.stream)\n      self.stream.on('error', reportStreamError)\n\n      self.emit('sslconnect')\n    })\n  }\n\n  attachListeners(stream) {\n    parse(stream, (msg) => {\n      var eventName = msg.name === 'error' ? 'errorMessage' : msg.name\n      if (this._emitMessage) {\n        this.emit('message', msg)\n      }\n      this.emit(eventName, msg)\n    })\n  }\n\n  requestSsl() {\n    this.stream.write(serialize.requestSsl())\n  }\n\n  startup(config) {\n    this.stream.write(serialize.startup(config))\n  }\n\n  cancel(processID, secretKey) {\n    this._send(serialize.cancel(processID, secretKey))\n  }\n\n  password(password) {\n    this._send(serialize.password(password))\n  }\n\n  sendSASLInitialResponseMessage(mechanism, initialResponse) {\n    this._send(serialize.sendSASLInitialResponseMessage(mechanism, initialResponse))\n  }\n\n  sendSCRAMClientFinalMessage(additionalData) {\n    this._send(serialize.sendSCRAMClientFinalMessage(additionalData))\n  }\n\n  _send(buffer) {\n    if (!this.stream.writable) {\n      return false\n    }\n    return this.stream.write(buffer)\n  }\n\n  query(text) {\n    this._send(serialize.query(text))\n  }\n\n  // send parse message\n  parse(query) {\n    this._send(serialize.parse(query))\n  }\n\n  // send bind message\n  bind(config) {\n    this._send(serialize.bind(config))\n  }\n\n  // send execute message\n  execute(config) {\n    this._send(serialize.execute(config))\n  }\n\n  flush() {\n    if (this.stream.writable) {\n      this.stream.write(flushBuffer)\n    }\n  }\n\n  sync() {\n    this._ending = true\n    this._send(syncBuffer)\n  }\n\n  ref() {\n    this.stream.ref()\n  }\n\n  unref() {\n    this.stream.unref()\n  }\n\n  end() {\n    // 0x58 = 'X'\n    this._ending = true\n    if (!this._connecting || !this.stream.writable) {\n      this.stream.end()\n      return\n    }\n    return this.stream.write(endBuffer, () => {\n      this.stream.end()\n    })\n  }\n\n  close(msg) {\n    this._send(serialize.close(msg))\n  }\n\n  describe(msg) {\n    this._send(serialize.describe(msg))\n  }\n\n  sendCopyFromChunk(chunk) {\n    this._send(serialize.copyData(chunk))\n  }\n\n  endCopyFrom() {\n    this._send(serialize.copyDone())\n  }\n\n  sendCopyFail(msg) {\n    this._send(serialize.copyFail(msg))\n  }\n}\n\nmodule.exports = Connection\n", "/*\nCopyright (c) 2014-2021, Matteo Collina <hello@matteocollina.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\n'use strict'\n\nconst { Transform } = require('stream')\nconst { StringDecoder } = require('string_decoder')\nconst kLast = Symbol('last')\nconst kDecoder = Symbol('decoder')\n\nfunction transform (chunk, enc, cb) {\n  let list\n  if (this.overflow) { // Line buffer is full. Skip to start of next line.\n    const buf = this[kDecoder].write(chunk)\n    list = buf.split(this.matcher)\n\n    if (list.length === 1) return cb() // Line ending not found. Discard entire chunk.\n\n    // Line ending found. Discard trailing fragment of previous line and reset overflow state.\n    list.shift()\n    this.overflow = false\n  } else {\n    this[kLast] += this[kDecoder].write(chunk)\n    list = this[kLast].split(this.matcher)\n  }\n\n  this[kLast] = list.pop()\n\n  for (let i = 0; i < list.length; i++) {\n    try {\n      push(this, this.mapper(list[i]))\n    } catch (error) {\n      return cb(error)\n    }\n  }\n\n  this.overflow = this[kLast].length > this.maxLength\n  if (this.overflow && !this.skipOverflow) {\n    cb(new Error('maximum buffer reached'))\n    return\n  }\n\n  cb()\n}\n\nfunction flush (cb) {\n  // forward any gibberish left in there\n  this[kLast] += this[kDecoder].end()\n\n  if (this[kLast]) {\n    try {\n      push(this, this.mapper(this[kLast]))\n    } catch (error) {\n      return cb(error)\n    }\n  }\n\n  cb()\n}\n\nfunction push (self, val) {\n  if (val !== undefined) {\n    self.push(val)\n  }\n}\n\nfunction noop (incoming) {\n  return incoming\n}\n\nfunction split (matcher, mapper, options) {\n  // Set defaults for any arguments not supplied.\n  matcher = matcher || /\\r?\\n/\n  mapper = mapper || noop\n  options = options || {}\n\n  // Test arguments explicitly.\n  switch (arguments.length) {\n    case 1:\n      // If mapper is only argument.\n      if (typeof matcher === 'function') {\n        mapper = matcher\n        matcher = /\\r?\\n/\n      // If options is only argument.\n      } else if (typeof matcher === 'object' && !(matcher instanceof RegExp) && !matcher[Symbol.split]) {\n        options = matcher\n        matcher = /\\r?\\n/\n      }\n      break\n\n    case 2:\n      // If mapper and options are arguments.\n      if (typeof matcher === 'function') {\n        options = mapper\n        mapper = matcher\n        matcher = /\\r?\\n/\n      // If matcher and options are arguments.\n      } else if (typeof mapper === 'object') {\n        options = mapper\n        mapper = noop\n      }\n  }\n\n  options = Object.assign({}, options)\n  options.autoDestroy = true\n  options.transform = transform\n  options.flush = flush\n  options.readableObjectMode = true\n\n  const stream = new Transform(options)\n\n  stream[kLast] = ''\n  stream[kDecoder] = new StringDecoder('utf8')\n  stream.matcher = matcher\n  stream.mapper = mapper\n  stream.maxLength = options.maxLength\n  stream.skipOverflow = options.skipOverflow || false\n  stream.overflow = false\n  stream._destroy = function (err, cb) {\n    // Weird Node v12 bug that we need to work around\n    this._writableState.errorEmitted = false\n    cb(err)\n  }\n\n  return stream\n}\n\nmodule.exports = split\n", "'use strict';\n\nvar path = require('path')\n  , Stream = require('stream').Stream\n  , split = require('split2')\n  , util = require('util')\n  , defaultPort = 5432\n  , isWin = (process.platform === 'win32')\n  , warnStream = process.stderr\n;\n\n\nvar S_IRWXG = 56     //    00070(8)\n  , S_IRWXO = 7      //    00007(8)\n  , S_IFMT  = 61440  // 00170000(8)\n  , S_IFREG = 32768  //  0100000(8)\n;\nfunction isRegFile(mode) {\n    return ((mode & S_IFMT) == S_IFREG);\n}\n\nvar fieldNames = [ 'host', 'port', 'database', 'user', 'password' ];\nvar nrOfFields = fieldNames.length;\nvar passKey = fieldNames[ nrOfFields -1 ];\n\n\nfunction warn() {\n    var isWritable = (\n        warnStream instanceof Stream &&\n          true === warnStream.writable\n    );\n\n    if (isWritable) {\n        var args = Array.prototype.slice.call(arguments).concat(\"\\n\");\n        warnStream.write( util.format.apply(util, args) );\n    }\n}\n\n\nObject.defineProperty(module.exports, 'isWin', {\n    get : function() {\n        return isWin;\n    } ,\n    set : function(val) {\n        isWin = val;\n    }\n});\n\n\nmodule.exports.warnTo = function(stream) {\n    var old = warnStream;\n    warnStream = stream;\n    return old;\n};\n\nmodule.exports.getFileName = function(rawEnv){\n    var env = rawEnv || process.env;\n    var file = env.PGPASSFILE || (\n        isWin ?\n          path.join( env.APPDATA || './' , 'postgresql', 'pgpass.conf' ) :\n          path.join( env.HOME || './', '.pgpass' )\n    );\n    return file;\n};\n\nmodule.exports.usePgPass = function(stats, fname) {\n    if (Object.prototype.hasOwnProperty.call(process.env, 'PGPASSWORD')) {\n        return false;\n    }\n\n    if (isWin) {\n        return true;\n    }\n\n    fname = fname || '<unkn>';\n\n    if (! isRegFile(stats.mode)) {\n        warn('WARNING: password file \"%s\" is not a plain file', fname);\n        return false;\n    }\n\n    if (stats.mode & (S_IRWXG | S_IRWXO)) {\n        /* If password file is insecure, alert the user and ignore it. */\n        warn('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', fname);\n        return false;\n    }\n\n    return true;\n};\n\n\nvar matcher = module.exports.match = function(connInfo, entry) {\n    return fieldNames.slice(0, -1).reduce(function(prev, field, idx){\n        if (idx == 1) {\n            // the port\n            if ( Number( connInfo[field] || defaultPort ) === Number( entry[field] ) ) {\n                return prev && true;\n            }\n        }\n        return prev && (\n            entry[field] === '*' ||\n              entry[field] === connInfo[field]\n        );\n    }, true);\n};\n\n\nmodule.exports.getPassword = function(connInfo, stream, cb) {\n    var pass;\n    var lineStream = stream.pipe(split());\n\n    function onLine(line) {\n        var entry = parseLine(line);\n        if (entry && isValidEntry(entry) && matcher(connInfo, entry)) {\n            pass = entry[passKey];\n            lineStream.end(); // -> calls onEnd(), but pass is set now\n        }\n    }\n\n    var onEnd = function() {\n        stream.destroy();\n        cb(pass);\n    };\n\n    var onErr = function(err) {\n        stream.destroy();\n        warn('WARNING: error on reading file: %s', err);\n        cb(undefined);\n    };\n\n    stream.on('error', onErr);\n    lineStream\n        .on('data', onLine)\n        .on('end', onEnd)\n        .on('error', onErr)\n    ;\n\n};\n\n\nvar parseLine = module.exports.parseLine = function(line) {\n    if (line.length < 11 || line.match(/^\\s+#/)) {\n        return null;\n    }\n\n    var curChar = '';\n    var prevChar = '';\n    var fieldIdx = 0;\n    var startIdx = 0;\n    var endIdx = 0;\n    var obj = {};\n    var isLastField = false;\n    var addToObj = function(idx, i0, i1) {\n        var field = line.substring(i0, i1);\n\n        if (! Object.hasOwnProperty.call(process.env, 'PGPASS_NO_DEESCAPE')) {\n            field = field.replace(/\\\\([:\\\\])/g, '$1');\n        }\n\n        obj[ fieldNames[idx] ] = field;\n    };\n\n    for (var i = 0 ; i < line.length-1 ; i += 1) {\n        curChar = line.charAt(i+1);\n        prevChar = line.charAt(i);\n\n        isLastField = (fieldIdx == nrOfFields-1);\n\n        if (isLastField) {\n            addToObj(fieldIdx, startIdx);\n            break;\n        }\n\n        if (i >= 0 && curChar == ':' && prevChar !== '\\\\') {\n            addToObj(fieldIdx, startIdx, i+1);\n\n            startIdx = i+2;\n            fieldIdx += 1;\n        }\n    }\n\n    obj = ( Object.keys(obj).length === nrOfFields ) ? obj : null;\n\n    return obj;\n};\n\n\nvar isValidEntry = module.exports.isValidEntry = function(entry){\n    var rules = {\n        // host\n        0 : function(x){\n            return x.length > 0;\n        } ,\n        // port\n        1 : function(x){\n            if (x === '*') {\n                return true;\n            }\n            x = Number(x);\n            return (\n                isFinite(x) &&\n                  x > 0 &&\n                  x < 9007199254740992 &&\n                  Math.floor(x) === x\n            );\n        } ,\n        // database\n        2 : function(x){\n            return x.length > 0;\n        } ,\n        // username\n        3 : function(x){\n            return x.length > 0;\n        } ,\n        // password\n        4 : function(x){\n            return x.length > 0;\n        }\n    };\n\n    for (var idx = 0 ; idx < fieldNames.length ; idx += 1) {\n        var rule = rules[idx];\n        var value = entry[ fieldNames[idx] ] || '';\n\n        var res = rule(value);\n        if (!res) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n", "'use strict';\n\nvar path = require('path')\n  , fs = require('fs')\n  , helper = require('./helper.js')\n;\n\n\nmodule.exports = function(connInfo, cb) {\n    var file = helper.getFileName();\n    \n    fs.stat(file, function(err, stat){\n        if (err || !helper.usePgPass(stat, file)) {\n            return cb(undefined);\n        }\n\n        var st = fs.createReadStream(file);\n\n        helper.getPassword(connInfo, st, cb);\n    });\n};\n\nmodule.exports.warnTo = helper.warnTo;\n", "'use strict'\n\nvar EventEmitter = require('events').EventEmitter\nvar utils = require('./utils')\nvar sasl = require('./crypto/sasl')\nvar TypeOverrides = require('./type-overrides')\n\nvar ConnectionParameters = require('./connection-parameters')\nvar Query = require('./query')\nvar defaults = require('./defaults')\nvar Connection = require('./connection')\nconst crypto = require('./crypto/utils')\n\nclass Client extends EventEmitter {\n  constructor(config) {\n    super()\n\n    this.connectionParameters = new ConnectionParameters(config)\n    this.user = this.connectionParameters.user\n    this.database = this.connectionParameters.database\n    this.port = this.connectionParameters.port\n    this.host = this.connectionParameters.host\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: this.connectionParameters.password,\n    })\n\n    this.replication = this.connectionParameters.replication\n\n    var c = config || {}\n\n    this._Promise = c.Promise || global.Promise\n    this._types = new TypeOverrides(c.types)\n    this._ending = false\n    this._ended = false\n    this._connecting = false\n    this._connected = false\n    this._connectionError = false\n    this._queryable = true\n\n    this.enableChannelBinding = Boolean(c.enableChannelBinding) // set true to use SCRAM-SHA-256-PLUS when offered\n    this.connection =\n      c.connection ||\n      new Connection({\n        stream: c.stream,\n        ssl: this.connectionParameters.ssl,\n        keepAlive: c.keepAlive || false,\n        keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n        encoding: this.connectionParameters.client_encoding || 'utf8',\n      })\n    this.queryQueue = []\n    this.binary = c.binary || defaults.binary\n    this.processID = null\n    this.secretKey = null\n    this.ssl = this.connectionParameters.ssl || false\n    // As with Password, make SSL->Key (the private key) non-enumerable.\n    // It won't show up in stack traces\n    // or if the client is console.logged\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0\n  }\n\n  _errorAllQueries(err) {\n    const enqueueError = (query) => {\n      process.nextTick(() => {\n        query.handleError(err, this.connection)\n      })\n    }\n\n    if (this.activeQuery) {\n      enqueueError(this.activeQuery)\n      this.activeQuery = null\n    }\n\n    this.queryQueue.forEach(enqueueError)\n    this.queryQueue.length = 0\n  }\n\n  _connect(callback) {\n    var self = this\n    var con = this.connection\n    this._connectionCallback = callback\n\n    if (this._connecting || this._connected) {\n      const err = new Error('Client has already been connected. You cannot reuse a client.')\n      process.nextTick(() => {\n        callback(err)\n      })\n      return\n    }\n    this._connecting = true\n\n    if (this._connectionTimeoutMillis > 0) {\n      this.connectionTimeoutHandle = setTimeout(() => {\n        con._ending = true\n        con.stream.destroy(new Error('timeout expired'))\n      }, this._connectionTimeoutMillis)\n\n      if (this.connectionTimeoutHandle.unref) {\n        this.connectionTimeoutHandle.unref()\n      }\n    }\n\n    if (this.host && this.host.indexOf('/') === 0) {\n      con.connect(this.host + '/.s.PGSQL.' + this.port)\n    } else {\n      con.connect(this.port, this.host)\n    }\n\n    // once connection is established send startup message\n    con.on('connect', function () {\n      if (self.ssl) {\n        con.requestSsl()\n      } else {\n        con.startup(self.getStartupConf())\n      }\n    })\n\n    con.on('sslconnect', function () {\n      con.startup(self.getStartupConf())\n    })\n\n    this._attachListeners(con)\n\n    con.once('end', () => {\n      const error = this._ending ? new Error('Connection terminated') : new Error('Connection terminated unexpectedly')\n\n      clearTimeout(this.connectionTimeoutHandle)\n      this._errorAllQueries(error)\n      this._ended = true\n\n      if (!this._ending) {\n        // if the connection is ended without us calling .end()\n        // on this client then we have an unexpected disconnection\n        // treat this as an error unless we've already emitted an error\n        // during connection.\n        if (this._connecting && !this._connectionError) {\n          if (this._connectionCallback) {\n            this._connectionCallback(error)\n          } else {\n            this._handleErrorEvent(error)\n          }\n        } else if (!this._connectionError) {\n          this._handleErrorEvent(error)\n        }\n      }\n\n      process.nextTick(() => {\n        this.emit('end')\n      })\n    })\n  }\n\n  connect(callback) {\n    if (callback) {\n      this._connect(callback)\n      return\n    }\n\n    return new this._Promise((resolve, reject) => {\n      this._connect((error) => {\n        if (error) {\n          reject(error)\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  _attachListeners(con) {\n    // password request handling\n    con.on('authenticationCleartextPassword', this._handleAuthCleartextPassword.bind(this))\n    // password request handling\n    con.on('authenticationMD5Password', this._handleAuthMD5Password.bind(this))\n    // password request handling (SASL)\n    con.on('authenticationSASL', this._handleAuthSASL.bind(this))\n    con.on('authenticationSASLContinue', this._handleAuthSASLContinue.bind(this))\n    con.on('authenticationSASLFinal', this._handleAuthSASLFinal.bind(this))\n    con.on('backendKeyData', this._handleBackendKeyData.bind(this))\n    con.on('error', this._handleErrorEvent.bind(this))\n    con.on('errorMessage', this._handleErrorMessage.bind(this))\n    con.on('readyForQuery', this._handleReadyForQuery.bind(this))\n    con.on('notice', this._handleNotice.bind(this))\n    con.on('rowDescription', this._handleRowDescription.bind(this))\n    con.on('dataRow', this._handleDataRow.bind(this))\n    con.on('portalSuspended', this._handlePortalSuspended.bind(this))\n    con.on('emptyQuery', this._handleEmptyQuery.bind(this))\n    con.on('commandComplete', this._handleCommandComplete.bind(this))\n    con.on('parseComplete', this._handleParseComplete.bind(this))\n    con.on('copyInResponse', this._handleCopyInResponse.bind(this))\n    con.on('copyData', this._handleCopyData.bind(this))\n    con.on('notification', this._handleNotification.bind(this))\n  }\n\n  // TODO(bmc): deprecate pgpass \"built in\" integration since this.password can be a function\n  // it can be supplied by the user if required - this is a breaking change!\n  _checkPgPass(cb) {\n    const con = this.connection\n    if (typeof this.password === 'function') {\n      this._Promise\n        .resolve()\n        .then(() => this.password())\n        .then((pass) => {\n          if (pass !== undefined) {\n            if (typeof pass !== 'string') {\n              con.emit('error', new TypeError('Password must be a string'))\n              return\n            }\n            this.connectionParameters.password = this.password = pass\n          } else {\n            this.connectionParameters.password = this.password = null\n          }\n          cb()\n        })\n        .catch((err) => {\n          con.emit('error', err)\n        })\n    } else if (this.password !== null) {\n      cb()\n    } else {\n      try {\n        const pgPass = require('pgpass')\n        pgPass(this.connectionParameters, (pass) => {\n          if (undefined !== pass) {\n            this.connectionParameters.password = this.password = pass\n          }\n          cb()\n        })\n      } catch (e) {\n        this.emit('error', e)\n      }\n    }\n  }\n\n  _handleAuthCleartextPassword(msg) {\n    this._checkPgPass(() => {\n      this.connection.password(this.password)\n    })\n  }\n\n  _handleAuthMD5Password(msg) {\n    this._checkPgPass(async () => {\n      try {\n        const hashedPassword = await crypto.postgresMd5PasswordHash(this.user, this.password, msg.salt)\n        this.connection.password(hashedPassword)\n      } catch (e) {\n        this.emit('error', e)\n      }\n    })\n  }\n\n  _handleAuthSASL(msg) {\n    this._checkPgPass(() => {\n      try {\n        this.saslSession = sasl.startSession(msg.mechanisms, this.enableChannelBinding && this.connection.stream)\n        this.connection.sendSASLInitialResponseMessage(this.saslSession.mechanism, this.saslSession.response)\n      } catch (err) {\n        this.connection.emit('error', err)\n      }\n    })\n  }\n\n  async _handleAuthSASLContinue(msg) {\n    try {\n      await sasl.continueSession(\n        this.saslSession,\n        this.password,\n        msg.data,\n        this.enableChannelBinding && this.connection.stream\n      )\n      this.connection.sendSCRAMClientFinalMessage(this.saslSession.response)\n    } catch (err) {\n      this.connection.emit('error', err)\n    }\n  }\n\n  _handleAuthSASLFinal(msg) {\n    try {\n      sasl.finalizeSession(this.saslSession, msg.data)\n      this.saslSession = null\n    } catch (err) {\n      this.connection.emit('error', err)\n    }\n  }\n\n  _handleBackendKeyData(msg) {\n    this.processID = msg.processID\n    this.secretKey = msg.secretKey\n  }\n\n  _handleReadyForQuery(msg) {\n    if (this._connecting) {\n      this._connecting = false\n      this._connected = true\n      clearTimeout(this.connectionTimeoutHandle)\n\n      // process possible callback argument to Client#connect\n      if (this._connectionCallback) {\n        this._connectionCallback(null, this)\n        // remove callback for proper error handling\n        // after the connect event\n        this._connectionCallback = null\n      }\n      this.emit('connect')\n    }\n    const { activeQuery } = this\n    this.activeQuery = null\n    this.readyForQuery = true\n    if (activeQuery) {\n      activeQuery.handleReadyForQuery(this.connection)\n    }\n    this._pulseQueryQueue()\n  }\n\n  // if we receieve an error event or error message\n  // during the connection process we handle it here\n  _handleErrorWhileConnecting(err) {\n    if (this._connectionError) {\n      // TODO(bmc): this is swallowing errors - we shouldn't do this\n      return\n    }\n    this._connectionError = true\n    clearTimeout(this.connectionTimeoutHandle)\n    if (this._connectionCallback) {\n      return this._connectionCallback(err)\n    }\n    this.emit('error', err)\n  }\n\n  // if we're connected and we receive an error event from the connection\n  // this means the socket is dead - do a hard abort of all queries and emit\n  // the socket error on the client as well\n  _handleErrorEvent(err) {\n    if (this._connecting) {\n      return this._handleErrorWhileConnecting(err)\n    }\n    this._queryable = false\n    this._errorAllQueries(err)\n    this.emit('error', err)\n  }\n\n  // handle error messages from the postgres backend\n  _handleErrorMessage(msg) {\n    if (this._connecting) {\n      return this._handleErrorWhileConnecting(msg)\n    }\n    const activeQuery = this.activeQuery\n\n    if (!activeQuery) {\n      this._handleErrorEvent(msg)\n      return\n    }\n\n    this.activeQuery = null\n    activeQuery.handleError(msg, this.connection)\n  }\n\n  _handleRowDescription(msg) {\n    // delegate rowDescription to active query\n    this.activeQuery.handleRowDescription(msg)\n  }\n\n  _handleDataRow(msg) {\n    // delegate dataRow to active query\n    this.activeQuery.handleDataRow(msg)\n  }\n\n  _handlePortalSuspended(msg) {\n    // delegate portalSuspended to active query\n    this.activeQuery.handlePortalSuspended(this.connection)\n  }\n\n  _handleEmptyQuery(msg) {\n    // delegate emptyQuery to active query\n    this.activeQuery.handleEmptyQuery(this.connection)\n  }\n\n  _handleCommandComplete(msg) {\n    if (this.activeQuery == null) {\n      const error = new Error('Received unexpected commandComplete message from backend.')\n      this._handleErrorEvent(error)\n      return\n    }\n    // delegate commandComplete to active query\n    this.activeQuery.handleCommandComplete(msg, this.connection)\n  }\n\n  _handleParseComplete() {\n    if (this.activeQuery == null) {\n      const error = new Error('Received unexpected parseComplete message from backend.')\n      this._handleErrorEvent(error)\n      return\n    }\n    // if a prepared statement has a name and properly parses\n    // we track that its already been executed so we don't parse\n    // it again on the same client\n    if (this.activeQuery.name) {\n      this.connection.parsedStatements[this.activeQuery.name] = this.activeQuery.text\n    }\n  }\n\n  _handleCopyInResponse(msg) {\n    this.activeQuery.handleCopyInResponse(this.connection)\n  }\n\n  _handleCopyData(msg) {\n    this.activeQuery.handleCopyData(msg, this.connection)\n  }\n\n  _handleNotification(msg) {\n    this.emit('notification', msg)\n  }\n\n  _handleNotice(msg) {\n    this.emit('notice', msg)\n  }\n\n  getStartupConf() {\n    var params = this.connectionParameters\n\n    var data = {\n      user: params.user,\n      database: params.database,\n    }\n\n    var appName = params.application_name || params.fallback_application_name\n    if (appName) {\n      data.application_name = appName\n    }\n    if (params.replication) {\n      data.replication = '' + params.replication\n    }\n    if (params.statement_timeout) {\n      data.statement_timeout = String(parseInt(params.statement_timeout, 10))\n    }\n    if (params.lock_timeout) {\n      data.lock_timeout = String(parseInt(params.lock_timeout, 10))\n    }\n    if (params.idle_in_transaction_session_timeout) {\n      data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10))\n    }\n    if (params.options) {\n      data.options = params.options\n    }\n\n    return data\n  }\n\n  cancel(client, query) {\n    if (client.activeQuery === query) {\n      var con = this.connection\n\n      if (this.host && this.host.indexOf('/') === 0) {\n        con.connect(this.host + '/.s.PGSQL.' + this.port)\n      } else {\n        con.connect(this.port, this.host)\n      }\n\n      // once connection is established send cancel message\n      con.on('connect', function () {\n        con.cancel(client.processID, client.secretKey)\n      })\n    } else if (client.queryQueue.indexOf(query) !== -1) {\n      client.queryQueue.splice(client.queryQueue.indexOf(query), 1)\n    }\n  }\n\n  setTypeParser(oid, format, parseFn) {\n    return this._types.setTypeParser(oid, format, parseFn)\n  }\n\n  getTypeParser(oid, format) {\n    return this._types.getTypeParser(oid, format)\n  }\n\n  // escapeIdentifier and escapeLiteral moved to utility functions & exported\n  // on PG\n  // re-exported here for backwards compatibility\n  escapeIdentifier(str) {\n    return utils.escapeIdentifier(str)\n  }\n\n  escapeLiteral(str) {\n    return utils.escapeLiteral(str)\n  }\n\n  _pulseQueryQueue() {\n    if (this.readyForQuery === true) {\n      this.activeQuery = this.queryQueue.shift()\n      if (this.activeQuery) {\n        this.readyForQuery = false\n        this.hasExecuted = true\n\n        const queryError = this.activeQuery.submit(this.connection)\n        if (queryError) {\n          process.nextTick(() => {\n            this.activeQuery.handleError(queryError, this.connection)\n            this.readyForQuery = true\n            this._pulseQueryQueue()\n          })\n        }\n      } else if (this.hasExecuted) {\n        this.activeQuery = null\n        this.emit('drain')\n      }\n    }\n  }\n\n  query(config, values, callback) {\n    // can take in strings, config object or query object\n    var query\n    var result\n    var readTimeout\n    var readTimeoutTimer\n    var queryCallback\n\n    if (config === null || config === undefined) {\n      throw new TypeError('Client was passed a null or undefined query')\n    } else if (typeof config.submit === 'function') {\n      readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n      result = query = config\n      if (typeof values === 'function') {\n        query.callback = query.callback || values\n      }\n    } else {\n      readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n      query = new Query(config, values, callback)\n      if (!query.callback) {\n        result = new this._Promise((resolve, reject) => {\n          query.callback = (err, res) => (err ? reject(err) : resolve(res))\n        }).catch((err) => {\n          // replace the stack trace that leads to `TCP.onStreamRead` with one that leads back to the\n          // application that created the query\n          Error.captureStackTrace(err)\n          throw err\n        })\n      }\n    }\n\n    if (readTimeout) {\n      queryCallback = query.callback\n\n      readTimeoutTimer = setTimeout(() => {\n        var error = new Error('Query read timeout')\n\n        process.nextTick(() => {\n          query.handleError(error, this.connection)\n        })\n\n        queryCallback(error)\n\n        // we already returned an error,\n        // just do nothing if query completes\n        query.callback = () => {}\n\n        // Remove from queue\n        var index = this.queryQueue.indexOf(query)\n        if (index > -1) {\n          this.queryQueue.splice(index, 1)\n        }\n\n        this._pulseQueryQueue()\n      }, readTimeout)\n\n      query.callback = (err, res) => {\n        clearTimeout(readTimeoutTimer)\n        queryCallback(err, res)\n      }\n    }\n\n    if (this.binary && !query.binary) {\n      query.binary = true\n    }\n\n    if (query._result && !query._result._types) {\n      query._result._types = this._types\n    }\n\n    if (!this._queryable) {\n      process.nextTick(() => {\n        query.handleError(new Error('Client has encountered a connection error and is not queryable'), this.connection)\n      })\n      return result\n    }\n\n    if (this._ending) {\n      process.nextTick(() => {\n        query.handleError(new Error('Client was closed and is not queryable'), this.connection)\n      })\n      return result\n    }\n\n    this.queryQueue.push(query)\n    this._pulseQueryQueue()\n    return result\n  }\n\n  ref() {\n    this.connection.ref()\n  }\n\n  unref() {\n    this.connection.unref()\n  }\n\n  end(cb) {\n    this._ending = true\n\n    // if we have never connected, then end is a noop, callback immediately\n    if (!this.connection._connecting || this._ended) {\n      if (cb) {\n        cb()\n      } else {\n        return this._Promise.resolve()\n      }\n    }\n\n    if (this.activeQuery || !this._queryable) {\n      // if we have an active query we need to force a disconnect\n      // on the socket - otherwise a hung query could block end forever\n      this.connection.stream.destroy()\n    } else {\n      this.connection.end()\n    }\n\n    if (cb) {\n      this.connection.once('end', cb)\n    } else {\n      return new this._Promise((resolve) => {\n        this.connection.once('end', resolve)\n      })\n    }\n  }\n}\n\n// expose a Query constructor\nClient.Query = Query\n\nmodule.exports = Client\n", "'use strict'\nconst EventEmitter = require('events').EventEmitter\n\nconst NOOP = function () {}\n\nconst removeWhere = (list, predicate) => {\n  const i = list.findIndex(predicate)\n\n  return i === -1 ? undefined : list.splice(i, 1)[0]\n}\n\nclass IdleItem {\n  constructor(client, idleListener, timeoutId) {\n    this.client = client\n    this.idleListener = idleListener\n    this.timeoutId = timeoutId\n  }\n}\n\nclass PendingItem {\n  constructor(callback) {\n    this.callback = callback\n  }\n}\n\nfunction throwOnDoubleRelease() {\n  throw new Error('Release called on client which has already been released to the pool.')\n}\n\nfunction promisify(Promise, callback) {\n  if (callback) {\n    return { callback: callback, result: undefined }\n  }\n  let rej\n  let res\n  const cb = function (err, client) {\n    err ? rej(err) : res(client)\n  }\n  const result = new Promise(function (resolve, reject) {\n    res = resolve\n    rej = reject\n  }).catch((err) => {\n    // replace the stack trace that leads to `TCP.onStreamRead` with one that leads back to the\n    // application that created the query\n    Error.captureStackTrace(err)\n    throw err\n  })\n  return { callback: cb, result: result }\n}\n\nfunction makeIdleListener(pool, client) {\n  return function idleListener(err) {\n    err.client = client\n\n    client.removeListener('error', idleListener)\n    client.on('error', () => {\n      pool.log('additional client error after disconnection due to error', err)\n    })\n    pool._remove(client)\n    // TODO - document that once the pool emits an error\n    // the client has already been closed & purged and is unusable\n    pool.emit('error', err, client)\n  }\n}\n\nclass Pool extends EventEmitter {\n  constructor(options, Client) {\n    super()\n    this.options = Object.assign({}, options)\n\n    if (options != null && 'password' in options) {\n      // \"hiding\" the password so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options, 'password', {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: options.password,\n      })\n    }\n    if (options != null && options.ssl && options.ssl.key) {\n      // \"hiding\" the ssl->key so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.options.max = this.options.max || this.options.poolSize || 10\n    this.options.maxUses = this.options.maxUses || Infinity\n    this.options.allowExitOnIdle = this.options.allowExitOnIdle || false\n    this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0\n    this.log = this.options.log || function () {}\n    this.Client = this.options.Client || Client || require('pg').Client\n    this.Promise = this.options.Promise || global.Promise\n\n    if (typeof this.options.idleTimeoutMillis === 'undefined') {\n      this.options.idleTimeoutMillis = 10000\n    }\n\n    this._clients = []\n    this._idle = []\n    this._expired = new WeakSet()\n    this._pendingQueue = []\n    this._endCallback = undefined\n    this.ending = false\n    this.ended = false\n  }\n\n  _isFull() {\n    return this._clients.length >= this.options.max\n  }\n\n  _pulseQueue() {\n    this.log('pulse queue')\n    if (this.ended) {\n      this.log('pulse queue ended')\n      return\n    }\n    if (this.ending) {\n      this.log('pulse queue on ending')\n      if (this._idle.length) {\n        this._idle.slice().map((item) => {\n          this._remove(item.client)\n        })\n      }\n      if (!this._clients.length) {\n        this.ended = true\n        this._endCallback()\n      }\n      return\n    }\n\n    // if we don't have any waiting, do nothing\n    if (!this._pendingQueue.length) {\n      this.log('no queued requests')\n      return\n    }\n    // if we don't have any idle clients and we have no more room do nothing\n    if (!this._idle.length && this._isFull()) {\n      return\n    }\n    const pendingItem = this._pendingQueue.shift()\n    if (this._idle.length) {\n      const idleItem = this._idle.pop()\n      clearTimeout(idleItem.timeoutId)\n      const client = idleItem.client\n      client.ref && client.ref()\n      const idleListener = idleItem.idleListener\n\n      return this._acquireClient(client, pendingItem, idleListener, false)\n    }\n    if (!this._isFull()) {\n      return this.newClient(pendingItem)\n    }\n    throw new Error('unexpected condition')\n  }\n\n  _remove(client) {\n    const removed = removeWhere(this._idle, (item) => item.client === client)\n\n    if (removed !== undefined) {\n      clearTimeout(removed.timeoutId)\n    }\n\n    this._clients = this._clients.filter((c) => c !== client)\n    client.end()\n    this.emit('remove', client)\n  }\n\n  connect(cb) {\n    if (this.ending) {\n      const err = new Error('Cannot use a pool after calling end on the pool')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n\n    const response = promisify(this.Promise, cb)\n    const result = response.result\n\n    // if we don't have to connect a new client, don't do so\n    if (this._isFull() || this._idle.length) {\n      // if we have idle clients schedule a pulse immediately\n      if (this._idle.length) {\n        process.nextTick(() => this._pulseQueue())\n      }\n\n      if (!this.options.connectionTimeoutMillis) {\n        this._pendingQueue.push(new PendingItem(response.callback))\n        return result\n      }\n\n      const queueCallback = (err, res, done) => {\n        clearTimeout(tid)\n        response.callback(err, res, done)\n      }\n\n      const pendingItem = new PendingItem(queueCallback)\n\n      // set connection timeout on checking out an existing client\n      const tid = setTimeout(() => {\n        // remove the callback from pending waiters because\n        // we're going to call it with a timeout error\n        removeWhere(this._pendingQueue, (i) => i.callback === queueCallback)\n        pendingItem.timedOut = true\n        response.callback(new Error('timeout exceeded when trying to connect'))\n      }, this.options.connectionTimeoutMillis)\n\n      if (tid.unref) {\n        tid.unref()\n      }\n\n      this._pendingQueue.push(pendingItem)\n      return result\n    }\n\n    this.newClient(new PendingItem(response.callback))\n\n    return result\n  }\n\n  newClient(pendingItem) {\n    const client = new this.Client(this.options)\n    this._clients.push(client)\n    const idleListener = makeIdleListener(this, client)\n\n    this.log('checking client timeout')\n\n    // connection timeout logic\n    let tid\n    let timeoutHit = false\n    if (this.options.connectionTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('ending client due to timeout')\n        timeoutHit = true\n        // force kill the node driver, and let libpq do its teardown\n        client.connection ? client.connection.stream.destroy() : client.end()\n      }, this.options.connectionTimeoutMillis)\n    }\n\n    this.log('connecting new client')\n    client.connect((err) => {\n      if (tid) {\n        clearTimeout(tid)\n      }\n      client.on('error', idleListener)\n      if (err) {\n        this.log('client failed to connect', err)\n        // remove the dead client from our list of clients\n        this._clients = this._clients.filter((c) => c !== client)\n        if (timeoutHit) {\n          err = new Error('Connection terminated due to connection timeout', { cause: err })\n        }\n\n        // this client won\u2019t be released, so move on immediately\n        this._pulseQueue()\n\n        if (!pendingItem.timedOut) {\n          pendingItem.callback(err, undefined, NOOP)\n        }\n      } else {\n        this.log('new client connected')\n\n        if (this.options.maxLifetimeSeconds !== 0) {\n          const maxLifetimeTimeout = setTimeout(() => {\n            this.log('ending client due to expired lifetime')\n            this._expired.add(client)\n            const idleIndex = this._idle.findIndex((idleItem) => idleItem.client === client)\n            if (idleIndex !== -1) {\n              this._acquireClient(\n                client,\n                new PendingItem((err, client, clientRelease) => clientRelease()),\n                idleListener,\n                false\n              )\n            }\n          }, this.options.maxLifetimeSeconds * 1000)\n\n          maxLifetimeTimeout.unref()\n          client.once('end', () => clearTimeout(maxLifetimeTimeout))\n        }\n\n        return this._acquireClient(client, pendingItem, idleListener, true)\n      }\n    })\n  }\n\n  // acquire a client for a pending work item\n  _acquireClient(client, pendingItem, idleListener, isNew) {\n    if (isNew) {\n      this.emit('connect', client)\n    }\n\n    this.emit('acquire', client)\n\n    client.release = this._releaseOnce(client, idleListener)\n\n    client.removeListener('error', idleListener)\n\n    if (!pendingItem.timedOut) {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, (err) => {\n          if (err) {\n            client.release(err)\n            return pendingItem.callback(err, undefined, NOOP)\n          }\n\n          pendingItem.callback(undefined, client, client.release)\n        })\n      } else {\n        pendingItem.callback(undefined, client, client.release)\n      }\n    } else {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, client.release)\n      } else {\n        client.release()\n      }\n    }\n  }\n\n  // returns a function that wraps _release and throws if called more than once\n  _releaseOnce(client, idleListener) {\n    let released = false\n\n    return (err) => {\n      if (released) {\n        throwOnDoubleRelease()\n      }\n\n      released = true\n      this._release(client, idleListener, err)\n    }\n  }\n\n  // release a client back to the poll, include an error\n  // to remove it from the pool\n  _release(client, idleListener, err) {\n    client.on('error', idleListener)\n\n    client._poolUseCount = (client._poolUseCount || 0) + 1\n\n    this.emit('release', err, client)\n\n    // TODO(bmc): expose a proper, public interface _queryable and _ending\n    if (err || this.ending || !client._queryable || client._ending || client._poolUseCount >= this.options.maxUses) {\n      if (client._poolUseCount >= this.options.maxUses) {\n        this.log('remove expended client')\n      }\n      this._remove(client)\n      this._pulseQueue()\n      return\n    }\n\n    const isExpired = this._expired.has(client)\n    if (isExpired) {\n      this.log('remove expired client')\n      this._expired.delete(client)\n      this._remove(client)\n      this._pulseQueue()\n      return\n    }\n\n    // idle timeout\n    let tid\n    if (this.options.idleTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('remove idle client')\n        this._remove(client)\n      }, this.options.idleTimeoutMillis)\n\n      if (this.options.allowExitOnIdle) {\n        // allow Node to exit if this is all that's left\n        tid.unref()\n      }\n    }\n\n    if (this.options.allowExitOnIdle) {\n      client.unref()\n    }\n\n    this._idle.push(new IdleItem(client, idleListener, tid))\n    this._pulseQueue()\n  }\n\n  query(text, values, cb) {\n    // guard clause against passing a function as the first parameter\n    if (typeof text === 'function') {\n      const response = promisify(this.Promise, text)\n      setImmediate(function () {\n        return response.callback(new Error('Passing a function as the first parameter to pool.query is not supported'))\n      })\n      return response.result\n    }\n\n    // allow plain text query without values\n    if (typeof values === 'function') {\n      cb = values\n      values = undefined\n    }\n    const response = promisify(this.Promise, cb)\n    cb = response.callback\n\n    this.connect((err, client) => {\n      if (err) {\n        return cb(err)\n      }\n\n      let clientReleased = false\n      const onError = (err) => {\n        if (clientReleased) {\n          return\n        }\n        clientReleased = true\n        client.release(err)\n        cb(err)\n      }\n\n      client.once('error', onError)\n      this.log('dispatching query')\n      try {\n        client.query(text, values, (err, res) => {\n          this.log('query dispatched')\n          client.removeListener('error', onError)\n          if (clientReleased) {\n            return\n          }\n          clientReleased = true\n          client.release(err)\n          if (err) {\n            return cb(err)\n          }\n          return cb(undefined, res)\n        })\n      } catch (err) {\n        client.release(err)\n        return cb(err)\n      }\n    })\n    return response.result\n  }\n\n  end(cb) {\n    this.log('ending')\n    if (this.ending) {\n      const err = new Error('Called end on pool more than once')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n    this.ending = true\n    const promised = promisify(this.Promise, cb)\n    this._endCallback = promised.callback\n    this._pulseQueue()\n    return promised.result\n  }\n\n  get waitingCount() {\n    return this._pendingQueue.length\n  }\n\n  get idleCount() {\n    return this._idle.length\n  }\n\n  get expiredCount() {\n    return this._clients.reduce((acc, client) => acc + (this._expired.has(client) ? 1 : 0), 0)\n  }\n\n  get totalCount() {\n    return this._clients.length\n  }\n}\nmodule.exports = Pool\n", "'use strict'\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar utils = require('../utils')\n\nvar NativeQuery = (module.exports = function (config, values, callback) {\n  EventEmitter.call(this)\n  config = utils.normalizeQueryConfig(config, values, callback)\n  this.text = config.text\n  this.values = config.values\n  this.name = config.name\n  this.queryMode = config.queryMode\n  this.callback = config.callback\n  this.state = 'new'\n  this._arrayMode = config.rowMode === 'array'\n\n  // if the 'row' event is listened for\n  // then emit them as they come in\n  // without setting singleRowMode to true\n  // this has almost no meaning because libpq\n  // reads all rows into memory befor returning any\n  this._emitRowEvents = false\n  this.on(\n    'newListener',\n    function (event) {\n      if (event === 'row') this._emitRowEvents = true\n    }.bind(this)\n  )\n})\n\nutil.inherits(NativeQuery, EventEmitter)\n\nvar errorFieldMap = {\n  /* eslint-disable quote-props */\n  sqlState: 'code',\n  statementPosition: 'position',\n  messagePrimary: 'message',\n  context: 'where',\n  schemaName: 'schema',\n  tableName: 'table',\n  columnName: 'column',\n  dataTypeName: 'dataType',\n  constraintName: 'constraint',\n  sourceFile: 'file',\n  sourceLine: 'line',\n  sourceFunction: 'routine',\n}\n\nNativeQuery.prototype.handleError = function (err) {\n  // copy pq error fields into the error object\n  var fields = this.native.pq.resultErrorFields()\n  if (fields) {\n    for (var key in fields) {\n      var normalizedFieldName = errorFieldMap[key] || key\n      err[normalizedFieldName] = fields[key]\n    }\n  }\n  if (this.callback) {\n    this.callback(err)\n  } else {\n    this.emit('error', err)\n  }\n  this.state = 'error'\n}\n\nNativeQuery.prototype.then = function (onSuccess, onFailure) {\n  return this._getPromise().then(onSuccess, onFailure)\n}\n\nNativeQuery.prototype.catch = function (callback) {\n  return this._getPromise().catch(callback)\n}\n\nNativeQuery.prototype._getPromise = function () {\n  if (this._promise) return this._promise\n  this._promise = new Promise(\n    function (resolve, reject) {\n      this._once('end', resolve)\n      this._once('error', reject)\n    }.bind(this)\n  )\n  return this._promise\n}\n\nNativeQuery.prototype.submit = function (client) {\n  this.state = 'running'\n  var self = this\n  this.native = client.native\n  client.native.arrayMode = this._arrayMode\n\n  var after = function (err, rows, results) {\n    client.native.arrayMode = false\n    setImmediate(function () {\n      self.emit('_done')\n    })\n\n    // handle possible query error\n    if (err) {\n      return self.handleError(err)\n    }\n\n    // emit row events for each row in the result\n    if (self._emitRowEvents) {\n      if (results.length > 1) {\n        rows.forEach((rowOfRows, i) => {\n          rowOfRows.forEach((row) => {\n            self.emit('row', row, results[i])\n          })\n        })\n      } else {\n        rows.forEach(function (row) {\n          self.emit('row', row, results)\n        })\n      }\n    }\n\n    // handle successful result\n    self.state = 'end'\n    self.emit('end', results)\n    if (self.callback) {\n      self.callback(null, results)\n    }\n  }\n\n  if (process.domain) {\n    after = process.domain.bind(after)\n  }\n\n  // named query\n  if (this.name) {\n    if (this.name.length > 63) {\n      /* eslint-disable no-console */\n      console.error('Warning! Postgres only supports 63 characters for query names.')\n      console.error('You supplied %s (%s)', this.name, this.name.length)\n      console.error('This can cause conflicts and silent errors executing queries')\n      /* eslint-enable no-console */\n    }\n    var values = (this.values || []).map(utils.prepareValue)\n\n    // check if the client has already executed this named query\n    // if so...just execute it again - skip the planning phase\n    if (client.namedQueries[this.name]) {\n      if (this.text && client.namedQueries[this.name] !== this.text) {\n        const err = new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`)\n        return after(err)\n      }\n      return client.native.execute(this.name, values, after)\n    }\n    // plan the named query the first time, then execute it\n    return client.native.prepare(this.name, this.text, values.length, function (err) {\n      if (err) return after(err)\n      client.namedQueries[self.name] = self.text\n      return self.native.execute(self.name, values, after)\n    })\n  } else if (this.values) {\n    if (!Array.isArray(this.values)) {\n      const err = new Error('Query values must be an array')\n      return after(err)\n    }\n    var vals = this.values.map(utils.prepareValue)\n    client.native.query(this.text, vals, after)\n  } else if (this.queryMode === 'extended') {\n    client.native.query(this.text, [], after)\n  } else {\n    client.native.query(this.text, after)\n  }\n}\n", "'use strict'\n\n// eslint-disable-next-line\nvar Native\ntry {\n  // Wrap this `require()` in a try-catch to avoid upstream bundlers from complaining that this might not be available since it is an optional import\n  Native = require('pg-native')\n} catch (e) {\n  throw e\n}\nvar TypeOverrides = require('../type-overrides')\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar ConnectionParameters = require('../connection-parameters')\n\nvar NativeQuery = require('./query')\n\nvar Client = (module.exports = function (config) {\n  EventEmitter.call(this)\n  config = config || {}\n\n  this._Promise = config.Promise || global.Promise\n  this._types = new TypeOverrides(config.types)\n\n  this.native = new Native({\n    types: this._types,\n  })\n\n  this._queryQueue = []\n  this._ending = false\n  this._connecting = false\n  this._connected = false\n  this._queryable = true\n\n  // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n  var cp = (this.connectionParameters = new ConnectionParameters(config))\n  if (config.nativeConnectionString) cp.nativeConnectionString = config.nativeConnectionString\n  this.user = cp.user\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: cp.password,\n  })\n  this.database = cp.database\n  this.host = cp.host\n  this.port = cp.port\n\n  // a hash to hold named queries\n  this.namedQueries = {}\n})\n\nClient.Query = NativeQuery\n\nutil.inherits(Client, EventEmitter)\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = (query) => {\n    process.nextTick(() => {\n      query.native = this.native\n      query.handleError(err)\n    })\n  }\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery)\n    this._activeQuery = null\n  }\n\n  this._queryQueue.forEach(enqueueError)\n  this._queryQueue.length = 0\n}\n\n// connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\nClient.prototype._connect = function (cb) {\n  var self = this\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')))\n    return\n  }\n\n  this._connecting = true\n\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (self.connectionParameters.nativeConnectionString) conString = self.connectionParameters.nativeConnectionString\n    if (err) return cb(err)\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end()\n        return cb(err)\n      }\n\n      // set internal states to connected\n      self._connected = true\n\n      // handle connection errors from the native layer\n      self.native.on('error', function (err) {\n        self._queryable = false\n        self._errorAllQueries(err)\n        self.emit('error', err)\n      })\n\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra,\n        })\n      })\n\n      // signal we are connected now\n      self.emit('connect')\n      self._pulseQueryQueue(true)\n\n      cb()\n    })\n  })\n}\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback)\n    return\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect((error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\n// send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function (config, values, callback) {\n  var query\n  var result\n  var readTimeout\n  var readTimeoutTimer\n  var queryCallback\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query')\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    result = query = config\n    // accept query(new Query(...), (err, res) => { }) style\n    if (typeof values === 'function') {\n      config.callback = values\n    }\n  } else {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    query = new NativeQuery(config, values, callback)\n    if (!query.callback) {\n      let resolveOut, rejectOut\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve\n        rejectOut = reject\n      }).catch((err) => {\n        Error.captureStackTrace(err)\n        throw err\n      })\n      query.callback = (err, res) => (err ? rejectOut(err) : resolveOut(res))\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback\n\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout')\n\n      process.nextTick(() => {\n        query.handleError(error, this.connection)\n      })\n\n      queryCallback(error)\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {}\n\n      // Remove from queue\n      var index = this._queryQueue.indexOf(query)\n      if (index > -1) {\n        this._queryQueue.splice(index, 1)\n      }\n\n      this._pulseQueryQueue()\n    }, readTimeout)\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer)\n      queryCallback(err, res)\n    }\n  }\n\n  if (!this._queryable) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'))\n    })\n    return result\n  }\n\n  if (this._ending) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'))\n    })\n    return result\n  }\n\n  this._queryQueue.push(query)\n  this._pulseQueryQueue()\n  return result\n}\n\n// disconnect from the backend server\nClient.prototype.end = function (cb) {\n  var self = this\n\n  this._ending = true\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb))\n  }\n  var result\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = (err) => (err ? reject(err) : resolve())\n    })\n  }\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'))\n\n    process.nextTick(() => {\n      self.emit('end')\n      if (cb) cb()\n    })\n  })\n  return result\n}\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end'\n}\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return\n  }\n  if (this._hasActiveQuery()) {\n    return\n  }\n  var query = this._queryQueue.shift()\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain')\n    }\n    return\n  }\n  this._activeQuery = query\n  query.submit(this)\n  var self = this\n  query.once('_done', function () {\n    self._pulseQueryQueue()\n  })\n}\n\n// attempt to cancel an in-progress query\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {})\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1)\n  }\n}\n\nClient.prototype.ref = function () {}\nClient.prototype.unref = function () {}\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn)\n}\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format)\n}\n", "'use strict'\nmodule.exports = require('./client')\n", "'use strict'\n\nvar Client = require('./client')\nvar defaults = require('./defaults')\nvar Connection = require('./connection')\nvar Pool = require('pg-pool')\nconst { DatabaseError } = require('pg-protocol')\nconst { escapeIdentifier, escapeLiteral } = require('./utils')\n\nconst poolFactory = (Client) => {\n  return class BoundPool extends Pool {\n    constructor(options) {\n      super(options, Client)\n    }\n  }\n}\n\nvar PG = function (clientConstructor) {\n  this.defaults = defaults\n  this.Client = clientConstructor\n  this.Query = this.Client.Query\n  this.Pool = poolFactory(this.Client)\n  this._pools = []\n  this.Connection = Connection\n  this.types = require('pg-types')\n  this.DatabaseError = DatabaseError\n  this.escapeIdentifier = escapeIdentifier\n  this.escapeLiteral = escapeLiteral\n}\n\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(require('./native'))\n} else {\n  module.exports = new PG(Client)\n\n  // lazy require native module...the native module may not have installed\n  Object.defineProperty(module.exports, 'native', {\n    configurable: true,\n    enumerable: false,\n    get() {\n      var native = null\n      try {\n        native = new PG(require('./native'))\n      } catch (err) {\n        if (err.code !== 'MODULE_NOT_FOUND') {\n          throw err\n        }\n      }\n\n      // overwrite module.exports.native so that getter is never called again\n      Object.defineProperty(module.exports, 'native', {\n        value: native,\n      })\n\n      return native\n    },\n  })\n}\n", "import * as vscode from 'vscode';\nimport { Client } from 'pg';\nimport { ConnectionFormPanel } from './connectionForm';\nimport { DatabaseTreeProvider, DatabaseTreeItem } from './databaseTreeProvider';\nimport { TablePropertiesPanel } from './tableProperties';\nimport { PostgresNotebookProvider } from './notebookProvider';\nimport { PostgresKernel } from './notebookKernel';\nimport { PostgresNotebookSerializer } from './postgresNotebook';\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('postgres-explorer: Activating extension');\n    \n    // Create kernel with message handler to handle notebook cell output messages\n    const kernel = new PostgresKernel((message) => {\n        console.log('Extension: Received message from kernel:', message);\n        if (message.type === 'custom' && message.command === 'export') {\n            console.log('Extension: Handling export command');\n            vscode.commands.executeCommand('postgres-explorer.exportData', {\n                format: message.format,\n                content: message.content,\n                filename: message.filename\n            });\n        }\n    });\n    context.subscriptions.push(kernel);\n\n    // Register global command to handle exports\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.exportData', async (args) => {\n            console.log('Extension: Export command triggered with args:', args);\n            try {\n                const { format, content, filename } = args;\n                const saveUri = await vscode.window.showSaveDialog({\n                    defaultUri: vscode.Uri.file(filename),\n                    filters: {\n                        'CSV files': ['csv'],\n                        'Excel files': ['xls', 'xlsx']\n                    },\n                    saveLabel: `Export as ${format.toUpperCase()}`\n                });\n\n                console.log('Extension: Save dialog result:', saveUri?.fsPath);\n                if (saveUri) {\n                    console.log('Extension: Writing file content, size:', content.length);\n                    await vscode.workspace.fs.writeFile(\n                        saveUri,\n                        Buffer.from(content, 'utf-8')\n                    );\n                    console.log('Extension: File written successfully');\n                    vscode.window.showInformationMessage(\n                        `Successfully exported to ${saveUri.fsPath}`\n                    );\n                }\n            } catch (err: any) {\n                console.error('Extension: Export failed:', err);\n                vscode.window.showErrorMessage(`Export failed: ${err.message}`);\n            }\n        })\n    );\n\n    // Register save file command\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.saveFile', async (args) => {\n            try {\n                console.log('Saving file with args:', args);\n                const { content, filename, type } = args;\n                \n                const saveUri = await vscode.window.showSaveDialog({\n                    defaultUri: vscode.Uri.file(filename),\n                    filters: {\n                        'CSV files': ['csv'],\n                        'Excel files': ['xls', 'xlsx']\n                    },\n                    saveLabel: `Export as ${type.toUpperCase()}`\n                });\n\n                if (saveUri) {\n                    await vscode.workspace.fs.writeFile(\n                        saveUri,\n                        Buffer.from(content)\n                    );\n                    vscode.window.showInformationMessage(`Successfully exported to ${saveUri.fsPath}`);\n                }\n            } catch (err: any) {\n                console.error('Save file failed:', err);\n                vscode.window.showErrorMessage(`Export failed: ${err.message}`);\n            }\n        })\n    );\n\n    const databaseTreeProvider = new DatabaseTreeProvider();\n    \n    // Register notebook provider\n    const notebookProvider = new PostgresNotebookProvider();\n    context.subscriptions.push(\n        vscode.workspace.registerNotebookSerializer('postgres-notebook', notebookProvider)\n    );\n\n    // Register notebook serializer\n    context.subscriptions.push(\n        vscode.workspace.registerNotebookSerializer('postgres-query', new PostgresNotebookSerializer())\n    );\n\n    // Register commands\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.addConnection', () => {\n            // Show connection form when + button is clicked\n            ConnectionFormPanel.show(context.extensionUri);\n        })\n    );\n\n    // Add the + button to the view title\n    context.subscriptions.push(\n        vscode.window.registerTreeDataProvider('postgresExplorer', databaseTreeProvider)\n    );\n\n    // Register view container\n    const treeView = vscode.window.createTreeView('postgresExplorer', {\n        treeDataProvider: databaseTreeProvider,\n        showCollapseAll: true\n    });\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.refreshConnections', () => {\n            databaseTreeProvider.refresh();\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.showTableProperties', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid table selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            let client: Client | undefined;\n            try {\n                client = new Client({\n                    host: connection.host,\n                    port: connection.port,\n                    user: connection.username,\n                    password: String(connection.password),\n                    database: item.databaseName || connection.database,\n                    connectionTimeoutMillis: 5000\n                });\n\n                await client.connect();\n                \n                // Pass the connected client to TablePropertiesPanel\n                await TablePropertiesPanel.show(client, item.schema!, item.label);\n            } catch (err: any) {\n                const errorMessage = err?.message || 'Unknown error occurred';\n                vscode.window.showErrorMessage(`Failed to show table properties: ${errorMessage}`);\n                \n                if (client) {\n                    try {\n                        await client.end();\n                    } catch (closeErr) {\n                        console.error('Error closing connection:', closeErr);\n                    }\n                }\n            }\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.showViewProperties', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid view selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            let client: Client | undefined;\n            try {\n                client = new Client({\n                    host: connection.host,\n                    port: connection.port,\n                    user: connection.username,\n                    password: String(connection.password),\n                    database: item.databaseName || connection.database,\n                    connectionTimeoutMillis: 5000\n                });\n\n                await client.connect();\n                \n                // Pass the connected client to TablePropertiesPanel with isView flag\n                await TablePropertiesPanel.show(client, item.schema!, item.label, true);\n            } catch (err: any) {\n                const errorMessage = err?.message || 'Unknown error occurred';\n                vscode.window.showErrorMessage(`Failed to show view properties: ${errorMessage}`);\n                \n                if (client) {\n                    try {\n                        await client.end();\n                    } catch (closeErr) {\n                        console.error('Error closing connection:', closeErr);\n                    }\n                }\n            }\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.showFunctionProperties', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid function selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            let client: Client | undefined;\n            try {\n                client = new Client({\n                    host: connection.host,\n                    port: connection.port,\n                    user: connection.username,\n                    password: String(connection.password),\n                    database: item.databaseName || connection.database,\n                    connectionTimeoutMillis: 5000\n                });\n\n                await client.connect();\n                \n                // Pass the connected client to TablePropertiesPanel with isFunction flag\n                await TablePropertiesPanel.show(client, item.schema!, item.label, false, true);\n            } catch (err: any) {\n                const errorMessage = err?.message || 'Unknown error occurred';\n                vscode.window.showErrorMessage(`Failed to show function properties: ${errorMessage}`);\n                \n                if (client) {\n                    try {\n                        await client.end();\n                    } catch (closeErr) {\n                        console.error('Error closing connection:', closeErr);\n                    }\n                }\n            }\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.connect', async () => {\n            try {\n                const connectionString = await vscode.window.showInputBox({\n                    prompt: 'Enter PostgreSQL connection string',\n                    placeHolder: 'postgresql://user:password@localhost:5432/dbname'\n                });\n\n                if (!connectionString) {\n                    return;\n                }\n\n                const client = new Client(connectionString);\n                await client.connect();\n                vscode.window.showInformationMessage('Connected to PostgreSQL database');\n                databaseTreeProvider.refresh();\n                await client.end();\n            } catch (err: any) {\n                const errorMessage = err?.message || 'Unknown error occurred';\n                vscode.window.showErrorMessage(`Failed to connect: ${errorMessage}`);\n            }\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.disconnect', async () => {\n            databaseTreeProvider.refresh();\n            vscode.window.showInformationMessage('Disconnected from PostgreSQL database');\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.refresh', () => {\n            databaseTreeProvider.refresh();\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.queryTable', async (item: any) => {\n            if (!item || !item.schema) {\n                return;\n            }\n\n            const query = `SELECT * FROM ${item.schema}.${item.label} LIMIT 100;`;\n            const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', new vscode.NotebookData([\n                new vscode.NotebookCellData(vscode.NotebookCellKind.Code, query, 'sql')\n            ]));\n            await vscode.window.showNotebookDocument(notebook);\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.newNotebook', async (item: any) => {\n            if (!item) {\n                vscode.window.showErrorMessage('Please select a database, schema, or table to create a notebook');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            // Create notebook with connection metadata\n            const metadata = {\n                connectionId: item.connectionId,\n                databaseName: item.databaseName || item.label,\n                host: connection.host,\n                port: connection.port,\n                username: connection.username,\n                password: connection.password\n            };\n\n            const notebookData = new vscode.NotebookData([\n                new vscode.NotebookCellData(vscode.NotebookCellKind.Code, `-- Connected to database: ${metadata.databaseName}\n-- Write your SQL query here\nSELECT * FROM ${item.schema ? `${item.schema}.${item.label}` : 'your_table'}\nLIMIT 100;`, 'sql')\n            ]);\n            notebookData.metadata = metadata;\n\n            const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n            await vscode.window.showNotebookDocument(notebook);\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.deleteConnection', async (item: DatabaseTreeItem) => {\n            const answer = await vscode.window.showWarningMessage(\n                `Are you sure you want to delete connection '${item.label}'?`,\n                'Yes', 'No'\n            );\n            \n            if (answer === 'Yes') {\n                const config = vscode.workspace.getConfiguration();\n                const connections = config.get<any[]>('postgresExplorer.connections') || [];\n                const updatedConnections = connections.filter(c => c.id !== item.connectionId);\n                await config.update('postgresExplorer.connections', updatedConnections, vscode.ConfigurationTarget.Global);\n                databaseTreeProvider.refresh();\n            }\n        })\n    );\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('postgres-explorer.functionOperations', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid function selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            let client: Client | undefined;\n            try {\n                client = new Client({\n                    host: connection.host,\n                    port: connection.port,\n                    user: connection.username,\n                    password: String(connection.password),\n                    database: item.databaseName || connection.database,\n                    connectionTimeoutMillis: 5000\n                });\n\n                await client.connect();\n                \n                // Get function details for CREATE OR REPLACE statement\n                const functionQuery = `\n                    SELECT p.proname,\n                           pg_get_function_arguments(p.oid) as arguments,\n                           pg_get_function_result(p.oid) as result_type,\n                           pg_get_functiondef(p.oid) as definition\n                    FROM pg_proc p\n                    WHERE p.proname = $1\n                    AND p.pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = $2)`;\n\n                const functionResult = await client.query(functionQuery, [item.label, item.schema]);\n                if (functionResult.rows.length === 0) {\n                    throw new Error('Function not found');\n                }\n\n                const functionInfo = functionResult.rows[0];\n                \n                // Create notebook with function operations\n                const metadata = {\n                    connectionId: item.connectionId,\n                    databaseName: item.databaseName,\n                    host: connection.host,\n                    port: connection.port,\n                    username: connection.username,\n                    password: connection.password\n                };\n\n                const notebookData = new vscode.NotebookData([\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Markup,\n                        `# Function Operations: ${item.schema}.${item.label}\\n\\nThis notebook contains common operations for the PostgreSQL function:\\n- Create or replace function\\n- Call function\\n- Drop function`,\n                        'markdown'\n                    ),\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Code,\n                        `-- Create or replace function\\n${functionInfo.definition}`,\n                        'sql'\n                    ),\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Code,\n                        `-- Call function\\nSELECT ${item.schema}.${item.label}(${functionInfo.arguments ? '\\n  -- Replace with actual values:\\n  ' + functionInfo.arguments.split(',').join(',\\n  ') : ''});`,\n                        'sql'\n                    ),\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Code,\n                        `-- Drop function\\nDROP FUNCTION IF EXISTS ${item.schema}.${item.label}(${functionInfo.arguments});`,\n                        'sql'\n                    )\n                ]);\n                notebookData.metadata = metadata;\n\n                const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n                await vscode.window.showNotebookDocument(notebook);\n            } catch (err: any) {\n                const errorMessage = err?.message || 'Unknown error occurred';\n                vscode.window.showErrorMessage(`Failed to create function operations notebook: ${errorMessage}`);\n                \n                if (client) {\n                    try {\n                        await client.end();\n                    } catch (closeErr) {\n                        console.error('Error closing connection:', closeErr);\n                    }\n                }\n            }\n        })\n    );\n\n    context.subscriptions.push(\n        // ...existing commands...\n        vscode.commands.registerCommand('postgres-explorer.createReplaceFunction', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid function selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            let client: Client | undefined;\n            try {\n                client = new Client({\n                    host: connection.host,\n                    port: connection.port,\n                    user: connection.username,\n                    password: String(connection.password),\n                    database: item.databaseName || connection.database,\n                    connectionTimeoutMillis: 5000\n                });\n\n                await client.connect();\n                \n                // Get function definition\n                const functionQuery = `\n                    SELECT pg_get_functiondef(p.oid) as definition\n                    FROM pg_proc p\n                    WHERE p.proname = $1\n                    AND p.pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = $2)`;\n\n                const functionResult = await client.query(functionQuery, [item.label, item.schema]);\n                if (functionResult.rows.length === 0) {\n                    throw new Error('Function not found');\n                }\n\n                const functionInfo = functionResult.rows[0];\n                \n                // Create notebook with function definition\n                const metadata = {\n                    connectionId: item.connectionId,\n                    databaseName: item.databaseName,\n                    host: connection.host,\n                    port: connection.port,\n                    username: connection.username,\n                    password: connection.password\n                };\n\n                const notebookData = new vscode.NotebookData([\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Markup,\n                        `# Edit Function: ${item.schema}.${item.label}\\n\\nModify the function definition below and execute the cell to update the function.`,\n                        'markdown'\n                    ),\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Code,\n                        functionInfo.definition,\n                        'sql'\n                    )\n                ]);\n                notebookData.metadata = metadata;\n\n                const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n                await vscode.window.showNotebookDocument(notebook);\n            } catch (err: any) {\n                const errorMessage = err?.message || 'Unknown error occurred';\n                vscode.window.showErrorMessage(`Failed to create function edit notebook: ${errorMessage}`);\n                \n                if (client) {\n                    try {\n                        await client.end();\n                    } catch (closeErr) {\n                        console.error('Error closing connection:', closeErr);\n                    }\n                }\n            }\n        }),\n\n        vscode.commands.registerCommand('postgres-explorer.callFunction', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid function selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            let client: Client | undefined;\n            try {\n                client = new Client({\n                    host: connection.host,\n                    port: connection.port,\n                    user: connection.username,\n                    password: String(connection.password),\n                    database: item.databaseName || connection.database,\n                    connectionTimeoutMillis: 5000\n                });\n\n                await client.connect();\n                \n                // Get function arguments\n                const functionQuery = `\n                    SELECT p.proname,\n                           pg_get_function_arguments(p.oid) as arguments,\n                           pg_get_function_result(p.oid) as result_type,\n                           d.description\n                    FROM pg_proc p\n                    LEFT JOIN pg_description d ON p.oid = d.objoid\n                    WHERE p.proname = $1\n                    AND p.pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = $2)`;\n\n                const functionResult = await client.query(functionQuery, [item.label, item.schema]);\n                if (functionResult.rows.length === 0) {\n                    throw new Error('Function not found');\n                }\n\n                const functionInfo = functionResult.rows[0];\n                \n                // Create notebook for calling function\n                const metadata = {\n                    connectionId: item.connectionId,\n                    databaseName: item.databaseName,\n                    host: connection.host,\n                    port: connection.port,\n                    username: connection.username,\n                    password: connection.password\n                };\n\n                const notebookData = new vscode.NotebookData([\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Markup,\n                        `# Call Function: ${item.schema}.${item.label}\\n\\n${functionInfo.description ? '**Description:** ' + functionInfo.description + '\\n\\n' : ''}` +\n                        `**Arguments:** ${functionInfo.arguments || 'None'}\\n` +\n                        `**Returns:** ${functionInfo.result_type}\\n\\n` +\n                        `Edit the argument values below and execute the cell to call the function.`,\n                        'markdown'\n                    ),\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Code,\n                        `-- Call function\nSELECT ${item.schema}.${item.label}(${functionInfo.arguments ? \n    '\\n  -- Replace with actual values:\\n  ' + functionInfo.arguments.split(',').join(',\\n  ') \n    : ''});`,\n                        'sql'\n                    )\n                ]);\n                notebookData.metadata = metadata;\n\n                const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n                await vscode.window.showNotebookDocument(notebook);\n            } catch (err: any) {\n                const errorMessage = err?.message || 'Unknown error occurred';\n                vscode.window.showErrorMessage(`Failed to create function call notebook: ${errorMessage}`);\n                \n                if (client) {\n                    try {\n                        await client.end();\n                    } catch (closeErr) {\n                        console.error('Error closing connection:', closeErr);\n                    }\n                }\n            }\n        }),\n\n        vscode.commands.registerCommand('postgres-explorer.dropFunction', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid function selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            let client: Client | undefined;\n            try {\n                client = new Client({\n                    host: connection.host,\n                    port: connection.port,\n                    user: connection.username,\n                    password: String(connection.password),\n                    database: item.databaseName || connection.database,\n                    connectionTimeoutMillis: 5000\n                });\n\n                await client.connect();\n                \n                // Get function arguments\n                const functionQuery = `\n                    SELECT pg_get_function_arguments(p.oid) as arguments\n                    FROM pg_proc p\n                    WHERE p.proname = $1\n                    AND p.pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = $2)`;\n\n                const functionResult = await client.query(functionQuery, [item.label, item.schema]);\n                if (functionResult.rows.length === 0) {\n                    throw new Error('Function not found');\n                }\n\n                const functionInfo = functionResult.rows[0];\n                \n                // Create notebook for dropping function\n                const metadata = {\n                    connectionId: item.connectionId,\n                    databaseName: item.databaseName,\n                    host: connection.host,\n                    port: connection.port,\n                    username: connection.username,\n                    password: connection.password\n                };\n\n                const notebookData = new vscode.NotebookData([\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Markup,\n                        `# Drop Function: ${item.schema}.${item.label}\\n\\nExecute the cell below to permanently remove this function. This action cannot be undone.`,\n                        'markdown'\n                    ),\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Code,\n                        `-- Drop function\nDROP FUNCTION IF EXISTS ${item.schema}.${item.label}(${functionInfo.arguments});`,\n                        'sql'\n                    )\n                ]);\n                notebookData.metadata = metadata;\n\n                const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n                await vscode.window.showNotebookDocument(notebook);\n            } catch (err: any) {\n                const errorMessage = err?.message || 'Unknown error occurred';\n                vscode.window.showErrorMessage(`Failed to create drop function notebook: ${errorMessage}`);\n                \n                if (client) {\n                    try {\n                        await client.end();\n                    } catch (closeErr) {\n                        console.error('Error closing connection:', closeErr);\n                    }\n                }\n            }\n        }),\n\n        vscode.commands.registerCommand('postgres-explorer.editTableDefinition', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid table selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            let client: Client | undefined;\n            try {\n                client = new Client({\n                    host: connection.host,\n                    port: connection.port,\n                    user: connection.username,\n                    password: String(connection.password),\n                    database: item.databaseName || connection.database,\n                    connectionTimeoutMillis: 5000\n                });\n\n                await client.connect();\n                \n                // Get table definition with all constraints\n                const tableQuery = `\n                    WITH columns AS (\n                        SELECT \n                            c.column_name,\n                            c.data_type,\n                            c.character_maximum_length,\n                            c.numeric_precision,\n                            c.numeric_scale,\n                            c.is_nullable,\n                            c.column_default,\n                            c.ordinal_position,\n                            array_agg(DISTINCT tc.constraint_type) as constraint_types\n                        FROM information_schema.columns c\n                        LEFT JOIN information_schema.key_column_usage kcu \n                            ON c.table_schema = kcu.table_schema \n                            AND c.table_name = kcu.table_name\n                            AND c.column_name = kcu.column_name\n                        LEFT JOIN information_schema.table_constraints tc\n                            ON kcu.constraint_name = tc.constraint_name\n                            AND kcu.table_schema = tc.table_schema\n                            AND kcu.table_name = tc.table_name\n                        WHERE c.table_schema = $1\n                        AND c.table_name = $2\n                        GROUP BY \n                            c.column_name, c.data_type, c.character_maximum_length,\n                            c.numeric_precision, c.numeric_scale, c.is_nullable,\n                            c.column_default, c.ordinal_position\n                    ),\n                    constraints AS (\n                        SELECT \n                            tc.constraint_name,\n                            tc.constraint_type,\n                            array_agg(kcu.column_name ORDER BY kcu.ordinal_position) as columns,\n                            CASE \n                                WHEN tc.constraint_type = 'FOREIGN KEY' THEN\n                                    json_build_object(\n                                        'schema', ccu.table_schema,\n                                        'table', ccu.table_name,\n                                        'columns', array_agg(ccu.column_name ORDER BY kcu.ordinal_position)\n                                    )\n                                ELSE NULL\n                            END as foreign_key_reference\n                        FROM information_schema.table_constraints tc\n                        JOIN information_schema.key_column_usage kcu \n                            ON tc.constraint_name = kcu.constraint_name\n                            AND tc.table_schema = kcu.table_schema\n                            AND tc.table_name = kcu.table_name\n                        LEFT JOIN information_schema.constraint_column_usage ccu\n                            ON tc.constraint_name = ccu.constraint_name\n                            AND tc.constraint_schema = ccu.constraint_schema\n                        WHERE tc.table_schema = $1\n                        AND tc.table_name = $2\n                        GROUP BY tc.constraint_name, tc.constraint_type, ccu.table_schema, ccu.table_name\n                    )\n                    SELECT \n                        columns.*,\n                        json_agg(json_build_object(\n                            'type', c.constraint_type,\n                            'name', c.constraint_name,\n                            'columns', c.columns,\n                            'foreign_key_reference', c.foreign_key_reference\n                        )) as table_constraints\n                    FROM columns\n                    LEFT JOIN constraints c ON c.columns @> ARRAY[columns.column_name]\n                    GROUP BY \n                        columns.column_name, columns.data_type, columns.character_maximum_length,\n                        columns.numeric_precision, columns.numeric_scale, columns.is_nullable,\n                        columns.column_default, columns.ordinal_position, columns.constraint_types\n                    ORDER BY columns.ordinal_position`;\n\n                const tableResult = await client.query(tableQuery, [item.schema, item.label]);\n                if (tableResult.rows.length === 0) {\n                    throw new Error('Table not found');\n                }\n\n                // Generate CREATE TABLE statement with all constraints\n                let tableConstraints = new Map();\n                let columnDefs = [];\n\n                // Process each column and inline column constraints\n                tableResult.rows.forEach(col => {\n                    let colDef = `${col.column_name} ${col.data_type}`;\n                    \n                    // Add length/precision/scale if specified\n                    if (col.character_maximum_length) {\n                        colDef += `(${col.character_maximum_length})`;\n                    } else if (col.numeric_precision) {\n                        colDef += `(${col.numeric_precision}${col.numeric_scale ? `,${col.numeric_scale}` : ''})`;\n                    }\n\n                    // Add NOT NULL constraint\n                    if (col.is_nullable === 'NO') {\n                        colDef += ' NOT NULL';\n                    }\n\n                    // Add column default\n                    if (col.column_default) {\n                        colDef += ` DEFAULT ${col.column_default}`;\n                    }\n\n                    columnDefs.push(colDef);\n\n                    // Process table constraints\n                    if (col.table_constraints && col.table_constraints[0]?.type !== null) {\n                        col.table_constraints.forEach(constraint => {\n                            const key = `${constraint.type}_${constraint.name}`;\n                            if (!tableConstraints.has(key)) {\n                                let constraintDef = `CONSTRAINT ${constraint.name} `;\n                                switch (constraint.type) {\n                                    case 'PRIMARY KEY':\n                                        constraintDef += `PRIMARY KEY (${constraint.columns.join(', ')})`;\n                                        break;\n                                    case 'UNIQUE':\n                                        constraintDef += `UNIQUE (${constraint.columns.join(', ')})`;\n                                        break;\n                                    case 'FOREIGN KEY':\n                                        const ref = constraint.foreign_key_reference;\n                                        constraintDef += `FOREIGN KEY (${constraint.columns.join(', ')}) ` +\n                                            `REFERENCES ${ref.schema}.${ref.table} (${ref.columns.join(', ')})`;\n                                        break;\n                                }\n                                tableConstraints.set(key, constraintDef);\n                            }\n                        });\n                    }\n                });\n\n                // Combine column definitions and table constraints\n                const createTableStatement = [\n                    `CREATE TABLE ${item.schema}.${item.label} (`,\n                    columnDefs.join(',\\n    '),\n                    tableConstraints.size > 0 ? ',' : '',\n                    tableConstraints.size > 0 ? Array.from(tableConstraints.values()).join(',\\n    ') : '',\n                    ');'\n                ].join('\\n    ');\n                \n                // Create notebook for editing table\n                const metadata = {\n                    connectionId: item.connectionId,\n                    databaseName: item.databaseName,\n                    host: connection.host,\n                    port: connection.port,\n                    username: connection.username,\n                    password: connection.password\n                };\n\n                const notebookData = new vscode.NotebookData([\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Markup,\n                        `# Edit Table: ${item.schema}.${item.label}\\n\\nModify the table definition below and execute the cell to update the table structure. Note that this will create a new table - you'll need to migrate the data separately if needed.`,\n                        'markdown'\n                    ),\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Code,\n                        createTableStatement,\n                        'sql'\n                    )\n                ]);\n                notebookData.metadata = metadata;\n\n                const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n                await vscode.window.showNotebookDocument(notebook);\n            } catch (err: any) {\n                const errorMessage = err?.message || 'Unknown error occurred';\n                vscode.window.showErrorMessage(`Failed to create table edit notebook: ${errorMessage}`);\n                \n                if (client) {\n                    try {\n                        await client.end();\n                    } catch (closeErr) {\n                        console.error('Error closing connection:', closeErr);\n                    }\n                }\n            }\n        }),\n\n        vscode.commands.registerCommand('postgres-explorer.viewTableData', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid table selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            // Create notebook for viewing data\n            const metadata = {\n                connectionId: item.connectionId,\n                databaseName: item.databaseName,\n                host: connection.host,\n                port: connection.port,\n                username: connection.username,\n                password: connection.password\n            };\n\n            const notebookData = new vscode.NotebookData([\n                new vscode.NotebookCellData(\n                    vscode.NotebookCellKind.Markup,\n                    `# View Table Data: ${item.schema}.${item.label}\\n\\nModify the query below to filter or transform the data as needed.`,\n                    'markdown'\n                ),\n                new vscode.NotebookCellData(\n                    vscode.NotebookCellKind.Code,\n                    `-- View table data\nSELECT *\nFROM ${item.schema}.${item.label}\nLIMIT 100;`,\n                    'sql'\n                )\n            ]);\n            notebookData.metadata = metadata;\n\n            const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n            await vscode.window.showNotebookDocument(notebook);\n        }),\n\n        vscode.commands.registerCommand('postgres-explorer.dropTable', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid table selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            // Create notebook for dropping table\n            const metadata = {\n                connectionId: item.connectionId,\n                databaseName: item.databaseName,\n                host: connection.host,\n                port: connection.port,\n                username: connection.username,\n                password: connection.password\n            };\n\n            const notebookData = new vscode.NotebookData([\n                new vscode.NotebookCellData(\n                    vscode.NotebookCellKind.Markup,\n                    `# Drop Table: ${item.schema}.${item.label}\\n\\n\u26A0\uFE0F **Warning:** This action will permanently delete the table and all its data. This operation cannot be undone.`,\n                    'markdown'\n                ),\n                new vscode.NotebookCellData(\n                    vscode.NotebookCellKind.Code,\n                    `-- Drop table\nDROP TABLE IF EXISTS ${item.schema}.${item.label};`,\n                    'sql'\n                )\n            ]);\n            notebookData.metadata = metadata;\n\n            const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n            await vscode.window.showNotebookDocument(notebook);\n        }),\n\n        vscode.commands.registerCommand('postgres-explorer.editViewDefinition', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid view selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            let client: Client | undefined;\n            try {\n                client = new Client({\n                    host: connection.host,\n                    port: connection.port,\n                    user: connection.username,\n                    password: String(connection.password),\n                    database: item.databaseName || connection.database,\n                    connectionTimeoutMillis: 5000\n                });\n\n                await client.connect();\n                \n                // Get view definition\n                const viewQuery = `SELECT pg_get_viewdef($1::regclass, true) as definition`;\n                const viewResult = await client.query(viewQuery, [`${item.schema}.${item.label}`]);\n                if (!viewResult.rows[0]?.definition) {\n                    throw new Error('View definition not found');\n                }\n\n                const createViewStatement = `CREATE OR REPLACE VIEW ${item.schema}.${item.label} AS\\n${viewResult.rows[0].definition}`;\n                \n                // Create notebook for editing view\n                const metadata = {\n                    connectionId: item.connectionId,\n                    databaseName: item.databaseName,\n                    host: connection.host,\n                    port: connection.port,\n                    username: connection.username,\n                    password: connection.password\n                };\n\n                const notebookData = new vscode.NotebookData([\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Markup,\n                        `# Edit View: ${item.schema}.${item.label}\\n\\nModify the view definition below and execute the cell to update the view.`,\n                        'markdown'\n                    ),\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Code,\n                        createViewStatement,\n                        'sql'\n                    )\n                ]);\n                notebookData.metadata = metadata;\n\n                const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n                await vscode.window.showNotebookDocument(notebook);\n            } catch (err: any) {\n                const errorMessage = err?.message || 'Unknown error occurred';\n                vscode.window.showErrorMessage(`Failed to create view edit notebook: ${errorMessage}`);\n                \n                if (client) {\n                    try {\n                        await client.end();\n                    } catch (closeErr) {\n                        console.error('Error closing connection:', closeErr);\n                    }\n                }\n            }\n        }),\n\n        vscode.commands.registerCommand('postgres-explorer.viewViewData', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid view selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            // Create notebook for viewing data\n            const metadata = {\n                connectionId: item.connectionId,\n                databaseName: item.databaseName,\n                host: connection.host,\n                port: connection.port,\n                username: connection.username,\n                password: connection.password\n            };\n\n            const notebookData = new vscode.NotebookData([\n                new vscode.NotebookCellData(\n                    vscode.NotebookCellKind.Markup,\n                    `# View Data: ${item.schema}.${item.label}\\n\\nModify the query below to filter or transform the data as needed.`,\n                    'markdown'\n                ),\n                new vscode.NotebookCellData(\n                    vscode.NotebookCellKind.Code,\n                    `-- View data\nSELECT *\nFROM ${item.schema}.${item.label}\nLIMIT 100;`,\n                    'sql'\n                )\n            ]);\n            notebookData.metadata = metadata;\n\n            const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n            await vscode.window.showNotebookDocument(notebook);\n        }),\n\n        vscode.commands.registerCommand('postgres-explorer.dropView', async (item: DatabaseTreeItem) => {\n            if (!item || !item.schema || !item.connectionId) {\n                vscode.window.showErrorMessage('Invalid view selection');\n                return;\n            }\n\n            const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n            const connection = connections.find(c => c.id === item.connectionId);\n            if (!connection) {\n                vscode.window.showErrorMessage('Connection not found');\n                return;\n            }\n\n            // Create notebook for dropping view\n            const metadata = {\n                connectionId: item.connectionId,\n                databaseName: item.databaseName,\n                host: connection.host,\n                port: connection.port,\n                username: connection.username,\n                password: connection.password\n            };\n\n            const notebookData = new vscode.NotebookData([\n                new vscode.NotebookCellData(\n                    vscode.NotebookCellKind.Markup,\n                    `# Drop View: ${item.schema}.${item.label}\\n\\n\u26A0\uFE0F **Warning:** This action will permanently delete the view. This operation cannot be undone.`,\n                    'markdown'\n                ),\n                new vscode.NotebookCellData(\n                    vscode.NotebookCellKind.Code,\n                    `-- Drop view\nDROP VIEW IF EXISTS ${item.schema}.${item.label};`,\n                    'sql'\n                )\n            ]);\n            notebookData.metadata = metadata;\n\n            const notebook = await vscode.workspace.openNotebookDocument('postgres-notebook', notebookData);\n            await vscode.window.showNotebookDocument(notebook);\n        })\n    );\n}\n\nclass PostgresExplorer implements vscode.TreeDataProvider<DatabaseItem> {\n    private _onDidChangeTreeData: vscode.EventEmitter<DatabaseItem | undefined | null | void> = new vscode.EventEmitter<DatabaseItem | undefined | null | void>();\n    readonly onDidChangeTreeData: vscode.Event<DatabaseItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n    refresh(): void {\n        this._onDidChangeTreeData.fire();\n    }\n\n    getTreeItem(element: DatabaseItem): vscode.TreeItem {\n        return element;\n    }\n\n    async getChildren(element?: DatabaseItem): Promise<DatabaseItem[]> {\n        const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n        if (connections.length === 0) {\n            return [];\n        }\n\n        let client: Client | undefined;\n        try {\n            if (!element) {\n                // Root level - show connections\n                return connections.map(conn => new DatabaseItem(\n                    conn.name || `${conn.host}:${conn.port}`,\n                    vscode.TreeItemCollapsibleState.Collapsed,\n                    'connection',\n                    undefined,\n                    undefined,\n                    conn.id\n                ));\n            }\n\n            // Find the connection details\n            const connection = connections.find(c => c.id === element.connectionId);\n            if (!connection) {\n                return [];\n            }\n\n            // Connect to appropriate database based on the tree level\n            const dbName = element.type === 'connection' ? 'postgres' : element.databaseName;\n            client = new Client({\n                host: connection.host,\n                port: connection.port,\n                user: connection.username,\n                password: String(connection.password),\n                database: dbName,\n                connectionTimeoutMillis: 5000\n            });\n            await client.connect();\n\n            if (element.type === 'connection') {\n                // Show databases under connection\n                const result = await client.query(\n                    \"SELECT datname FROM pg_database WHERE datistemplate = false AND datname != 'postgres'\"\n                );\n                return result.rows.map(row => new DatabaseItem(\n                    row.datname,\n                    vscode.TreeItemCollapsibleState.Collapsed,\n                    'database',\n                    undefined,\n                    row.datname,\n                    element.connectionId\n                ));\n            }\n\n            if (element.type === 'database') {\n                // Show schemas under database\n                const result = await client.query(\n                    \"SELECT schema_name FROM information_schema.schemata WHERE schema_name NOT IN ('information_schema', 'pg_catalog')\"\n                );\n                return result.rows.map(row => new DatabaseItem(\n                    row.schema_name,\n                    vscode.TreeItemCollapsibleState.Collapsed,\n                    'schema',\n                    row.schema_name,\n                    element.databaseName,\n                    element.connectionId\n                ));\n            }\n\n            if (element.type === 'schema') {\n                // Show categories under schema\n                return [\n                    new DatabaseItem('Tables', vscode.TreeItemCollapsibleState.Collapsed, 'category', element.label, element.databaseName, element.connectionId),\n                    new DatabaseItem('Views', vscode.TreeItemCollapsibleState.Collapsed, 'category', element.label, element.databaseName, element.connectionId),\n                    new DatabaseItem('Functions', vscode.TreeItemCollapsibleState.Collapsed, 'category', element.label, element.databaseName, element.connectionId)\n                ];\n            }\n\n            if (element.type === 'category') {\n                if (element.label === 'Tables') {\n                    const result = await client.query(\n                        \"SELECT table_name FROM information_schema.tables WHERE table_schema = $1 AND table_type = 'BASE TABLE'\",\n                        [element.schema]\n                    );\n                    return result.rows.map(row => new DatabaseItem(\n                        row.table_name,\n                        vscode.TreeItemCollapsibleState.Collapsed,\n                        'table',\n                        element.schema,\n                        element.databaseName,\n                        element.connectionId\n                    ));\n                }\n                \n                if (element.label === 'Views') {\n                    const result = await client.query(\n                        \"SELECT table_name FROM information_schema.views WHERE table_schema = $1\",\n                        [element.schema]\n                    );\n                    return result.rows.map(row => new DatabaseItem(\n                        row.table_name,\n                        vscode.TreeItemCollapsibleState.Collapsed,\n                        'view',\n                        element.schema,\n                        element.databaseName,\n                        element.connectionId\n                    ));\n                }\n                \n                if (element.label === 'Functions') {\n                    const result = await client.query(\n                        `SELECT routine_name \n                         FROM information_schema.routines \n                         WHERE routine_schema = $1 \n                         AND routine_type = 'FUNCTION'`,\n                        [element.schema]\n                    );\n                    return result.rows.map(row => new DatabaseItem(\n                        row.routine_name,\n                        vscode.TreeItemCollapsibleState.None,\n                        'function',\n                        element.schema,\n                        element.databaseName,\n                        element.connectionId\n                    ));\n                }\n            }\n\n            if (element.type === 'table' || element.type === 'view') {\n                const result = await client.query(\n                    \"SELECT column_name, data_type FROM information_schema.columns WHERE table_schema = $1 AND table_name = $2\",\n                    [element.schema, element.label]\n                );\n                return result.rows.map(row => new DatabaseItem(\n                    `${row.column_name} (${row.data_type})`,\n                    vscode.TreeItemCollapsibleState.None,\n                    'column'\n                ));\n            }\n\n            return [];\n        } catch (err: any) {\n            vscode.window.showErrorMessage(`Database error: ${err.message}`);\n            return [];\n        } finally {\n            if (client) {\n                await client.end();\n            }\n        }\n    }\n}\n\nclass DatabaseItem extends vscode.TreeItem {\n    constructor(\n        public readonly label: string,\n        public readonly collapsibleState: vscode.TreeItemCollapsibleState,\n        public readonly type: 'connection' | 'database' | 'schema' | 'table' | 'column' | 'category' | 'function' | 'view',\n        public readonly schema?: string,\n        public readonly databaseName?: string,\n        public readonly connectionId?: string\n    ) {\n        super(label, collapsibleState);\n        this.contextValue = type;\n        this.tooltip = this.label;\n        this.iconPath = {\n            connection: new vscode.ThemeIcon('plug'),\n            database: new vscode.ThemeIcon('database'),\n            schema: new vscode.ThemeIcon('symbol-namespace'),\n            table: new vscode.ThemeIcon('table'),\n            column: new vscode.ThemeIcon('symbol-field'),\n            category: new vscode.ThemeIcon('list-tree'),\n            function: new vscode.ThemeIcon('symbol-method'),\n            view: new vscode.ThemeIcon('type-hierarchy-sub')\n        }[type];\n    }\n}\n\nexport function deactivate() {\n    // Remove client handling as it's now handled per request\n}\n", "import * as vscode from 'vscode';\nimport { Client } from 'pg';\n\nexport interface ConnectionInfo {\n    id: string;\n    name: string;\n    host: string;\n    port: number;\n    username: string;\n    password: string;\n    database?: string;\n}\n\nexport class ConnectionFormPanel {\n    public static currentPanel: ConnectionFormPanel | undefined;\n    private readonly _panel: vscode.WebviewPanel;\n    private readonly _extensionUri: vscode.Uri;\n    private _disposables: vscode.Disposable[] = [];\n\n    private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\n        this._panel = panel;\n        this._extensionUri = extensionUri;\n\n        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n        this._initialize();\n        vscode.workspace.getConfiguration().update('postgresExplorer.connections', [], true);\n\n        this._panel.webview.onDidReceiveMessage(\n            async (message) => {\n                switch (message.command) {\n                    case 'testConnection':\n                        try {\n                            const client = new Client({\n                                host: message.connection.host,\n                                port: message.connection.port,\n                                user: message.connection.username,\n                                password: message.connection.password,\n                                database: message.connection.database\n                            });\n                            await client.connect();\n                            const result = await client.query('SELECT version()');\n                            await client.end();\n                            this._panel.webview.postMessage({ \n                                type: 'testSuccess',\n                                version: result.rows[0].version\n                            });\n                        } catch (err: any) {\n                            this._panel.webview.postMessage({ \n                                type: 'testError',\n                                error: err.message\n                            });\n                        }\n                        break;\n\n                    case 'saveConnection':\n                        try {\n                            const client = new Client({\n                                host: message.connection.host,\n                                port: message.connection.port,\n                                user: message.connection.username,\n                                password: message.connection.password,\n                                database: 'postgres'\n                            });\n\n                            await client.connect();\n                            \n                            const result = await client.query('SELECT datname FROM pg_database WHERE datistemplate = false');\n                            await client.end();\n\n                            const connections = this.getStoredConnections();\n                            const newConnection: ConnectionInfo = {\n                                id: Date.now().toString(),\n                                name: message.connection.name,\n                                host: message.connection.host,\n                                port: message.connection.port,\n                                username: message.connection.username,\n                                password: message.connection.password\n                            };\n                            connections.push(newConnection);\n                            await this.storeConnections(connections);\n\n                            vscode.window.showInformationMessage('Connection saved successfully!');\n                            vscode.commands.executeCommand('postgres-explorer.refreshConnections');\n                            this._panel.dispose();\n                        } catch (err: any) {\n                            const errorMessage = err?.message || 'Unknown error occurred';\n                            vscode.window.showErrorMessage(`Failed to connect: ${errorMessage}`);\n                        }\n                        break;\n                }\n            },\n            undefined,\n            this._disposables\n        );\n    }\n\n    public static show(extensionUri: vscode.Uri) {\n        if (ConnectionFormPanel.currentPanel) {\n            ConnectionFormPanel.currentPanel._panel.reveal();\n            return;\n        }\n\n        const panel = vscode.window.createWebviewPanel(\n            'connectionForm',\n            'Add PostgreSQL Connection',\n            vscode.ViewColumn.One,\n            {\n                enableScripts: true\n            }\n        );\n\n        ConnectionFormPanel.currentPanel = new ConnectionFormPanel(panel, extensionUri);\n    }\n\n    private async _initialize() {\n        this._panel.webview.onDidReceiveMessage(async (message) => {\n            switch (message.command) {\n                case 'testConnection':\n                    try {\n                        const client = new Client({\n                            host: message.connection.host,\n                            port: message.connection.port,\n                            user: message.connection.username,\n                            password: message.connection.password,\n                            database: message.connection.database\n                        });\n                        await client.connect();\n                        const result = await client.query('SELECT version()');\n                        await client.end();\n                        this._panel.webview.postMessage({ \n                            type: 'testSuccess',\n                            version: result.rows[0].version\n                        });\n                    } catch (err: any) {\n                        this._panel.webview.postMessage({ \n                            type: 'testError',\n                            error: err.message\n                        });\n                    }\n                    break;\n\n                case 'saveConnection':\n                    try {\n                        const client = new Client({\n                            host: message.connection.host,\n                            port: message.connection.port,\n                            user: message.connection.username,\n                            password: message.connection.password,\n                            database: 'postgres'\n                        });\n\n                        await client.connect();\n                        \n                        const result = await client.query('SELECT datname FROM pg_database WHERE datistemplate = false');\n                        await client.end();\n\n                        const connections = this.getStoredConnections();\n                        const newConnection: ConnectionInfo = {\n                            id: Date.now().toString(),\n                            name: message.connection.name,\n                            host: message.connection.host,\n                            port: message.connection.port,\n                            username: message.connection.username,\n                            password: message.connection.password\n                        };\n                        connections.push(newConnection);\n                        await this.storeConnections(connections);\n\n                        vscode.window.showInformationMessage('Connection saved successfully!');\n                        vscode.commands.executeCommand('postgres-explorer.refreshConnections');\n                        this._panel.dispose();\n                    } catch (err: any) {\n                        const errorMessage = err?.message || 'Unknown error occurred';\n                        vscode.window.showErrorMessage(`Failed to connect: ${errorMessage}`);\n                    }\n                    break;\n            }\n        });\n        await this._update();\n    }\n\n    private async _update() {\n        this._panel.webview.html = await this._getHtmlForWebview(this._panel.webview);\n    }\n\n    private _getHtmlForWebview(webview: vscode.Webview): string {\n        const logoPath = webview.asWebviewUri(vscode.Uri.joinPath(this._extensionUri, 'resources', 'postgres-explorer.png'));\n        \n        return `<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Add PostgreSQL Connection</title>\n            <style>\n                body {\n                    padding: 20px;\n                    color: var(--vscode-foreground);\n                    font-family: var(--vscode-font-family);\n                }\n                .header {\n                    display: flex;\n                    align-items: center;\n                    margin-bottom: 30px;\n                    gap: 20px;\n                }\n                .header img {\n                    width: 64px;\n                    height: 64px;\n                }\n                .header-text h1 {\n                    margin: 0;\n                    font-size: 24px;\n                    color: var(--vscode-foreground);\n                }\n                .header-text p {\n                    margin: 5px 0 0 0;\n                    opacity: 0.8;\n                }\n                .form-container {\n                    max-width: 50%;\n                    margin: 0;\n                }\n                .form-group {\n                    margin-bottom: 15px;\n                }\n                label {\n                    display: block;\n                    margin-bottom: 5px;\n                    color: var(--vscode-foreground);\n                }\n                input, select {\n                    width: 100%;\n                    padding: 8px;\n                    border: 1px solid var(--vscode-input-border);\n                    background: var(--vscode-input-background);\n                    color: var(--vscode-input-foreground);\n                    border-radius: 2px;\n                }\n                button {\n                    padding: 8px 16px;\n                    background: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    border-radius: 2px;\n                    cursor: pointer;\n                    margin-top: 10px;\n                }\n                button:hover {\n                    background: var(--vscode-button-hoverBackground);\n                }\n                .required::after {\n                    content: \" *\";\n                    color: var(--vscode-errorForeground);\n                }\n                .button-group {\n                    display: flex;\n                    gap: 10px;\n                    margin-top: 20px;\n                }\n                .message {\n                    margin-top: 15px;\n                    padding: 10px;\n                    border-radius: 3px;\n                }\n                .error {\n                    background: var(--vscode-inputValidation-errorBackground);\n                    border: 1px solid var(--vscode-inputValidation-errorBorder);\n                    color: var(--vscode-inputValidation-errorForeground);\n                }\n                .success {\n                    background: var(--vscode-inputValidation-infoBackground);\n                    border: 1px solid var(--vscode-inputValidation-infoBorder);\n                    color: var(--vscode-inputValidation-infoForeground);\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"header\">\n                <img src=\"${logoPath}\" alt=\"PostgreSQL Explorer\">\n                <div class=\"header-text\">\n                    <h1>PostgreSQL Explorer</h1>\n                    <p>Connect to your PostgreSQL database and explore your data with ease.</p>\n                </div>\n            </div>\n            <div class=\"form-container\">\n                <form id=\"connectionForm\">\n                    <div class=\"form-group\">\n                        <label for=\"name\" class=\"required\">Connection Name</label>\n                        <input type=\"text\" id=\"name\" name=\"name\" required placeholder=\"My Database Connection\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"host\" class=\"required\">Host</label>\n                        <input type=\"text\" id=\"host\" name=\"host\" required placeholder=\"localhost\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"port\" class=\"required\">Port</label>\n                        <input type=\"number\" id=\"port\" name=\"port\" value=\"5432\" required>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"database\">Database</label>\n                        <input type=\"text\" id=\"database\" name=\"database\" placeholder=\"postgres\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"username\" class=\"required\">Username</label>\n                        <input type=\"text\" id=\"username\" name=\"username\" required placeholder=\"postgres\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"password\" class=\"required\">Password</label>\n                        <input type=\"password\" id=\"password\" name=\"password\" required>\n                    </div>\n                    <div id=\"message\" style=\"display: none;\" class=\"message\"></div>\n                    <div class=\"button-group\">\n                        <button type=\"submit\">Add Connection</button>\n                        <button type=\"button\" id=\"testConnection\">Test Connection</button>\n                    </div>\n                </form>\n            </div>\n            <script>\n                const vscode = acquireVsCodeApi();\n                const messageDiv = document.getElementById('message');\n\n                function showMessage(text, isError = false) {\n                    messageDiv.textContent = text;\n                    messageDiv.className = 'message ' + (isError ? 'error' : 'success');\n                    messageDiv.style.display = 'block';\n                }\n\n                function getFormData() {\n                    return {\n                        name: document.getElementById('name').value,\n                        host: document.getElementById('host').value,\n                        port: parseInt(document.getElementById('port').value),\n                        database: document.getElementById('database').value || 'postgres',\n                        username: document.getElementById('username').value,\n                        password: document.getElementById('password').value\n                    };\n                }\n\n                document.getElementById('testConnection').addEventListener('click', () => {\n                    messageDiv.style.display = 'none';\n                    vscode.postMessage({\n                        command: 'testConnection',\n                        connection: getFormData()\n                    });\n                });\n\n                document.getElementById('connectionForm').addEventListener('submit', (e) => {\n                    e.preventDefault();\n                    messageDiv.style.display = 'none';\n                    vscode.postMessage({\n                        command: 'saveConnection',\n                        connection: getFormData()\n                    });\n                });\n\n                window.addEventListener('message', event => {\n                    const message = event.data;\n                    switch (message.type) {\n                        case 'testSuccess':\n                            showMessage('Connection successful! Server version: ' + message.version);\n                            break;\n                        case 'testError':\n                            showMessage(message.error, true);\n                            break;\n                    }\n                });\n            </script>\n        </body>\n        </html>`;\n    }\n\n    private _getNonce(): string {\n        let text = '';\n        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for (let i = 0; i < 32; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text;\n    }\n\n    private getStoredConnections(): ConnectionInfo[] {\n        const connections = vscode.workspace.getConfiguration().get<ConnectionInfo[]>('postgresExplorer.connections') || [];\n        return connections;\n    }\n\n    private async storeConnections(connections: ConnectionInfo[]): Promise<void> {\n        await vscode.workspace.getConfiguration().update('postgresExplorer.connections', connections, true);\n    }\n\n    private dispose() {\n        ConnectionFormPanel.currentPanel = undefined;\n        this._panel.dispose();\n        while (this._disposables.length) {\n            const disposable = this._disposables.pop();\n            if (disposable) {\n                disposable.dispose();\n            }\n        }\n    }\n}\n", "import * as vscode from 'vscode';\nimport { Client } from 'pg';\nimport { ConnectionInfo } from './connectionForm';\n\nexport class DatabaseTreeProvider implements vscode.TreeDataProvider<DatabaseTreeItem> {\n    private _onDidChangeTreeData: vscode.EventEmitter<DatabaseTreeItem | undefined | null | void> = new vscode.EventEmitter<DatabaseTreeItem | undefined | null | void>();\n    readonly onDidChangeTreeData: vscode.Event<DatabaseTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n    constructor() {\n        // Initialize tree provider\n    }\n\n    refresh(element?: DatabaseTreeItem): void {\n        this._onDidChangeTreeData.fire();\n    }\n\n    getTreeItem(element: DatabaseTreeItem): vscode.TreeItem {\n        return element;\n    }\n\n    async getChildren(element?: DatabaseTreeItem): Promise<DatabaseTreeItem[]> {\n        const connections = vscode.workspace.getConfiguration().get<any[]>('postgresExplorer.connections') || [];\n\n        if (!element) {\n            // Root level - show connections\n            return connections.map(conn => new DatabaseTreeItem(\n                conn.name || `${conn.host}:${conn.port}`,\n                vscode.TreeItemCollapsibleState.Collapsed,\n                'connection',\n                conn.id\n            ));\n        }\n\n        const connection = connections.find(c => c.id === element.connectionId);\n        if (!connection) return [];\n\n        let client: Client | undefined;\n        try {\n            const dbName = element.type === 'connection' ? 'postgres' : element.databaseName;\n            client = new Client({\n                host: connection.host,\n                port: connection.port,\n                user: connection.username,\n                password: String(connection.password),\n                database: dbName,\n                connectionTimeoutMillis: 5000\n            });\n\n            await client.connect();\n\n            switch (element.type) {\n                case 'connection':\n                    const dbResult = await client.query(\n                        \"SELECT datname FROM pg_database WHERE datistemplate = false AND datname != 'postgres'\"\n                    );\n                    return dbResult.rows.map(row => new DatabaseTreeItem(\n                        row.datname,\n                        vscode.TreeItemCollapsibleState.Collapsed,\n                        'database',\n                        element.connectionId,\n                        row.datname\n                    ));\n\n                case 'database':\n                    const schemaResult = await client.query(\n                        \"SELECT schema_name FROM information_schema.schemata WHERE schema_name NOT IN ('information_schema', 'pg_catalog')\"\n                    );\n                    return schemaResult.rows.map(row => new DatabaseTreeItem(\n                        row.schema_name,\n                        vscode.TreeItemCollapsibleState.Collapsed,\n                        'schema',\n                        element.connectionId,\n                        element.databaseName,\n                        row.schema_name\n                    ));\n\n                case 'schema':\n                    return [\n                        new DatabaseTreeItem('Tables', vscode.TreeItemCollapsibleState.Collapsed, 'category', element.connectionId, element.databaseName, element.schema),\n                        new DatabaseTreeItem('Views', vscode.TreeItemCollapsibleState.Collapsed, 'category', element.connectionId, element.databaseName, element.schema),\n                        new DatabaseTreeItem('Functions', vscode.TreeItemCollapsibleState.Collapsed, 'category', element.connectionId, element.databaseName, element.schema)\n                    ];\n\n                case 'category':\n                    switch (element.label) {\n                        case 'Tables':\n                            const tableResult = await client.query(\n                                \"SELECT table_name FROM information_schema.tables WHERE table_schema = $1 AND table_type = 'BASE TABLE'\",\n                                [element.schema]\n                            );\n                            return tableResult.rows.map(row => new DatabaseTreeItem(\n                                row.table_name,\n                                vscode.TreeItemCollapsibleState.Collapsed,\n                                'table',\n                                element.connectionId,\n                                element.databaseName,\n                                element.schema\n                            ));\n\n                        case 'Views':\n                            const viewResult = await client.query(\n                                \"SELECT table_name FROM information_schema.views WHERE table_schema = $1\",\n                                [element.schema]\n                            );\n                            return viewResult.rows.map(row => new DatabaseTreeItem(\n                                row.table_name,\n                                vscode.TreeItemCollapsibleState.Collapsed,\n                                'view',\n                                element.connectionId,\n                                element.databaseName,\n                                element.schema\n                            ));\n\n                        case 'Functions':\n                            const functionResult = await client.query(\n                                \"SELECT routine_name FROM information_schema.routines WHERE routine_schema = $1 AND routine_type = 'FUNCTION'\",\n                                [element.schema]\n                            );\n                            return functionResult.rows.map(row => new DatabaseTreeItem(\n                                row.routine_name,\n                                vscode.TreeItemCollapsibleState.None,\n                                'function',\n                                element.connectionId,\n                                element.databaseName,\n                                element.schema\n                            ));\n                    }\n                    break;\n\n                case 'table':\n                case 'view':\n                    const columnResult = await client.query(\n                        \"SELECT column_name, data_type FROM information_schema.columns WHERE table_schema = $1 AND table_name = $2\",\n                        [element.schema, element.label]\n                    );\n                    return columnResult.rows.map(row => new DatabaseTreeItem(\n                        `${row.column_name} (${row.data_type})`,\n                        vscode.TreeItemCollapsibleState.None,\n                        'column',\n                        element.connectionId,\n                        element.databaseName,\n                        element.schema\n                    ));\n            }\n\n            return [];\n        } catch (err: any) {\n            vscode.window.showErrorMessage(`Failed to get tree items: ${err.message}`);\n            return [];\n        } finally {\n            if (client) {\n                await client.end();\n            }\n        }\n    }\n}\n\nexport class DatabaseTreeItem extends vscode.TreeItem {\n    constructor(\n        public readonly label: string,\n        public readonly collapsibleState: vscode.TreeItemCollapsibleState,\n        public readonly type: 'connection' | 'database' | 'schema' | 'table' | 'view' | 'function' | 'column' | 'category',\n        public readonly connectionId?: string,\n        public readonly databaseName?: string,\n        public readonly schema?: string,\n        public readonly tableName?: string,\n        public readonly columnName?: string\n    ) {\n        super(label, collapsibleState);\n        this.contextValue = type;\n        this.iconPath = {\n            connection: new vscode.ThemeIcon('server'),\n            database: new vscode.ThemeIcon('database'),\n            schema: new vscode.ThemeIcon('symbol-namespace'),\n            table: new vscode.ThemeIcon('table'),\n            view: new vscode.ThemeIcon('eye'),\n            function: new vscode.ThemeIcon('symbol-method'),\n            column: new vscode.ThemeIcon('symbol-field'),\n            category: new vscode.ThemeIcon('folder')\n        }[type];\n    }\n}\n", "import * as vscode from 'vscode';\nimport { Client } from 'pg';\n\nexport class TablePropertiesPanel {\n    public static async show(client: Client, schema: string, name: string, isView: boolean = false, isFunction: boolean = false): Promise<void> {\n        try {\n            if (isFunction) {\n                // Get function information\n                const functionQuery = `\n                    SELECT p.proname,\n                           pg_get_function_arguments(p.oid) as arguments,\n                           pg_get_function_result(p.oid) as result_type,\n                           pg_get_functiondef(p.oid) as definition,\n                           d.description as description,\n                           l.lanname as language\n                    FROM pg_proc p\n                    LEFT JOIN pg_description d ON p.oid = d.objoid\n                    LEFT JOIN pg_language l ON p.prolang = l.oid\n                    WHERE p.proname = $1\n                    AND p.pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = $2)`;\n\n                const functionResult = await client.query(functionQuery, [name, schema]);\n                if (functionResult.rows.length === 0) {\n                    throw new Error('Function not found');\n                }\n\n                const functionInfo = functionResult.rows[0];\n                \n                // Create HTML for function properties\n                const panel = vscode.window.createWebviewPanel(\n                    'functionProperties',\n                    `${name} Properties`,\n                    vscode.ViewColumn.One,\n                    { enableScripts: true }\n                );\n\n                panel.webview.html = `\n                    <!DOCTYPE html>\n                    <html>\n                    <head>\n                        <style>\n                            body { \n                                padding: 16px; \n                                font-family: var(--vscode-editor-font-family);\n                                color: var(--vscode-editor-foreground);\n                            }\n                            .container { display: grid; gap: 16px; }\n                            \n                            .header {\n                                display: flex;\n                                align-items: center;\n                                justify-content: space-between;\n                                margin-bottom: 20px;\n                                padding-bottom: 8px;\n                                border-bottom: 1px solid var(--vscode-panel-border);\n                            }\n                            \n                            .info-section {\n                                background: var(--vscode-editor-background);\n                                border-radius: 6px;\n                                box-shadow: 0 2px 8px var(--vscode-widget-shadow);\n                                padding: 16px;\n                                margin-bottom: 16px;\n                            }\n\n                            .info-row {\n                                display: grid;\n                                grid-template-columns: 120px 1fr;\n                                gap: 16px;\n                                padding: 8px 0;\n                                border-bottom: 1px solid var(--vscode-panel-border);\n                            }\n\n                            .info-row:last-child {\n                                border-bottom: none;\n                            }\n\n                            .label {\n                                color: var(--vscode-foreground);\n                                opacity: 0.8;\n                            }\n\n                            .value {\n                                color: var(--vscode-editor-foreground);\n                            }\n\n                            .definition {\n                                font-family: var(--vscode-editor-font-family);\n                                white-space: pre;\n                                overflow-x: auto;\n                                padding: 16px;\n                                background: var(--vscode-editor-background);\n                                border-radius: 6px;\n                            }\n\n                            .keyword { color: var(--vscode-symbolIcon-keywordForeground); }\n                            .type { color: var(--vscode-symbolIcon-typeParameterForeground); }\n                            .identifier { color: var(--vscode-symbolIcon-variableForeground); }\n                        </style>\n                    </head>\n                    <body>\n                        <div class=\"container\">\n                            <div class=\"header\">\n                                <h2>${schema}.${name}</h2>\n                            </div>\n\n                            <div class=\"info-section\">\n                                <div class=\"info-row\">\n                                    <span class=\"label\">Arguments</span>\n                                    <span class=\"value\">${functionInfo.arguments || 'None'}</span>\n                                </div>\n                                <div class=\"info-row\">\n                                    <span class=\"label\">Returns</span>\n                                    <span class=\"value\">${functionInfo.result_type}</span>\n                                </div>\n                                <div class=\"info-row\">\n                                    <span class=\"label\">Language</span>\n                                    <span class=\"value\">${functionInfo.language}</span>\n                                </div>\n                                ${functionInfo.description ? `\n                                <div class=\"info-row\">\n                                    <span class=\"label\">Description</span>\n                                    <span class=\"value\">${functionInfo.description}</span>\n                                </div>` : ''}\n                            </div>\n\n                            <div class=\"info-section\">\n                                <h3>Definition</h3>\n                                <pre class=\"definition\">${formatSqlWithHighlighting(functionInfo.definition)}</pre>\n                            </div>\n                        </div>\n                    </body>\n                    </html>`;\n\n                return;\n            }\n\n            // Get column information\n            const columnQuery = `\n                SELECT \n                    a.attname as column_name,\n                    pg_catalog.format_type(a.atttypid, a.atttypmod) as data_type,\n                    a.attnotnull as is_not_null,\n                    (\n                        SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid)\n                        FROM pg_catalog.pg_attrdef d\n                        WHERE d.adrelid = a.attrelid\n                        AND d.adnum = a.attnum\n                        AND a.atthasdef\n                    ) as default_value,\n                    CASE \n                        WHEN pc.contype = 'p' THEN true\n                        ELSE false\n                    END as is_primary_key\n                FROM pg_catalog.pg_attribute a\n                LEFT JOIN pg_catalog.pg_constraint pc \n                    ON pc.conrelid = a.attrelid \n                    AND a.attnum = ANY(pc.conkey)\n                    AND pc.contype = 'p'\n                WHERE a.attrelid = '${schema}.${name}'::regclass\n                AND a.attnum > 0\n                AND NOT a.attisdropped\n                ORDER BY a.attnum`;\n\n            // Get definition based on type\n            const definitionQuery = isView ? \n                `SELECT pg_get_viewdef('${schema}.${name}'::regclass, true) as definition` :\n                `WITH \n                columns AS (\n                    SELECT string_agg(\n                        format(\n                            '%I %s%s%s',\n                            column_name,\n                            data_type,\n                            CASE WHEN is_nullable = 'NO' THEN ' NOT NULL' ELSE '' END,\n                            CASE WHEN column_default IS NOT NULL THEN ' DEFAULT ' || column_default ELSE '' END\n                        ),\n                        ', '\n                        ORDER BY ordinal_position\n                    ) as column_list\n                    FROM information_schema.columns\n                    WHERE table_schema = '${schema}'\n                    AND table_name = '${name}'\n                ),\n                constraint_columns AS (\n                    SELECT \n                        tc.constraint_name,\n                        tc.constraint_type,\n                        string_agg(kcu.column_name, ', ' ORDER BY kcu.ordinal_position) as column_list,\n                        string_agg(ccu.column_name, ', ' ORDER BY kcu.ordinal_position) as ref_column_list,\n                        ccu.table_schema as ref_schema,\n                        ccu.table_name as ref_table\n                    FROM information_schema.table_constraints tc\n                    JOIN information_schema.key_column_usage kcu ON \n                        tc.constraint_name = kcu.constraint_name AND \n                        tc.table_schema = kcu.table_schema\n                    LEFT JOIN information_schema.referential_constraints rc ON \n                        tc.constraint_name = rc.constraint_name AND \n                        tc.table_schema = rc.constraint_schema\n                    LEFT JOIN information_schema.constraint_column_usage ccu ON \n                        rc.unique_constraint_name = ccu.constraint_name AND \n                        rc.unique_constraint_schema = ccu.table_schema\n                    WHERE tc.table_schema = '${schema}' \n                    AND tc.table_name = '${name}'\n                    GROUP BY tc.constraint_name, tc.constraint_type, ccu.table_schema, ccu.table_name\n                ),\n                constraints AS (\n                    SELECT string_agg(\n                        CASE \n                            WHEN constraint_type = 'PRIMARY KEY' THEN \n                                format(', CONSTRAINT %I PRIMARY KEY (%s)', \n                                    constraint_name, \n                                    column_list\n                                )\n                            WHEN constraint_type = 'UNIQUE' THEN \n                                format(', CONSTRAINT %I UNIQUE (%s)',\n                                    constraint_name,\n                                    column_list\n                                )\n                            WHEN constraint_type = 'FOREIGN KEY' THEN \n                                format(', CONSTRAINT %I FOREIGN KEY (%s) REFERENCES %I.%I (%s)',\n                                    constraint_name,\n                                    column_list,\n                                    ref_schema,\n                                    ref_table,\n                                    ref_column_list\n                                )\n                        END,\n                        ' '\n                        ORDER BY constraint_name\n                    ) as constraint_list\n                    FROM constraint_columns\n                ),\n                table_type AS (\n                    SELECT CASE \n                        WHEN c.relpersistence = 'u' THEN ' UNLOGGED'\n                        ELSE ''\n                    END as persistence\n                    FROM pg_class c\n                    JOIN pg_namespace n ON n.oid = c.relnamespace\n                    WHERE n.nspname = '${schema}'\n                    AND c.relname = '${name}'\n                )\n                SELECT format(\n                    'CREATE TABLE %I.%I (%s%s)%s',\n                    '${schema}',\n                    '${name}',\n                    c.column_list,\n                    COALESCE(co.constraint_list, ''),\n                    t.persistence\n                ) as definition\n                FROM columns c\n                CROSS JOIN table_type t\n                LEFT JOIN constraints co ON true`;\n\n            const [colResult, defResult] = await Promise.all([\n                client.query(columnQuery),\n                client.query(definitionQuery)\n            ]);\n\n            // Format the definition with proper indentation\n            const definition = isView ? \n                defResult.rows[0].definition :\n                defResult.rows[0].definition\n                    .replace(/[<>]/g, (m: string): string => m === '<' ? '&lt;' : '&gt;')\n                    .replace(/\\((.*)\\)/s, (match: string, group: string): string => {\n                        return '(\\n  ' + group\n                            .split(',')\n                            .map((line: string): string => line.trim())\n                            .join(',\\n  ') + '\\n)';\n                    });\n\n            const panel = vscode.window.createWebviewPanel(\n                isView ? 'viewProperties' : 'tableProperties',\n                `${name} Properties`,\n                vscode.ViewColumn.One,\n                { enableScripts: true }\n            );\n\n            // Generate table HTML content\n            const tableContent = colResult.rows.map(col => `\n                <tr>\n                    <td class=\"${col.is_primary_key ? 'pk-column' : ''} ${col.is_not_null ? 'required-column' : ''}\">${col.column_name}</td>\n                    <td>${col.data_type}</td>\n                    <td style=\"text-align: center;\">\n                        <input type=\"checkbox\" \n                               class=\"custom-checkbox\" \n                               ${!col.is_not_null ? 'checked' : ''} \n                               disabled \n                               title=\"${col.is_not_null ? 'Not Nullable' : 'Nullable'}\"\n                        >\n                    </td>\n                    <td>${col.default_value || ''}</td>\n                    <td style=\"text-align: center;\">\n                        <input type=\"checkbox\" \n                               class=\"custom-checkbox\" \n                               ${col.is_primary_key ? 'checked' : ''} \n                               disabled \n                               title=\"${col.is_primary_key ? 'Primary Key' : 'Not Primary Key'}\"\n                        >\n                    </td>\n                </tr>\n            `).join('');\n\n            panel.webview.html = `\n                <!DOCTYPE html>\n                <html>\n                <head>\n                    <style>\n                        body { \n                            padding: 16px; \n                            font-family: var(--vscode-editor-font-family);\n                            color: var(--vscode-editor-foreground);\n                        }\n                        .container { display: grid; gap: 16px; }\n                        \n                        /* Header styles */\n                        .header {\n                            display: flex;\n                            align-items: center;\n                            justify-content: space-between;\n                            margin-bottom: 20px;\n                            padding-bottom: 8px;\n                            border-bottom: 1px solid var(--vscode-panel-border);\n                        }\n\n                        /* Switch styles */\n                        .switch-container {\n                            display: flex;\n                            align-items: center;\n                            gap: 8px;\n                            opacity: 0.8;\n                        }\n\n                        .view-label {\n                            font-size: 12px;\n                            color: var(--vscode-foreground);\n                            opacity: 0.8;\n                        }\n\n                        .switch {\n                            position: relative;\n                            display: inline-block;\n                            width: 36px;\n                            height: 20px;\n                        }\n\n                        .switch input { opacity: 0; width: 0; height: 0; }\n\n                        .slider {\n                            position: absolute;\n                            cursor: pointer;\n                            top: 0; left: 0; right: 0; bottom: 0;\n                            background-color: var(--vscode-button-secondaryBackground);\n                            transition: .2s;\n                            border-radius: 10px;\n                            opacity: 0.6;\n                        }\n\n                        .slider:before {\n                            position: absolute;\n                            content: \"\";\n                            height: 14px;\n                            width: 14px;\n                            left: 3px;\n                            bottom: 3px;\n                            background-color: var(--vscode-button-foreground);\n                            transition: .2s;\n                            border-radius: 50%;\n                        }\n\n                        input:checked + .slider {\n                            background-color: var(--vscode-button-background);\n                        }\n\n                        input:checked + .slider:before {\n                            transform: translateX(16px);\n                        }\n\n                        /* View styles */\n                        #tableView, #scriptView { \n                            display: none; \n                            opacity: 0;\n                            transition: opacity 0.3s ease-in-out;\n                        }\n                        #tableView.active, #scriptView.active { \n                            display: block;\n                            opacity: 1;\n                        }\n\n                        /* Table styles */\n                        .table-container {\n                            background: var(--vscode-editor-background);\n                            border-radius: 6px;\n                            box-shadow: 0 2px 8px var(--vscode-widget-shadow);\n                            overflow: hidden;\n                        }\n                        \n                        table { \n                            border-collapse: separate;\n                            border-spacing: 0;\n                            width: 100%;\n                        }\n                        \n                        th, td { \n                            border: none;\n                            padding: 12px 16px;\n                            text-align: left;\n                        }\n                        \n                        th {\n                            background-color: var(--vscode-editor-background);\n                            color: var(--vscode-symbolIcon-classForeground);\n                            font-weight: 600;\n                            font-size: 0.9em;\n                            text-transform: uppercase;\n                            letter-spacing: 0.05em;\n                            border-bottom: 2px solid var(--vscode-panel-border);\n                        }\n                        \n                        tr:not(:last-child) td {\n                            border-bottom: 1px solid var(--vscode-panel-border);\n                        }\n                        \n                        td {\n                            background: var(--vscode-editor-background);\n                            font-family: var(--vscode-editor-font-family);\n                        }\n\n                        /* Column highlighting */\n                        .pk-column {\n                            color: var(--vscode-symbolIcon-constantForeground);\n                            font-weight: 600;\n                        }\n                        \n                        .required-column {\n                            color: var(--vscode-gitDecoration-modifiedResourceForeground);\n                        }\n\n                        /* Script View */\n                        .script-container {\n                            background: var(--vscode-editor-background);\n                            border-radius: 6px;\n                            box-shadow: 0 2px 8px var(--vscode-widget-shadow);\n                        }\n                        \n                        pre {\n                            margin: 0;\n                            padding: 16px;\n                            overflow-x: auto;\n                            font-family: var(--vscode-editor-font-family);\n                            font-size: 13px;\n                            line-height: 1.5;\n                            color: var(--vscode-editor-foreground);\n                        }\n\n                        .keyword { color: var(--vscode-symbolIcon-keywordForeground); }\n                        .identifier { color: var(--vscode-symbolIcon-variableForeground); }\n                        .type { color: var(--vscode-symbolIcon-typeParameterForeground); }\n                        .constraint { color: var(--vscode-symbolIcon-constantForeground); }\n\n                        /* Checkbox styles */\n                        .custom-checkbox {\n                            appearance: none;\n                            width: 16px;\n                            height: 16px;\n                            border: 1px solid var(--vscode-checkbox-border);\n                            background: var(--vscode-checkbox-background);\n                            border-radius: 3px;\n                            cursor: default;\n                            position: relative;\n                        }\n\n                        .custom-checkbox:checked {\n                            background: var(--vscode-checkbox-selectBackground);\n                            border-color: var(--vscode-checkbox-selectBorder);\n                        }\n\n                        .custom-checkbox:checked::after {\n                            content: \"\u2713\";\n                            position: absolute;\n                            color: var(--vscode-checkbox-foreground);\n                            font-size: 12px;\n                            left: 2px;\n                            top: -1px;\n                        }\n                    </style>\n                </head>\n                <body>\n                    <div class=\"container\">\n                        <div class=\"header\">\n                            <h2>${schema}.${name}</h2>\n                            <div class=\"switch-container\">\n                                <span class=\"view-label\">Table</span>\n                                <label class=\"switch\">\n                                    <input type=\"checkbox\" id=\"viewSwitch\">\n                                    <span class=\"slider\"></span>\n                                </label>\n                                <span class=\"view-label\">Script</span>\n                            </div>\n                        </div>\n\n                        <div id=\"tableView\" class=\"table-container active\">\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <th>Column Name</th>\n                                        <th>Data Type</th>\n                                        <th style=\"text-align: center;\" title=\"Check means column is nullable\">Nullable</th>\n                                        <th>Default</th>\n                                        <th style=\"text-align: center;\" title=\"Check means column is primary key\">Primary Key</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    ${tableContent}\n                                </tbody>\n                            </table>\n                        </div>\n\n                        <div id=\"scriptView\" class=\"script-container\">\n                            <pre>${formatSqlWithHighlighting(definition)}</pre>\n                        </div>\n                    </div>\n\n                    <script>\n                        const viewSwitch = document.getElementById('viewSwitch');\n                        const tableView = document.getElementById('tableView');\n                        const scriptView = document.getElementById('scriptView');\n\n                        // Initialize views\n                        tableView.classList.add('active');\n                        scriptView.classList.remove('active');\n\n                        viewSwitch.addEventListener('change', (e) => {\n                            if (e.target.checked) {\n                                requestAnimationFrame(() => {\n                                    tableView.classList.remove('active');\n                                    scriptView.classList.add('active');\n                                });\n                            } else {\n                                requestAnimationFrame(() => {\n                                    scriptView.classList.remove('active');\n                                    tableView.classList.add('active');\n                                });\n                            }\n                        });\n\n                        // Helper function for SQL syntax highlighting\n                        function formatSqlWithHighlighting(sql) {\n                            const escapeHtml = (text) => {\n                                return text\n                                    .replace(/&/g, \"&amp;\")\n                                    .replace(/</g, \"&lt;\")\n                                    .replace(/>/g, \"&gt;\");\n                            };\n                            \n                            return escapeHtml(sql)\n                                .replace(/\\b(CREATE TABLE|PRIMARY KEY|NOT NULL)\\b/g, '<span class=\"keyword\">$1</span>')\n                                .replace(/\\b(integer|text|boolean|timestamp|numeric|character varying|without time zone)\\b/g, '<span class=\"type\">$1</span>')\n                                .replace(/(\\w+)\\.(\\w+)/g, '<span class=\"identifier\">$1</span>.<span class=\"identifier\">$2</span>');\n                        }\n                    </script>\n                </body>\n                </html>`;\n        } catch (err: any) {\n            vscode.window.showErrorMessage(`Error loading properties: ${err.message}`);\n        }\n    }\n}\nfunction formatSqlWithHighlighting(formattedScript: string): string {\n    const escapedScript = formattedScript\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\");\n\n    return escapedScript\n        // Highlight SQL keywords\n        .replace(/\\b(CREATE|TABLE|VIEW|FUNCTION|RETURNS|LANGUAGE|AS|BEGIN|END|DECLARE|IF|THEN|ELSE|RETURN|PRIMARY KEY|NOT NULL|NULL)\\b/g, '<span class=\"keyword\">$1</span>')\n        // Highlight data types\n        .replace(/\\b(integer|text|boolean|timestamp|numeric|character varying|without time zone|bigint|smallint|real|double precision|json|jsonb|uuid|date|time|bytea)\\b/g, '<span class=\"type\">$1</span>')\n        // Highlight schema and identifiers\n        .replace(/(\\w+)\\.(\\w+)/g, '<span class=\"identifier\">$1</span>.<span class=\"identifier\">$2</span>')\n        // Highlight constraints\n        .replace(/\\b(PRIMARY KEY|UNIQUE|FOREIGN KEY|CHECK|REFERENCES)\\b/g, '<span class=\"constraint\">$1</span>')\n        // Highlight function keywords\n        .replace(/\\b(plpgsql|sql|STABLE|VOLATILE|IMMUTABLE|SECURITY DEFINER|PARALLEL SAFE)\\b/g, '<span class=\"keyword\">$1</span>');\n}\n\n", "import * as vscode from 'vscode';\nimport { Client } from 'pg';\n\ninterface PostgresCell {\n    kind: 'query';\n    value: string;\n}\n\ninterface NotebookMetadata {\n    connectionId: string;\n    databaseName: string;\n    host: string;\n    port: number;\n    username: string;\n    password: string;\n}\n\ninterface Cell {\n    value: string;\n}\n\nexport class PostgresNotebookProvider implements vscode.NotebookSerializer {\n    async deserializeNotebook(\n        content: Uint8Array,\n        _token: vscode.CancellationToken\n    ): Promise<vscode.NotebookData> {\n        let metadata: NotebookMetadata | undefined;\n        let cells: vscode.NotebookCellData[] = [];\n\n        if (content.byteLength > 0) {\n            try {\n                const data = JSON.parse(Buffer.from(content).toString());\n                if (data.metadata) {\n                    metadata = data.metadata;\n                }\n                if (Array.isArray(data.cells)) {\n                    cells = data.cells.map((cell: Cell) => \n                        new vscode.NotebookCellData(\n                            vscode.NotebookCellKind.Code,\n                            cell.value,\n                            'sql'\n                        )\n                    );\n                }\n            } catch {\n                cells = [\n                    new vscode.NotebookCellData(\n                        vscode.NotebookCellKind.Code,\n                        '-- Write your SQL query here\\nSELECT NOW();',\n                        'sql'\n                    )\n                ];\n            }\n        } else {\n            cells = [\n                new vscode.NotebookCellData(\n                    vscode.NotebookCellKind.Code,\n                    '-- Write your SQL query here\\nSELECT NOW();',\n                    'sql'\n                )\n            ];\n        }\n\n        const notebookData = new vscode.NotebookData(cells);\n        notebookData.metadata = {\n            ...metadata,\n            custom: {\n                cells: [],\n                metadata: {\n                    ...metadata,\n                    enableScripts: true\n                }\n            }\n        };\n        return notebookData;\n    }\n\n    async serializeNotebook(\n        data: vscode.NotebookData,\n        _token: vscode.CancellationToken\n    ): Promise<Uint8Array> {\n        const cells: Cell[] = data.cells.map(cell => ({\n            value: cell.value\n        }));\n\n        return Buffer.from(JSON.stringify({\n            metadata: data.metadata,\n            cells: cells\n        }));\n    }\n}\n\nexport class PostgresNotebookController {\n    readonly controllerId = 'postgres-notebook-controller';\n    readonly notebookType = 'postgres-notebook';\n    readonly label = 'PostgreSQL Notebook';\n    readonly supportedLanguages = ['sql'];\n\n    private readonly _controller: vscode.NotebookController;\n    private _executionOrder = 0;\n\n    constructor(private client: () => Client | undefined) {\n        this._controller = vscode.notebooks.createNotebookController(\n            this.controllerId,\n            this.notebookType,\n            this.label\n        );\n\n        this._controller.supportedLanguages = this.supportedLanguages;\n        this._controller.supportsExecutionOrder = true;\n        this._controller.executeHandler = this._execute.bind(this);\n    }\n\n    dispose() {\n        this._controller.dispose();\n    }\n\n    private async _execute(\n        cells: vscode.NotebookCell[],\n        _notebook: vscode.NotebookDocument,\n        _controller: vscode.NotebookController\n    ): Promise<void> {\n        const client = this.client();\n        if (!client) {\n            vscode.window.showErrorMessage('Please connect to a PostgreSQL database first');\n            return;\n        }\n\n        for (const cell of cells) {\n            const execution = this._controller.createNotebookCellExecution(cell);\n            execution.executionOrder = ++this._executionOrder;\n            execution.start(Date.now());\n\n            try {\n                const result = await client.query(cell.document.getText());\n                \n                // Create a markdown table from the results\n                let output = '| ' + result.fields.map(field => field.name).join(' | ') + ' |\\n';\n                output += '|' + result.fields.map(() => '---').join('|') + '|\\n';\n                output += result.rows.map(row => \n                    '| ' + Object.values(row).map(val => \n                        val === null ? 'NULL' : \n                        typeof val === 'object' ? JSON.stringify(val) : \n                        String(val)\n                    ).join(' | ')\n                ).join(' |\\n');\n\n                execution.replaceOutput([\n                    new vscode.NotebookCellOutput([\n                        vscode.NotebookCellOutputItem.text(output, 'text/markdown')\n                    ])\n                ]);\n                execution.end(true, Date.now());\n            } catch (err) {\n                execution.replaceOutput([\n                    new vscode.NotebookCellOutput([\n                        vscode.NotebookCellOutputItem.error(err as Error)\n                    ])\n                ]);\n                execution.end(false, Date.now());\n            }\n        }\n    }\n}\n", "import * as vscode from 'vscode';\nimport { Client } from 'pg';\n\ninterface NotebookMetadata {\n    connectionId: string;\n    databaseName: string;\n    host: string;\n    port: number;\n    username: string;\n    password: string;\n}\n\nexport class PostgresKernel {\n    private readonly id = 'postgres-kernel';\n    private readonly label = 'PostgreSQL Kernel';\n    private readonly controller: vscode.NotebookController;\n    private messageHandler?: (message: any) => void;\n\n    constructor(messageHandler?: (message: any) => void) {\n        console.log('PostgresKernel: Initializing');\n        this.controller = vscode.notebooks.createNotebookController(\n            this.id,\n            'postgres-notebook',\n            this.label\n        );\n\n        this.messageHandler = messageHandler;\n        console.log('PostgresKernel: Message handler registered:', !!messageHandler);\n\n        // Disable automatic timestamp parsing\n        const types = require('pg').types;\n        const TIMESTAMPTZ_OID = 1184;\n        const TIMESTAMP_OID = 1114;\n        types.setTypeParser(TIMESTAMPTZ_OID, (val: string) => val);\n        types.setTypeParser(TIMESTAMP_OID, (val: string) => val);\n\n        this.controller.supportedLanguages = ['sql'];\n        this.controller.supportsExecutionOrder = true;\n        this.controller.description = 'PostgreSQL Query Executor';\n        this.controller.executeHandler = this._executeAll.bind(this);\n    }\n\n    private async _executeAll(cells: vscode.NotebookCell[], _notebook: vscode.NotebookDocument, _controller: vscode.NotebookController): Promise<void> {\n        for (const cell of cells) {\n            await this._doExecution(cell);\n        }\n    }\n\n    private async _doExecution(cell: vscode.NotebookCell): Promise<void> {\n        console.log('PostgresKernel: Starting cell execution');\n        const execution = this.controller.createNotebookCellExecution(cell);\n        const startTime = Date.now();\n        execution.start(startTime);\n\n        try {\n            const metadata = cell.notebook.metadata as NotebookMetadata;\n            if (!metadata) {\n                throw new Error('No connection metadata found');\n            }\n\n            const client = new Client({\n                host: metadata.host,\n                port: metadata.port,\n                user: metadata.username,\n                password: String(metadata.password),\n                database: metadata.databaseName\n            });\n\n            await client.connect();\n            console.log('PostgresKernel: Connected to database');\n\n            const query = cell.document.getText();\n            const result = await client.query(query);\n            await client.end();\n\n            const endTime = Date.now();\n            const executionTime = (endTime - startTime) / 1000;\n\n            if (result.command.toUpperCase().match(/^(CREATE|ALTER|DROP|TRUNCATE)/)) {\n                // Schema modification operations\n                const html = `\n                    <div style=\"\n                        padding: 10px;\n                        margin: 5px 0;\n                        background: var(--vscode-editor-background);\n                        border: 1px solid var(--vscode-panel-border);\n                        border-radius: 4px;\n                    \">\n                        <div style=\"color: var(--vscode-gitDecoration-addedResourceForeground);\">\n                            \u2713 Query executed successfully\n                        </div>\n                        <div style=\"\n                            color: var(--vscode-foreground);\n                            opacity: 0.7;\n                            font-size: 0.9em;\n                            margin-top: 5px;\n                        \">\n                            Execution time: ${executionTime.toFixed(3)} seconds\n                        </div>\n                    </div>\n                `;\n\n                const output = new vscode.NotebookCellOutput([\n                    vscode.NotebookCellOutputItem.text(html, 'text/html')\n                ]);\n                execution.replaceOutput([output]);\n                execution.end(true);\n            } else if (result.fields.length > 0) {\n                // Queries that return data\n                console.log('PostgresKernel: Query returned', result.rows.length, 'rows');\n                \n                const headers = result.fields.map(f => f.name);\n                const rows = result.rows;\n                \n                const html = `\n                    <style>\n                        .output-controls {\n                            display: flex;\n                            justify-content: space-between;\n                            align-items: center;\n                            margin-bottom: 16px;\n                            gap: 8px;\n                        }\n                        .export-container {\n                            position: relative;\n                            display: inline-block;\n                        }\n                        .export-button {\n                            background: transparent;\n                            color: var(--vscode-foreground);\n                            border: 1px solid var(--vscode-button-border);\n                            padding: 4px 8px;\n                            cursor: pointer;\n                            border-radius: 2px;\n                            display: flex;\n                            align-items: center;\n                            gap: 4px;\n                            min-width: 32px;\n                            justify-content: center;\n                            opacity: 0.8;\n                        }\n                        .export-button:hover {\n                            opacity: 1;\n                            background: var(--vscode-button-secondaryHoverBackground);\n                        }\n                        .export-menu {\n                            display: none;\n                            position: absolute;\n                            top: 100%;\n                            left: 0;\n                            background: var(--vscode-menu-background);\n                            border: 1px solid var(--vscode-menu-border);\n                            border-radius: 2px;\n                            box-shadow: 0 2px 8px var(--vscode-widget-shadow);\n                            z-index: 1000;\n                            min-width: 160px;\n                        }\n                        .export-menu.show {\n                            display: block;\n                        }\n                        .export-option {\n                            padding: 8px 16px;\n                            cursor: pointer;\n                            display: flex;\n                            align-items: center;\n                            gap: 8px;\n                            color: var(--vscode-menu-foreground);\n                            text-decoration: none;\n                            white-space: nowrap;\n                            opacity: 0.8;\n                        }\n                        .export-option:hover {\n                            background: var(--vscode-list-hoverBackground);\n                            opacity: 1;\n                        }\n                        .clear-button {\n                            opacity: 0.6;\n                        }\n                        .clear-button:hover {\n                            opacity: 0.8;\n                        }\n                        .icon {\n                            width: 16px;\n                            height: 16px;\n                            display: inline-flex;\n                            align-items: center;\n                            justify-content: center;\n                        }\n                        .table-container {\n                            max-height: 400px;\n                            overflow: auto;\n                            border: 1px solid var(--vscode-panel-border);\n                        }\n                        table {\n                            width: 100%;\n                            border-collapse: collapse;\n                        }\n                        th, td {\n                            padding: 8px;\n                            text-align: left;\n                            border: 1px solid var(--vscode-panel-border);\n                            white-space: pre;\n                            font-family: var(--vscode-editor-font-family);\n                        }\n                        th {\n                            background: var(--vscode-editor-background);\n                            position: sticky;\n                            top: 0;\n                        }\n                        tr:nth-child(even) {\n                            background: var(--vscode-list-hoverBackground);\n                        }\n                        .execution-time {\n                            margin-top: 8px;\n                            color: var(--vscode-foreground);\n                            opacity: 0.7;\n                            font-size: 0.9em;\n                        }\n                        .hidden {\n                            display: none !important;\n                        }\n                    </style>\n                    <div class=\"output-wrapper\">\n                        <div class=\"output-controls\">\n                            <div class=\"export-container\">\n                                <button class=\"export-button\" onclick=\"toggleExportMenu()\" title=\"Export options\">\n                                    <span class=\"icon\">\uD83D\uDDC3\uFE0F</span>\n                                </button>\n                                <div class=\"export-menu\" id=\"exportMenu\">\n                                    <a href=\"#\" class=\"export-option\" onclick=\"downloadCSV(); return false;\">\n                                        <span class=\"icon\">\uD83D\uDCC4</span> CSV\n                                    </a>\n                                    <a href=\"#\" class=\"export-option\" onclick=\"downloadExcel(); return false;\">\n                                        <span class=\"icon\">\uD83D\uDCCA</span> Excel\n                                    </a>\n                                    <a href=\"#\" class=\"export-option\" onclick=\"downloadJSON(); return false;\">\n                                        <span class=\"icon\">{ }</span> JSON\n                                    </a>\n                                </div>\n                            </div>\n                            <button class=\"export-button clear-button\" onclick=\"clearOutput()\" title=\"Clear output\">\n                                <span class=\"icon\">\u274C</span>\n                            </button>\n                        </div>\n                        <div class=\"output-content\">\n                            <div class=\"table-container\">\n                                <table id=\"resultTable\">\n                                    <thead>\n                                        <tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr>\n                                    </thead>\n                                    <tbody>\n                                        ${rows.map(row => \n                                            `<tr>${headers.map(h => `<td>${row[h] === null ? '' : String(row[h])}</td>`).join('')}</tr>`\n                                        ).join('')}\n                                    </tbody>\n                                </table>\n                            </div>\n                            <div>${rows.length} rows</div>\n                            <div class=\"execution-time\">Execution time: ${executionTime.toFixed(3)} seconds</div>\n                        </div>\n                    </div>\n                    <script>\n                        // Close export menu when clicking outside\n                        document.addEventListener('click', function(event) {\n                            const menu = document.getElementById('exportMenu');\n                            const button = event.target.closest('.export-button');\n                            if (!button && menu.classList.contains('show')) {\n                                menu.classList.remove('show');\n                            }\n                        });\n\n                        function toggleExportMenu() {\n                            const menu = document.getElementById('exportMenu');\n                            menu.classList.toggle('show');\n                        }\n\n                        function clearOutput() {\n                            const wrapper = document.querySelector('.output-wrapper');\n                            wrapper.classList.add('hidden');\n                        }\n\n                        function downloadCSV() {\n                            const table = document.getElementById('resultTable');\n                            const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent);\n                            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => \n                                Array.from(row.querySelectorAll('td')).map(cell => {\n                                    const val = cell.textContent || '';\n                                    return val.includes(',') || val.includes('\"') || val.includes('\\\\n') ?\n                                        '\"' + val.replace(/\"/g, '\"\"') + '\"' :\n                                        val;\n                                })\n                            );\n\n                            const csv = [\n                                headers.join(','),\n                                ...rows.map(row => row.join(','))\n                            ].join('\\\\n');\n\n                            downloadFile(csv, 'query_result.csv', 'text/csv');\n                        }\n\n                        function downloadJSON() {\n                            const table = document.getElementById('resultTable');\n                            const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent);\n                            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => {\n                                const rowData = {};\n                                Array.from(row.querySelectorAll('td')).forEach((cell, index) => {\n                                    rowData[headers[index]] = cell.textContent || '';\n                                });\n                                return rowData;\n                            });\n\n                            const json = JSON.stringify(rows, null, 2);\n                            downloadFile(json, 'query_result.json', 'application/json');\n                        }\n\n                        function downloadExcel() {\n                            const table = document.getElementById('resultTable');\n                            const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent);\n                            const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => \n                                Array.from(row.querySelectorAll('td')).map(cell => cell.textContent || '')\n                            );\n\n                            let xml = '<?xml version=\"1.0\"?>\\\\n<?mso-application progid=\"Excel.Sheet\"?>\\\\n';\n                            xml += '<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\">\\\\n';\n                            xml += '<Worksheet ss:Name=\"Query Result\"><Table>\\\\n';\n                            \n                            xml += '<Row>' + headers.map(h => \n                                '<Cell><Data ss:Type=\"String\">' + \n                                (h || '').replace(/[<>&]/g, c => c === '<' ? '&lt;' : c === '>' ? '&gt;' : '&amp;') + \n                                '</Data></Cell>'\n                            ).join('') + '</Row>\\\\n';\n                            \n                            rows.forEach(row => {\n                                xml += '<Row>' + row.map(cell => {\n                                    const value = cell || '';\n                                    return '<Cell><Data ss:Type=\"String\">' + \n                                        value.toString().replace(/[<>&]/g, c => \n                                            c === '<' ? '&lt;' : c === '>' ? '&gt;' : '&amp;'\n                                        ) + \n                                        '</Data></Cell>';\n                                }).join('') + '</Row>\\\\n';\n                            });\n                            \n                            xml += '</Table></Worksheet></Workbook>';\n                            downloadFile(xml, 'query_result.xls', 'application/vnd.ms-excel');\n                        }\n\n                        function downloadFile(content, filename, type) {\n                            const blob = new Blob([content], { type });\n                            const a = document.createElement('a');\n                            a.href = URL.createObjectURL(blob);\n                            a.download = filename;\n                            document.body.appendChild(a);\n                            a.click();\n                            document.body.removeChild(a);\n                            URL.revokeObjectURL(a.href);\n                            // Close the export menu after downloading\n                            document.getElementById('exportMenu').classList.remove('show');\n                        }\n                    </script>`;\n\n                const output = new vscode.NotebookCellOutput([\n                    vscode.NotebookCellOutputItem.text(html, 'text/html')\n                ]);\n\n                output.metadata = {\n                    outputType: 'display_data',\n                    custom: {\n                        vscode: {\n                            cellId: cell.document.uri.toString(),\n                            controllerId: this.id,\n                            enableScripts: true\n                        }\n                    }\n                };\n\n                execution.replaceOutput([output]);\n                execution.end(true);\n                console.log('PostgresKernel: Cell execution completed successfully');\n            } else {\n                const output = new vscode.NotebookCellOutput([\n                    vscode.NotebookCellOutputItem.text(`\n                        <div style=\"\n                            padding: 10px;\n                            margin: 5px 0;\n                            background: var(--vscode-editor-background);\n                            border: 1px solid var(--vscode-panel-border);\n                            border-radius: 4px;\n                        \">\n                            <div style=\"color: var(--vscode-gitDecoration-addedResourceForeground);\">\n                                \u2713 Query executed successfully\n                            </div>\n                            <div style=\"\n                                color: var(--vscode-foreground);\n                                opacity: 0.7;\n                                font-size: 0.9em;\n                                margin-top: 5px;\n                            \">\n                                Execution time: ${executionTime.toFixed(3)} seconds\n                            </div>\n                        </div>\n                    `, 'text/html')\n                ]);\n                execution.replaceOutput([output]);\n                execution.end(true);\n            }\n        } catch (err: any) {\n            console.error('PostgresKernel: Cell execution failed:', err);\n            execution.replaceOutput([\n                new vscode.NotebookCellOutput([\n                    vscode.NotebookCellOutputItem.error({\n                        name: 'Error',\n                        message: err.message || 'Unknown error occurred'\n                    })\n                ])\n            ]);\n            execution.end(false);\n        }\n    }\n\n    dispose() {\n        this.controller.dispose();\n    }\n}\n", "import * as vscode from 'vscode';\n\nexport class PostgresNotebookSerializer implements vscode.NotebookSerializer {\n    async deserializeNotebook(\n        content: Uint8Array,\n        _token: vscode.CancellationToken\n    ): Promise<vscode.NotebookData> {\n        const contents = new TextDecoder().decode(content);\n        let raw: any;\n        try {\n            raw = JSON.parse(contents);\n        } catch {\n            raw = { cells: [] };\n        }\n\n        const cells = raw.cells.map((item: any) => \n            new vscode.NotebookCellData(\n                item.kind === 'markdown' ? vscode.NotebookCellKind.Markup : vscode.NotebookCellKind.Code,\n                item.value,\n                item.language\n            )\n        );\n\n        return new vscode.NotebookData(cells);\n    }\n\n    async serializeNotebook(\n        data: vscode.NotebookData,\n        _token: vscode.CancellationToken\n    ): Promise<Uint8Array> {\n        const cells = data.cells.map(cell => ({\n            kind: cell.kind === vscode.NotebookCellKind.Markup ? 'markdown' : 'sql',\n            value: cell.value,\n            language: cell.kind === vscode.NotebookCellKind.Markup ? 'markdown' : 'sql'\n        }));\n\n        return new TextEncoder().encode(JSON.stringify({ cells }));\n    }\n}\n"],
  "mappings": "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",
  "names": ["exports", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "bits", "value", "elementType", "i", "exports", "module", "exports", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "require_utils", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "config", "exports", "module", "exports", "module", "types", "exports", "module", "EventEmitter", "exports", "exports", "password", "query", "exports", "exports", "exports", "exports", "exports", "module", "getStream", "getSecureStream", "exports", "module", "EventEmitter", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "EventEmitter", "Client", "exports", "module", "EventEmitter", "Promise", "Client", "err", "client", "response", "require_query", "exports", "module", "EventEmitter", "require_client", "exports", "module", "EventEmitter", "Client", "err", "exports", "module", "require_lib", "exports", "module", "Client", "vscode", "import_pg", "vscode", "import_pg", "vscode", "panel", "vscode", "vscode", "import_pg", "vscode"]
}
